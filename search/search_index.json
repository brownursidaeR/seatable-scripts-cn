{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SeaTable \u7f16\u7a0b\u624b\u518c \u00b6 \u672c\u6587\u6863\u5305\u542b SeaTable \u7f16\u7a0b\u76f8\u5173\u7684\u6587\u6863\u3002\u5305\u542b\u4ee5\u4e0b\u90e8\u5206 Javascript \u811a\u672c\u7f16\u7a0b : SeaTable \u5185\u7f6e\u7684 JavaScript \u811a\u672c, \u5f53\u524d\u7684\u6d4f\u89c8\u5668\u4e2d\u76f4\u63a5\u8fd0\u884c\uff0c\u652f\u6301\u7684 API \u6bd4\u8f83\u53d7\u9650\uff0c\u9002\u5408\u4e8e\u5bf9\u6570\u636e\u8fdb\u884c\u7b80\u5355\u7684\u5904\u7406\u3002 Python \u811a\u672c\u548c API : \u53ef\u4ee5\u5728\u4f60\u81ea\u5df1\u7684\u670d\u52a1\u5668\u8fd0\u884c\uff0c\u4e5f\u53ef\u4ee5\u4e0a\u4f20\u5230 SeaTable \u540e\u8fd0\u884c\uff0c\u9002\u5408\u4e8e\u66f4\u590d\u6742\u7684\u6570\u636e\u5904\u7406\u573a\u666f\u3002 Javascript API : \u5bf9 SeaTable \u670d\u52a1\u5668 Restful API \u7684\u5c01\u88c5\u3002\u4f60\u53ef\u4ee5\u5728\u4f60\u7684\u524d\u7aef\u9875\u9762\u4e2d\u6216\u8005 Node.js \u7a0b\u5e8f\u4e2d\u8c03\u7528\u3002 SQL \u53c2\u8003\u624b\u518c : SeaTable SQL \u63a5\u53e3\u53c2\u8003\u624b\u518c \u63d2\u4ef6\u5f00\u53d1\u6d41\u7a0b\u548c API : SeaTable \u63d2\u4ef6\u5f00\u53d1\u6d41\u7a0b\u548c API \u7f16\u7a0b\u5165\u95e8 \u00b6 \u5728 SeaTable \u4e2d\uff0c\u4e00\u4e2a\u8868\u683c\u82f1\u6587\u53eb\u505a\u4e00\u4e2a base\u3002\u4e00\u4e2a base \u5305\u62ec\u591a\u4e2a\u5b50\u8868\uff0c\u4e00\u4e2a\u5b50\u8868\u82f1\u6587\u53eb\u505a\u4e00\u4e2a table\u3002\u4e00\u4e2a table \u4e2d\u5305\u542b\u591a\u4e2a\u884c\u548c\u5217\u3002\u4e00\u4e2a\u884c\u5305\u542b\u591a\u4e2a\u5b57\u6bb5\u3002 JavaScript \u811a\u672c\u5165\u95e8 \u00b6 \u811a\u672c\u6267\u884c\u5668\u63d0\u4f9b\u4e86\u4e24\u4e2a\u57fa\u672c\u5bf9\u8c61\u4f9b\u4f60\u4f7f\u7528: base \u5bf9\u8c61\u3002\u4e00\u4e2a base \u4ee3\u8868\u4e00\u4e2a\u8868\u683c\u3002\u901a\u8fc7 base \u5bf9\u8c61\u53ef\u4ee5\u64cd\u4f5c\u8868\u683c\u4e2d\u7684\u6570\u636e\u3002 output \u5bf9\u8c61\u3002\u7528\u4e8e\u8f93\u51fa\u7ed3\u679c\u3002 \u4e0b\u9762\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u5f88\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u5c31\u662f\u8f93\u51fa\u8868\u683c\u4e2d\u5b50\u8868\u7684\u6570\u91cf\u3002\u65b0\u5efa\u4e00\u4e2a\u811a\u672c\uff0c\u5e76\u8f93\u5165\u4ee5\u4e0b\u7684\u5185\u5bb9\uff0c\u7136\u540e\u70b9\u51fb\u8fd0\u884c\u5373\u53ef: const tables = base . getTables (); output . text ( tables . length ); \u4e0b\u9762\u6211\u4eec\u6765\u770b\u53e6\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u5c31\u662f\u53d6\u51fa\u4e00\u4e2a\u5b50\u8868\u4e2d\u7684\u6240\u6709\u884c\uff0c\u7136\u540e\u628a Name \u5217\u7684\u503c\u8f93\u51fa\u51fa\u6765: // \u901a\u8fc7\u540d\u79f0\u83b7\u53d6\u5b50\u8868 const table = base . getTableByName ( '\u4e91\u7aef\u670d\u52a1' ); // \u4ece\u5b50\u8868\u83b7\u53d6\u4e00\u4e2a\u7279\u5b9a\u7684\u89c6\u56fe const view = base . getViewByName ( table , 'Default View' ); // \u901a\u8fc7 table \u548c view \u6765\u83b7\u53d6\u89c6\u56fe\u4e2d\u6240\u6709\u7684\u884c const rows = base . getRows ( table , view ); // \u904d\u5386\u548c\u6253\u5370 for ( var i = 0 ; i < rows . length ; i ++ ) { const row = rows [ i ] ; output . text ( row [ 'Name' ] ); } \u4ece\u4e0a\u9762\u7684\u4e24\u4e2a\u4f8b\u5b50\u53ef\u4ee5\u770b\u5230\uff0c\u901a\u8fc7\u8c03\u7528 base \u5bf9\u8c61\u7279\u5b9a\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u5c31\u80fd\u83b7\u53d6\u8868\u683c\u4e2d\u6240\u6709\u7684\u6570\u636e\u4e86\u3002\u5728 base \u5bf9\u8c61\u5bf9\u5e94\u7684\u6587\u6863\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u67e5\u627e\u5230 base \u63d0\u4f9b\u7684\u6240\u6709\u7684\u65b9\u6cd5\u3002 Python \u811a\u672c\u5165\u95e8 \u00b6 \u7f16\u5199\u811a\u672c\u65f6\uff0c\u9700\u8981\u4ece seatable_api \u5bfc\u5165 Base \u5bf9\u8c61\u5e76\u5bf9\u5176\u521d\u59cb\u5316\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u8c03\u7528\u5176\u4e2d\u7684\u51fd\u6570\u6765\u64cd\u4f5c\u8868\u683c\u4e86\u3002\u4e0b\u9762\u4e3a\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u7528\u4e8e\u5f80\u4e00\u4e2a\u8868\u683c\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u65b0\u884c: from seatable_api import Base server_url = os . environ . get ( 'dtable_web_url' ) api_token = os . environ . get ( 'api_token' ) base = Base ( api_token , server_url ) base . auth () row_data = { \"Name\" : \"I am new Row\" } base . append_row ( 'Table1' , row_data ) \u8fdb\u4e00\u6b65\u53c2\u8003 \u00b6 \u6570\u636e\u7ed3\u6784","title":"\u5f15\u8a00"},{"location":"#seatable","text":"\u672c\u6587\u6863\u5305\u542b SeaTable \u7f16\u7a0b\u76f8\u5173\u7684\u6587\u6863\u3002\u5305\u542b\u4ee5\u4e0b\u90e8\u5206 Javascript \u811a\u672c\u7f16\u7a0b : SeaTable \u5185\u7f6e\u7684 JavaScript \u811a\u672c, \u5f53\u524d\u7684\u6d4f\u89c8\u5668\u4e2d\u76f4\u63a5\u8fd0\u884c\uff0c\u652f\u6301\u7684 API \u6bd4\u8f83\u53d7\u9650\uff0c\u9002\u5408\u4e8e\u5bf9\u6570\u636e\u8fdb\u884c\u7b80\u5355\u7684\u5904\u7406\u3002 Python \u811a\u672c\u548c API : \u53ef\u4ee5\u5728\u4f60\u81ea\u5df1\u7684\u670d\u52a1\u5668\u8fd0\u884c\uff0c\u4e5f\u53ef\u4ee5\u4e0a\u4f20\u5230 SeaTable \u540e\u8fd0\u884c\uff0c\u9002\u5408\u4e8e\u66f4\u590d\u6742\u7684\u6570\u636e\u5904\u7406\u573a\u666f\u3002 Javascript API : \u5bf9 SeaTable \u670d\u52a1\u5668 Restful API \u7684\u5c01\u88c5\u3002\u4f60\u53ef\u4ee5\u5728\u4f60\u7684\u524d\u7aef\u9875\u9762\u4e2d\u6216\u8005 Node.js \u7a0b\u5e8f\u4e2d\u8c03\u7528\u3002 SQL \u53c2\u8003\u624b\u518c : SeaTable SQL \u63a5\u53e3\u53c2\u8003\u624b\u518c \u63d2\u4ef6\u5f00\u53d1\u6d41\u7a0b\u548c API : SeaTable \u63d2\u4ef6\u5f00\u53d1\u6d41\u7a0b\u548c API","title":"SeaTable \u7f16\u7a0b\u624b\u518c"},{"location":"#_1","text":"\u5728 SeaTable \u4e2d\uff0c\u4e00\u4e2a\u8868\u683c\u82f1\u6587\u53eb\u505a\u4e00\u4e2a base\u3002\u4e00\u4e2a base \u5305\u62ec\u591a\u4e2a\u5b50\u8868\uff0c\u4e00\u4e2a\u5b50\u8868\u82f1\u6587\u53eb\u505a\u4e00\u4e2a table\u3002\u4e00\u4e2a table \u4e2d\u5305\u542b\u591a\u4e2a\u884c\u548c\u5217\u3002\u4e00\u4e2a\u884c\u5305\u542b\u591a\u4e2a\u5b57\u6bb5\u3002","title":"\u7f16\u7a0b\u5165\u95e8"},{"location":"#javascript","text":"\u811a\u672c\u6267\u884c\u5668\u63d0\u4f9b\u4e86\u4e24\u4e2a\u57fa\u672c\u5bf9\u8c61\u4f9b\u4f60\u4f7f\u7528: base \u5bf9\u8c61\u3002\u4e00\u4e2a base \u4ee3\u8868\u4e00\u4e2a\u8868\u683c\u3002\u901a\u8fc7 base \u5bf9\u8c61\u53ef\u4ee5\u64cd\u4f5c\u8868\u683c\u4e2d\u7684\u6570\u636e\u3002 output \u5bf9\u8c61\u3002\u7528\u4e8e\u8f93\u51fa\u7ed3\u679c\u3002 \u4e0b\u9762\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u5f88\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u5c31\u662f\u8f93\u51fa\u8868\u683c\u4e2d\u5b50\u8868\u7684\u6570\u91cf\u3002\u65b0\u5efa\u4e00\u4e2a\u811a\u672c\uff0c\u5e76\u8f93\u5165\u4ee5\u4e0b\u7684\u5185\u5bb9\uff0c\u7136\u540e\u70b9\u51fb\u8fd0\u884c\u5373\u53ef: const tables = base . getTables (); output . text ( tables . length ); \u4e0b\u9762\u6211\u4eec\u6765\u770b\u53e6\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u5c31\u662f\u53d6\u51fa\u4e00\u4e2a\u5b50\u8868\u4e2d\u7684\u6240\u6709\u884c\uff0c\u7136\u540e\u628a Name \u5217\u7684\u503c\u8f93\u51fa\u51fa\u6765: // \u901a\u8fc7\u540d\u79f0\u83b7\u53d6\u5b50\u8868 const table = base . getTableByName ( '\u4e91\u7aef\u670d\u52a1' ); // \u4ece\u5b50\u8868\u83b7\u53d6\u4e00\u4e2a\u7279\u5b9a\u7684\u89c6\u56fe const view = base . getViewByName ( table , 'Default View' ); // \u901a\u8fc7 table \u548c view \u6765\u83b7\u53d6\u89c6\u56fe\u4e2d\u6240\u6709\u7684\u884c const rows = base . getRows ( table , view ); // \u904d\u5386\u548c\u6253\u5370 for ( var i = 0 ; i < rows . length ; i ++ ) { const row = rows [ i ] ; output . text ( row [ 'Name' ] ); } \u4ece\u4e0a\u9762\u7684\u4e24\u4e2a\u4f8b\u5b50\u53ef\u4ee5\u770b\u5230\uff0c\u901a\u8fc7\u8c03\u7528 base \u5bf9\u8c61\u7279\u5b9a\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u5c31\u80fd\u83b7\u53d6\u8868\u683c\u4e2d\u6240\u6709\u7684\u6570\u636e\u4e86\u3002\u5728 base \u5bf9\u8c61\u5bf9\u5e94\u7684\u6587\u6863\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u67e5\u627e\u5230 base \u63d0\u4f9b\u7684\u6240\u6709\u7684\u65b9\u6cd5\u3002","title":"JavaScript \u811a\u672c\u5165\u95e8"},{"location":"#python","text":"\u7f16\u5199\u811a\u672c\u65f6\uff0c\u9700\u8981\u4ece seatable_api \u5bfc\u5165 Base \u5bf9\u8c61\u5e76\u5bf9\u5176\u521d\u59cb\u5316\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u8c03\u7528\u5176\u4e2d\u7684\u51fd\u6570\u6765\u64cd\u4f5c\u8868\u683c\u4e86\u3002\u4e0b\u9762\u4e3a\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u7528\u4e8e\u5f80\u4e00\u4e2a\u8868\u683c\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u65b0\u884c: from seatable_api import Base server_url = os . environ . get ( 'dtable_web_url' ) api_token = os . environ . get ( 'api_token' ) base = Base ( api_token , server_url ) base . auth () row_data = { \"Name\" : \"I am new Row\" } base . append_row ( 'Table1' , row_data )","title":"Python \u811a\u672c\u5165\u95e8"},{"location":"#_2","text":"\u6570\u636e\u7ed3\u6784","title":"\u8fdb\u4e00\u6b65\u53c2\u8003"},{"location":"data-structure/","text":"Row, Column, Table, View \u00b6 Row (\u884c) \u00b6 Row \u662f\u4e00\u4e2a\u5bf9\u8c61, \u4f7f\u7528 row['colum_name'] \u53ef\u4ee5\u8bbf\u95ee\u7279\u5b9a\u5217\u7684\u5185\u5bb9. \u6709\u4e00\u4e9b\u7279\u6b8a\u7684\u5b57\u6bb5\u5982\u4e0b: _id : The id of the row _creator : The creator for this row _ctime : The create time for this row _last_modifier : The last modifier for this row _mtime : The last modified time for this row Column (\u5217) \u00b6 \u4e00\u4e2a column \u5bf9\u8c61\u6709\u4ee5\u4e0b\u7684\u5b57\u6bb5: key : The key of the column, string type : The type of the column(long-text, single-select, number, file and so on), string name : The name of the column, string \u4e0d\u540c\u7684\u5217\u7c7b\u578b\u7684\u5355\u5143\u683c\u7684\u503c\u6709\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b\uff0c\u5982\u4e0b: \u57fa\u672c\u5217\u7c7b\u578b: text : string number : number checkbox : boolean date : string, in format 2020-01-01 or 2020-01-01 10:00 single-select : option name, string long-text : markdown string image : array, each element of the array is the URL of image file : array, each element of the array is a file object [{name: string, url: string, size: number, type: 'file'}] multi-select : array, each element of the array is an option name collaborator : array, each element of the array is a collaborator's system ID URL : string email : string duration : string, in format h:mm(1:30) or h:mm:ss(0:20:30) rating : number, indicates a rating \u9ad8\u7ea7\u5217\u7c7b\u578b: formula : string geolocation : object, in format {province: xxx, city: xxx, district: xxx, detail: xxx} link : array, each element of the array is a link name auto-number : number, auto increase Table (\u5b50\u8868) \u00b6 \u4e00\u4e2a table \u5bf9\u8c61\u6709\u4ee5\u4e0b\u7684\u5b57\u6bb5: _id : The id of the table name : The name of the table, string View (\u89c6\u56fe) \u00b6 \u4e00\u4e2a\u89c6\u56fe\u5bf9\u8c61\u6709\u4ee5\u4e0b\u5b57\u6bb5: name : The name of the view, string","title":"\u5bf9\u8c61\u6570\u636e\u7ed3\u6784"},{"location":"data-structure/#row-column-table-view","text":"","title":"Row, Column, Table, View"},{"location":"data-structure/#row","text":"Row \u662f\u4e00\u4e2a\u5bf9\u8c61, \u4f7f\u7528 row['colum_name'] \u53ef\u4ee5\u8bbf\u95ee\u7279\u5b9a\u5217\u7684\u5185\u5bb9. \u6709\u4e00\u4e9b\u7279\u6b8a\u7684\u5b57\u6bb5\u5982\u4e0b: _id : The id of the row _creator : The creator for this row _ctime : The create time for this row _last_modifier : The last modifier for this row _mtime : The last modified time for this row","title":"Row (\u884c)"},{"location":"data-structure/#column","text":"\u4e00\u4e2a column \u5bf9\u8c61\u6709\u4ee5\u4e0b\u7684\u5b57\u6bb5: key : The key of the column, string type : The type of the column(long-text, single-select, number, file and so on), string name : The name of the column, string \u4e0d\u540c\u7684\u5217\u7c7b\u578b\u7684\u5355\u5143\u683c\u7684\u503c\u6709\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b\uff0c\u5982\u4e0b: \u57fa\u672c\u5217\u7c7b\u578b: text : string number : number checkbox : boolean date : string, in format 2020-01-01 or 2020-01-01 10:00 single-select : option name, string long-text : markdown string image : array, each element of the array is the URL of image file : array, each element of the array is a file object [{name: string, url: string, size: number, type: 'file'}] multi-select : array, each element of the array is an option name collaborator : array, each element of the array is a collaborator's system ID URL : string email : string duration : string, in format h:mm(1:30) or h:mm:ss(0:20:30) rating : number, indicates a rating \u9ad8\u7ea7\u5217\u7c7b\u578b: formula : string geolocation : object, in format {province: xxx, city: xxx, district: xxx, detail: xxx} link : array, each element of the array is a link name auto-number : number, auto increase","title":"Column (\u5217)"},{"location":"data-structure/#table","text":"\u4e00\u4e2a table \u5bf9\u8c61\u6709\u4ee5\u4e0b\u7684\u5b57\u6bb5: _id : The id of the table name : The name of the table, string","title":"Table (\u5b50\u8868)"},{"location":"data-structure/#view","text":"\u4e00\u4e2a\u89c6\u56fe\u5bf9\u8c61\u6709\u4ee5\u4e0b\u5b57\u6bb5: name : The name of the view, string","title":"View (\u89c6\u56fe)"},{"location":"javascript/","text":"SeaTable Javascript \u811a\u672c\u7f16\u7a0b \u00b6 SeaTable \u5185\u90e8\u7684 Javascript \u811a\u672c\u7528\u4e8e\u5728\u5f53\u524d\u7684\u6d4f\u89c8\u5668\u4e2d\u76f4\u63a5\u8fd0\u884c\uff0c\u9002\u5408\u4e8e\u5bf9\u6570\u636e\u8fdb\u884c\u7b80\u5355\u7684\u5904\u7406\u3002 \u811a\u672c\u6267\u884c\u5668\u63d0\u4f9b\u4e86\u4e24\u4e2a\u57fa\u672c\u5bf9\u8c61\u4f9b\u4f60\u4f7f\u7528: base \u5bf9\u8c61\u3002\u4e00\u4e2a base \u4ee3\u8868\u4e00\u4e2a\u8868\u683c\u3002\u901a\u8fc7 base \u5bf9\u8c61\u53ef\u4ee5\u64cd\u4f5c\u8868\u683c\u4e2d\u7684\u6570\u636e\u3002 output \u5bf9\u8c61\u3002\u7528\u4e8e\u8f93\u51fa\u7ed3\u679c\u3002 \u7f16\u7a0b\u53c2\u8003 \u00b6 SeaTable \u4e00\u822c\u5bf9\u8c61\u7684\u6570\u636e\u7ed3\u6784: \u6570\u636e\u7ed3\u6784 \u5bf9\u8c61\u63d0\u4f9b\u7684\u65b9\u6cd5: base output utilities \u4f8b\u5b50 \u00b6 \u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u94fe\u63a5\u627e\u5230\u4e00\u4e9b\u5bb9\u6613\u7406\u89e3\u7684\u4f8b\u5b50 https://github.com/seatable/seatable-scripts-cn/tree/master/examples/javascript \u5177\u4f53\u5982\u4e0b get-incremental.js : \u4ece\u4e00\u4e2a\u7d2f\u8ba1\u5217\u8ba1\u7b97\u51fa\u589e\u91cf\u6570\u636e auto-add-rows.js : \u81ea\u52a8\u5f80\u4e00\u4e2a\u8bb0\u8d26\u8868\u4e2d\u6dfb\u52a0\u6bcf\u6708\u91cd\u590d\u7684\u9879\u76ee","title":"\u5f15\u8a00"},{"location":"javascript/#seatable-javascript","text":"SeaTable \u5185\u90e8\u7684 Javascript \u811a\u672c\u7528\u4e8e\u5728\u5f53\u524d\u7684\u6d4f\u89c8\u5668\u4e2d\u76f4\u63a5\u8fd0\u884c\uff0c\u9002\u5408\u4e8e\u5bf9\u6570\u636e\u8fdb\u884c\u7b80\u5355\u7684\u5904\u7406\u3002 \u811a\u672c\u6267\u884c\u5668\u63d0\u4f9b\u4e86\u4e24\u4e2a\u57fa\u672c\u5bf9\u8c61\u4f9b\u4f60\u4f7f\u7528: base \u5bf9\u8c61\u3002\u4e00\u4e2a base \u4ee3\u8868\u4e00\u4e2a\u8868\u683c\u3002\u901a\u8fc7 base \u5bf9\u8c61\u53ef\u4ee5\u64cd\u4f5c\u8868\u683c\u4e2d\u7684\u6570\u636e\u3002 output \u5bf9\u8c61\u3002\u7528\u4e8e\u8f93\u51fa\u7ed3\u679c\u3002","title":"SeaTable Javascript \u811a\u672c\u7f16\u7a0b"},{"location":"javascript/#_1","text":"SeaTable \u4e00\u822c\u5bf9\u8c61\u7684\u6570\u636e\u7ed3\u6784: \u6570\u636e\u7ed3\u6784 \u5bf9\u8c61\u63d0\u4f9b\u7684\u65b9\u6cd5: base output utilities","title":"\u7f16\u7a0b\u53c2\u8003"},{"location":"javascript/#_2","text":"\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u94fe\u63a5\u627e\u5230\u4e00\u4e9b\u5bb9\u6613\u7406\u89e3\u7684\u4f8b\u5b50 https://github.com/seatable/seatable-scripts-cn/tree/master/examples/javascript \u5177\u4f53\u5982\u4e0b get-incremental.js : \u4ece\u4e00\u4e2a\u7d2f\u8ba1\u5217\u8ba1\u7b97\u51fa\u589e\u91cf\u6570\u636e auto-add-rows.js : \u81ea\u52a8\u5f80\u4e00\u4e2a\u8bb0\u8d26\u8868\u4e2d\u6dfb\u52a0\u6bcf\u6708\u91cd\u590d\u7684\u9879\u76ee","title":"\u4f8b\u5b50"},{"location":"javascript/base/","text":"Base \u5bf9\u8c61 \u00b6 Base \u5bf9\u8c61\u63d0\u4f9b\u4e86\u4e00\u4e9b\u64cd\u4f5c\u6570\u636e\u7684\u65b9\u6cd5 \u5b50\u8868 \u00b6 getActiveTable \u00b6 \u83b7\u53d6\u5f53\u524d\u9009\u4e2d\u7684\u8868\u683c, \u8fd4\u56de\u4e00\u4e2a table \u5bf9\u8c61 \u4f8b\u5b50 \u00b6 const table = base . getActiveTable (); output . markdown ( `#### ${ table . name } ` ); getTables \u00b6 \u83b7\u53d6\u6240\u6709\u7684\u5b50\u8868 \u4f8b\u5b50 \u00b6 const tables = base . getTables (); output . text ( tables . length ); getTableByName \u00b6 \u901a\u8fc7\u4e00\u4e2a\u8868\u683c\u7684\u540d\u79f0\u83b7\u53d6\u4e00\u4e2a table \u5bf9\u8c61 const table = base . getTableByName ( tableName : String ); \u4f8b\u5b50 \u00b6 const table = base . getTableByName ( 'Table1' ); output . text ( table . _id ); addTable \u00b6 \u6dfb\u52a0\u4e00\u4e2a\u5b50\u8868 base . addTable ( tableName : String ); \u4f8b\u5b50 \u00b6 base . addTable ( 'New table' ); renameTable \u00b6 \u91cd\u547d\u540d\u4e00\u4e2a\u5b50\u8868 base . renameTable ( oldName : String , newName : String ); \u4f8b\u5b50 \u00b6 base . renameTable ( 'Old name' , 'New name' ); deleteTable \u00b6 \u5220\u9664\u4e00\u4e2a\u5b50\u8868 base . deleteTable ( tableName : String ); \u4f8b\u5b50 \u00b6 base . deleteTable ( 'Old table' ); \u89c6\u56fe \u00b6 getActiveView \u00b6 \u83b7\u53d6\u5f53\u524d\u7684\u89c6\u56fe\uff0c\u8be5\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a view \u5bf9\u8c61 \u4f8b\u5b50 \u00b6 const view = base . getActiveView (); output . text ( view . _id ); getViews \u00b6 \u83b7\u53d6\u5f53\u524d\u8868\u683c\u7684\u6240\u6709\u89c6\u56fe\uff0c\u5e76\u4ee5\u4e00\u4e2a\u6570\u7ec4\u7684\u5f62\u5f0f\u8fd4\u56de\u6240\u6709\u7684\u89c6\u56fe const views = base . getViews ( table : Object / String ); \u4f8b\u5b50 \u00b6 const table = base . getTableByName ( 'Table1' ); const views = base . getViews ( table ); output . text ( views . length ); const views = base . getViews ( 'Table1' ); output . text ( views . length ); getViewByName \u00b6 \u901a\u8fc7\u89c6\u56fe\u7684\u540d\u79f0\u83b7\u53d6\u8868\u683c\u4e2d\u7684\u4e00\u4e2a\u89c6\u56fe\u5bf9\u8c61\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u89c6\u56fe\u5bf9\u8c61 const view = base . getViewByName ( table : Object / String , viewName : String ); \u4f8b\u5b50 \u00b6 const table = base . getTableByName ( 'Table1' ); const view = base . getViewByName ( table , 'view 1' ); output . text ( view . name ); const view = base . getViewByName ( 'Table1' , 'view 1' ); output . text ( view . name ); addView \u00b6 \u4e00\u4e2a\u5b50\u8868\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u89c6\u56fe base . addView ( table : Object / String , viewName : String ); \u4f8b\u5b50 \u00b6 const table = base . getTableByName ( 'Table1' ); base . addView ( table , 'view 2' ); base . addView ( 'Table1' , 'view 2' ); renameView \u00b6 \u91cd\u547d\u540d\u4e00\u4e2a\u5b50\u8868\u4e2d\u7684\u4e00\u4e2a\u89c6\u56fe base . renameView ( table : Object / String , currentViewName : String , nextViewName : String ); \u4f8b\u5b50 \u00b6 const table = base . getTableByName ( 'Table1' ); base . renameView ( table , 'view1' , 'view2' ); base . renameView ( 'Table1' , 'view1' , 'view2' ); deleteView \u00b6 \u5220\u9664\u4e00\u4e2a\u89c6\u56fe base . deleteView ( table : Object / String , viewName : String ); \u4f8b\u5b50 \u00b6 const table = base . getTableByName ( 'Table1' ); base . deleteView ( table , 'view2' ); base . deleteView ( 'Table1' , 'view2' ); \u5217 \u00b6 getColumns \u00b6 \u83b7\u53d6\u4e00\u4e2a\u8868\u683c\u4e2d\u7684\u6240\u6709\u5217\uff0c\u5e76\u4ee5\u4e00\u4e2a\u6570\u7ec4\u7684\u5f62\u5f0f\u8fd4\u56de\u6240\u6709\u7684\u5217\u5bf9\u8c61 const columns = base . getColumns ( table : Object / String ); \u4f8b\u5b50 \u00b6 const table = base . getTableByName ( 'Table1' ); const columns = base . getColumns ( table ); column . forEach (( column ) => { output . text ( column . name ); }) const columns = base . getColumns ( 'Table1' ); getShownColumns \u00b6 \u83b7\u53d6\u4e00\u4e2a\u89c6\u56fe\u4e2d\u6240\u6709\u663e\u793a\u7684\u5217\uff0c\u4e0d\u5305\u542b\u8be5\u89c6\u56fe\u4e2d\u5df2\u7ecf\u88ab\u9690\u85cf\u7684\u5217, \u8fd4\u56de\u4e00\u4e2a\u6570\u7ec4 const columns = base . getShownColumns ( table : Object / String , view : Object / String ); \u4f8b\u5b50 \u00b6 const table = base . getTableByName ( 'Table1' ); const view = base . getViewByName ( table , 'view 1' ); const columns = base . getShownColumns ( table , view ); column . forEach (( column ) => { output . text ( column . name ); }) const columns = base . getShownColumns ( 'Table1' , 'view 1' ); getColumnByName \u00b6 \u901a\u8fc7\u5217\u7684\u540d\u79f0\u83b7\u53d6\u8be5\u5217\u5bf9\u8c61 const column = base . getColumnByName ( table : Object / String , name : String ); \u4f8b\u5b50 \u00b6 const column = base . getColumnByName ( table , 'Column name' ); output . text ( column . name ); const column = base . getColumnByName ( 'Table1' , 'Column name' ); getColumnsByType \u00b6 \u83b7\u53d6\u8be5\u8868\u683c\u4e2d\u6240\u6709\u7279\u5b9a\u79cd\u7c7b\u7684\u5217 const columns = base . getColumnsByType ( table : Object / String , type : String ); \u4f8b\u5b50 \u00b6 const table = base . getTableByName ( 'Table1' ); const columns = base . getColumnsByType ( table , 'text' ); output . text ( column . length ); const columns = base . getColumnsByType ( 'Table1' , 'text' ); output . text ( column . length ); \u884c \u00b6 getRows \u00b6 \u83b7\u53d6\u4e00\u4e2a\u89c6\u56fe\u6240\u6709\u7684\u884c\uff0c\u8fd4\u56de\u4e00\u4e2a\u6570\u7ec4 const rows = base . getRows ( table : Object / String , view : Object / String ); \u4f8b\u5b50 \u00b6 const table = base . getTableByName ( 'Table1' ); const view = base . getViewByName ( table , 'view1' ); const rows = base . getRows ( table , view ); const rows = base . getRows ( 'Table1' , 'view1' ); getGroupedRows \u00b6 \u83b7\u53d6\u5206\u7ec4\u89c6\u56fe\u4e2d\u7684\u884c\u5206\u7ec4\u6570\u636e base . getGroupedRows ( table : Object / String , view : Object / String ); \u4f8b\u5b50 \u00b6 const table = base . getTableByName ( 'Table1' ); const view = base . getViewByName ( table , '\u5206\u7ec4\u89c6\u56fe' ); const groupViewRows = base . getGroupedRows ( table , view ); const groupViewRows = base . getGroupedRows ( 'Table1' , '\u5206\u7ec4\u89c6\u56fe' ); getRowById \u00b6 \u901a\u8fc7\u4e00\u4e2a\u884c\u7684 id \u83b7\u53d6\u884c\uff0c\u8fd4\u56de\u4e00\u4e2a\u884c\u5bf9\u8c61 const row = base . getRowById ( table : Object / String , rowId : String ); \u4f8b\u5b50 \u00b6 const table = base . getTableByName ( 'Table1' ); const row = base . getRowById ( table , \"M_lSEOYYTeuKTaHCEOL7nw\" ); const row = base . getRowById ( 'Table1' , \"M_lSEOYYTeuKTaHCEOL7nw\" ); deleteRowById \u00b6 \u901a\u8fc7\u4e00\u4e2a\u884c\u7684 id \u5220\u9664\u5f53\u524d\u8868\u683c\u4e2d\u7684\u8be5\u884c base . deleteRowById ( table : Object / String , rowId : String ); \u4f8b\u5b50 \u00b6 const table = base . getTableByName ( 'Table1' ); base . deleteRowById ( table , 'M_lSEOYYTeuKTaHCEOL7nw' ); base . deleteRowById ( 'Table1' , 'M_lSEOYYTeuKTaHCEOL7nw' ); addRow \u00b6 \u5728\u4e00\u4e2a\u5b50\u8868\u4e2d\u6dfb\u52a0\u4e00\u884c base . addRow ( table : Object / String , rowData : Object , viewName ?: String ) \u4f8b\u5b50 \u00b6 const table = base . getTableByName ( 'Table1' ); base . addRow ( table , { '\u540d\u79f0' : '\u5c0f\u5f3a' , '\u5e74\u9f84' : '18' }); base . addRow ( table , { '\u540d\u79f0' : '\u5c0f\u5f3a' , '\u5e74\u9f84' : '18' }, 'Default View' ); base . addRow ( 'Table1' , { '\u540d\u79f0' : '\u5c0f\u5f3a' , '\u5e74\u9f84' : '18' }); base . addRow ( 'Table1' , { '\u540d\u79f0' : '\u5c0f\u5f3a' , '\u5e74\u9f84' : '18' }, 'Default View' ); modifyRow \u00b6 \u4fee\u6539\u8868\u683c\u4e2d\u7684\u67d0\u4e00\u884c base . modifyRow ( table : Object / String , row : Object , updateRowData : Object ); \u4f8b\u5b50 \u00b6 const table = base . getTableByName ( 'Table1' ); const row = base . getRowById ( table , \"M_lSEOYYTeuKTaHCEOL7nw\" ); base . modifyRow ( table , row , { 'Name' : 'new name' , 'number' : 100 }); const row = base . getRowById ( 'Table1' , \"M_lSEOYYTeuKTaHCEOL7nw\" ); base . modifyRow ( 'Table1' , row , { 'Name' : 'new name' , 'number' : 100 }); modifyRows \u00b6 \u4e00\u6b21\u6027\u4fee\u6539\u8868\u683c\u4e2d\u7684\u591a\u884c base . modifyRows ( table : Object / String , rows : Array , updatedRows : Array ); \u4f8b\u5b50 \u00b6 const table = base . getTableByName ( 'Table1' ); const rows = base . getRows ( 'Table1' , '\u9ed8\u8ba4\u89c6\u56fe' ); const selectedColumnName = '\u540d\u79f0' ; const selectedRows = [], updatedRows = []; rows . forEach (( row ) => { if ( row [ selectedColumnName ] === 'name' ) { selectedRows . push ( row ); updatedRows . push ({[ selectedColumnName ] : 'name1' }); } }); base . modifyRows ( table , selectedRows , updatedRows ); filter \u00b6 \u901a\u8fc7\u4e00\u4e2a\u67e5\u8be2\u8bed\u53e5, \u7b5b\u9009\u51fa\u8868\u683c\u4e2d\u7b26\u5408\u6761\u4ef6\u7684\u884c, \u8fd4\u56de\u4e00\u4e2a querySet \u5bf9\u8c61 \u67e5\u8be2\u8bed\u53e5\u89c4\u8303 QuerySet \u4f8b\u5b50 \u00b6 // \u8fc7\u6ee4\u51fa number\u5217 \u7b49\u4e8e 5 \u7684\u884c, \u8fd4\u56de\u4e00\u4e2a querySet \u5bf9\u8c61 const querySet = base . filter ( 'Table1' , '\u9ed8\u8ba4\u89c6\u56fe' , 'number = 5' ); Links \u00b6 addLink \u00b6 \u6dfb\u52a0\u94fe\u63a5\uff0c\u94fe\u63a5\u5176\u4ed6\u8868\u8bb0\u5f55 base . addLink ( linkId , tableName , linkedTableName , rowId , linkedRowId ) \u5176\u4e2d linkId: \u94fe\u63a5\u5217data\u5c5e\u6027\u4e0b\u7684 link_id tableName: \u94fe\u63a5\u8868\u7684\u540d\u5b57 linkedTableName: \u88ab\u94fe\u63a5\u8868\u7684\u540d\u5b57 rowId: \u94fe\u63a5\u884c id linkedRowId: \u88ab\u94fe\u63a5\u884c\u7684 id \u4f8b\u5b50 \u00b6 base . addLink ( '5WeC' , 'real-img-files' , 'contact' , 'CGtoJB1oQM60RiKT-c5J-g' , 'PALm2wPKTCy-jdJNv_UWaQ' ) removeLink \u00b6 \u79fb\u9664\u67d0\u4e2a\u94fe\u63a5 base . removeLink ( linkId , tableName , linkedTableName , rowId , linkedRowId ) \u4f8b\u5b50 \u00b6 base . removeLink ( '5WeC' , 'real-img-files' , 'contact' , 'CGtoJB1oQM60RiKT-c5J-g' , 'PALm2wPKTCy-jdJNv_UWaQ' ) getColumnLinkId \u00b6 \u901a\u8fc7\u5217\u540d\u6765\u83b7\u53d6\u94fe\u63a5\u7684id base . getColumnLinkId ( table_name , column_name ) \u4f8b\u5b50 \u00b6 base . getColumnLinkId ( 'Table1' , '\u8bb0\u5f55' ) updateLinks \u00b6 \u79fb\u9664\u73b0\u6709\u7684\u6240\u6709\u7684\u884c\u7684\u94fe\u63a5, \u5e76\u6dfb\u52a0\u65b0\u94fe\u63a5 base . updateLinks ( linkId , tableName , linkedTableName , rowId , updatedlinkedRowIds ) \u4f8b\u5b50 \u00b6 const rows = base . getRows ( 'contact' , '\u9ed8\u8ba4\u89c6\u56fe' ); // \u66f4\u65b0\u884c\u7684\u94fe\u63a5\u4e3a [rows[0]._id, rows[1]._id, rows[2]._id, rows[3]._id] base . updateLinks ( '5WeC' , 'real-img-files' , 'contact' , 'CGtoJB1oQM60RiKT-c5J-g' , [ rows [ 0 ]. _id , rows [ 1 ]. _id , rows [ 2 ]. _id , rows [ 3 ]. _id ])","title":"Base"},{"location":"javascript/base/#base","text":"Base \u5bf9\u8c61\u63d0\u4f9b\u4e86\u4e00\u4e9b\u64cd\u4f5c\u6570\u636e\u7684\u65b9\u6cd5","title":"Base \u5bf9\u8c61"},{"location":"javascript/base/#_1","text":"","title":"\u5b50\u8868"},{"location":"javascript/base/#getactivetable","text":"\u83b7\u53d6\u5f53\u524d\u9009\u4e2d\u7684\u8868\u683c, \u8fd4\u56de\u4e00\u4e2a table \u5bf9\u8c61","title":"getActiveTable"},{"location":"javascript/base/#gettables","text":"\u83b7\u53d6\u6240\u6709\u7684\u5b50\u8868","title":"getTables"},{"location":"javascript/base/#gettablebyname","text":"\u901a\u8fc7\u4e00\u4e2a\u8868\u683c\u7684\u540d\u79f0\u83b7\u53d6\u4e00\u4e2a table \u5bf9\u8c61 const table = base . getTableByName ( tableName : String );","title":"getTableByName"},{"location":"javascript/base/#addtable","text":"\u6dfb\u52a0\u4e00\u4e2a\u5b50\u8868 base . addTable ( tableName : String );","title":"addTable"},{"location":"javascript/base/#renametable","text":"\u91cd\u547d\u540d\u4e00\u4e2a\u5b50\u8868 base . renameTable ( oldName : String , newName : String );","title":"renameTable"},{"location":"javascript/base/#deletetable","text":"\u5220\u9664\u4e00\u4e2a\u5b50\u8868 base . deleteTable ( tableName : String );","title":"deleteTable"},{"location":"javascript/base/#_8","text":"","title":"\u89c6\u56fe"},{"location":"javascript/base/#getactiveview","text":"\u83b7\u53d6\u5f53\u524d\u7684\u89c6\u56fe\uff0c\u8be5\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a view \u5bf9\u8c61","title":"getActiveView"},{"location":"javascript/base/#getviews","text":"\u83b7\u53d6\u5f53\u524d\u8868\u683c\u7684\u6240\u6709\u89c6\u56fe\uff0c\u5e76\u4ee5\u4e00\u4e2a\u6570\u7ec4\u7684\u5f62\u5f0f\u8fd4\u56de\u6240\u6709\u7684\u89c6\u56fe const views = base . getViews ( table : Object / String );","title":"getViews"},{"location":"javascript/base/#getviewbyname","text":"\u901a\u8fc7\u89c6\u56fe\u7684\u540d\u79f0\u83b7\u53d6\u8868\u683c\u4e2d\u7684\u4e00\u4e2a\u89c6\u56fe\u5bf9\u8c61\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u89c6\u56fe\u5bf9\u8c61 const view = base . getViewByName ( table : Object / String , viewName : String );","title":"getViewByName"},{"location":"javascript/base/#addview","text":"\u4e00\u4e2a\u5b50\u8868\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u89c6\u56fe base . addView ( table : Object / String , viewName : String );","title":"addView"},{"location":"javascript/base/#renameview","text":"\u91cd\u547d\u540d\u4e00\u4e2a\u5b50\u8868\u4e2d\u7684\u4e00\u4e2a\u89c6\u56fe base . renameView ( table : Object / String , currentViewName : String , nextViewName : String );","title":"renameView"},{"location":"javascript/base/#deleteview","text":"\u5220\u9664\u4e00\u4e2a\u89c6\u56fe base . deleteView ( table : Object / String , viewName : String );","title":"deleteView"},{"location":"javascript/base/#_15","text":"","title":"\u5217"},{"location":"javascript/base/#getcolumns","text":"\u83b7\u53d6\u4e00\u4e2a\u8868\u683c\u4e2d\u7684\u6240\u6709\u5217\uff0c\u5e76\u4ee5\u4e00\u4e2a\u6570\u7ec4\u7684\u5f62\u5f0f\u8fd4\u56de\u6240\u6709\u7684\u5217\u5bf9\u8c61 const columns = base . getColumns ( table : Object / String );","title":"getColumns"},{"location":"javascript/base/#getshowncolumns","text":"\u83b7\u53d6\u4e00\u4e2a\u89c6\u56fe\u4e2d\u6240\u6709\u663e\u793a\u7684\u5217\uff0c\u4e0d\u5305\u542b\u8be5\u89c6\u56fe\u4e2d\u5df2\u7ecf\u88ab\u9690\u85cf\u7684\u5217, \u8fd4\u56de\u4e00\u4e2a\u6570\u7ec4 const columns = base . getShownColumns ( table : Object / String , view : Object / String );","title":"getShownColumns"},{"location":"javascript/base/#getcolumnbyname","text":"\u901a\u8fc7\u5217\u7684\u540d\u79f0\u83b7\u53d6\u8be5\u5217\u5bf9\u8c61 const column = base . getColumnByName ( table : Object / String , name : String );","title":"getColumnByName"},{"location":"javascript/base/#getcolumnsbytype","text":"\u83b7\u53d6\u8be5\u8868\u683c\u4e2d\u6240\u6709\u7279\u5b9a\u79cd\u7c7b\u7684\u5217 const columns = base . getColumnsByType ( table : Object / String , type : String );","title":"getColumnsByType"},{"location":"javascript/base/#_20","text":"","title":"\u884c"},{"location":"javascript/base/#getrows","text":"\u83b7\u53d6\u4e00\u4e2a\u89c6\u56fe\u6240\u6709\u7684\u884c\uff0c\u8fd4\u56de\u4e00\u4e2a\u6570\u7ec4 const rows = base . getRows ( table : Object / String , view : Object / String );","title":"getRows"},{"location":"javascript/base/#getgroupedrows","text":"\u83b7\u53d6\u5206\u7ec4\u89c6\u56fe\u4e2d\u7684\u884c\u5206\u7ec4\u6570\u636e base . getGroupedRows ( table : Object / String , view : Object / String );","title":"getGroupedRows"},{"location":"javascript/base/#getrowbyid","text":"\u901a\u8fc7\u4e00\u4e2a\u884c\u7684 id \u83b7\u53d6\u884c\uff0c\u8fd4\u56de\u4e00\u4e2a\u884c\u5bf9\u8c61 const row = base . getRowById ( table : Object / String , rowId : String );","title":"getRowById"},{"location":"javascript/base/#deleterowbyid","text":"\u901a\u8fc7\u4e00\u4e2a\u884c\u7684 id \u5220\u9664\u5f53\u524d\u8868\u683c\u4e2d\u7684\u8be5\u884c base . deleteRowById ( table : Object / String , rowId : String );","title":"deleteRowById"},{"location":"javascript/base/#addrow","text":"\u5728\u4e00\u4e2a\u5b50\u8868\u4e2d\u6dfb\u52a0\u4e00\u884c base . addRow ( table : Object / String , rowData : Object , viewName ?: String )","title":"addRow"},{"location":"javascript/base/#modifyrow","text":"\u4fee\u6539\u8868\u683c\u4e2d\u7684\u67d0\u4e00\u884c base . modifyRow ( table : Object / String , row : Object , updateRowData : Object );","title":"modifyRow"},{"location":"javascript/base/#modifyrows","text":"\u4e00\u6b21\u6027\u4fee\u6539\u8868\u683c\u4e2d\u7684\u591a\u884c base . modifyRows ( table : Object / String , rows : Array , updatedRows : Array );","title":"modifyRows"},{"location":"javascript/base/#filter","text":"\u901a\u8fc7\u4e00\u4e2a\u67e5\u8be2\u8bed\u53e5, \u7b5b\u9009\u51fa\u8868\u683c\u4e2d\u7b26\u5408\u6761\u4ef6\u7684\u884c, \u8fd4\u56de\u4e00\u4e2a querySet \u5bf9\u8c61 \u67e5\u8be2\u8bed\u53e5\u89c4\u8303 QuerySet","title":"filter"},{"location":"javascript/base/#_28","text":"// \u8fc7\u6ee4\u51fa number\u5217 \u7b49\u4e8e 5 \u7684\u884c, \u8fd4\u56de\u4e00\u4e2a querySet \u5bf9\u8c61 const querySet = base . filter ( 'Table1' , '\u9ed8\u8ba4\u89c6\u56fe' , 'number = 5' );","title":"\u4f8b\u5b50"},{"location":"javascript/base/#links","text":"","title":"Links"},{"location":"javascript/base/#addlink","text":"\u6dfb\u52a0\u94fe\u63a5\uff0c\u94fe\u63a5\u5176\u4ed6\u8868\u8bb0\u5f55 base . addLink ( linkId , tableName , linkedTableName , rowId , linkedRowId ) \u5176\u4e2d linkId: \u94fe\u63a5\u5217data\u5c5e\u6027\u4e0b\u7684 link_id tableName: \u94fe\u63a5\u8868\u7684\u540d\u5b57 linkedTableName: \u88ab\u94fe\u63a5\u8868\u7684\u540d\u5b57 rowId: \u94fe\u63a5\u884c id linkedRowId: \u88ab\u94fe\u63a5\u884c\u7684 id","title":"addLink"},{"location":"javascript/base/#removelink","text":"\u79fb\u9664\u67d0\u4e2a\u94fe\u63a5 base . removeLink ( linkId , tableName , linkedTableName , rowId , linkedRowId )","title":"removeLink"},{"location":"javascript/base/#getcolumnlinkid","text":"\u901a\u8fc7\u5217\u540d\u6765\u83b7\u53d6\u94fe\u63a5\u7684id base . getColumnLinkId ( table_name , column_name )","title":"getColumnLinkId"},{"location":"javascript/base/#updatelinks","text":"\u79fb\u9664\u73b0\u6709\u7684\u6240\u6709\u7684\u884c\u7684\u94fe\u63a5, \u5e76\u6dfb\u52a0\u65b0\u94fe\u63a5 base . updateLinks ( linkId , tableName , linkedTableName , rowId , updatedlinkedRowIds )","title":"updateLinks"},{"location":"javascript/context/","text":"Context \u5bf9\u8c61 \u00b6 \u5f53\u811a\u672c\u8fd0\u884c\u65f6, context \u5bf9\u8c61\u63d0\u4f9b\u4e86\u4e0a\u4e0b\u6587\u73af\u5883\u3002\u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b: base . context . currentTable // \u7528\u6237\u8fd0\u884c\u4e00\u4e2a\u811a\u672c\u7684\u65f6\u5019\uff0c\u5f53\u524d\u7528\u6237\u6b63\u5728\u67e5\u770b\u7684\u5b50\u8868\u7684\u540d\u79f0 base . context . currentRow // \u7528\u6237\u8fd0\u884c\u4e00\u4e2a\u811a\u672c\u7684\u65f6\u5019\uff0c\u5f53\u524d\u5149\u6807\u6240\u5728\u7684\u884c","title":"Context"},{"location":"javascript/context/#context","text":"\u5f53\u811a\u672c\u8fd0\u884c\u65f6, context \u5bf9\u8c61\u63d0\u4f9b\u4e86\u4e0a\u4e0b\u6587\u73af\u5883\u3002\u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b: base . context . currentTable // \u7528\u6237\u8fd0\u884c\u4e00\u4e2a\u811a\u672c\u7684\u65f6\u5019\uff0c\u5f53\u524d\u7528\u6237\u6b63\u5728\u67e5\u770b\u7684\u5b50\u8868\u7684\u540d\u79f0 base . context . currentRow // \u7528\u6237\u8fd0\u884c\u4e00\u4e2a\u811a\u672c\u7684\u65f6\u5019\uff0c\u5f53\u524d\u5149\u6807\u6240\u5728\u7684\u884c","title":"Context \u5bf9\u8c61"},{"location":"javascript/output/","text":"Output \u5bf9\u8c61 \u00b6 Output \u5bf9\u8c61\u652f\u6301\u8f93\u51fa\u6587\u672c\u683c\u5f0f\u6216\u8005 Markdwon \u683c\u5f0f\u7684\u5185\u5bb9 Text \u00b6 const table = base . getActiveTable (); output . text ( table . name ); Markdown \u00b6 const table = base . getActiveTable () \uff1b output . markdown ( `##### ${ table . name } ` );","title":"Output"},{"location":"javascript/output/#output","text":"Output \u5bf9\u8c61\u652f\u6301\u8f93\u51fa\u6587\u672c\u683c\u5f0f\u6216\u8005 Markdwon \u683c\u5f0f\u7684\u5185\u5bb9","title":"Output \u5bf9\u8c61"},{"location":"javascript/query-sentences/","text":"Query-Sentence \u00b6 \u901a\u8fc7 base.filter \u7684\u8c03\u7528\u7ed3\u5408\u5199\u5165\u7c7b sql \u7684\u8bed\u53e5\u7684\u65b9\u5f0f\u53ef\u4ee5\u7075\u6d3b\u7684\u5bf9\u8868\u683c\u4e2d\u6570\u636e\u8fdb\u884c\u67e5\u8be2\uff0c \u5176\u4e2d\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b\u652f\u6301\u7684\u67e5\u8be2\u65b9\u5f0f\uff0c\u4ee5\u53ca\u67e5\u8be2\u8bed\u53e5\u4e66\u5199\u89c4\u8303\u6709\u4e9b\u8bb8\u5dee\u5f02\uff0c\u4ee5\u4e0b\u8fdb\u884c\u8be6\u7ec6\u8bf4\u660e \u64cd\u4f5c\u7b26\u8bf4\u660e \u00b6 \u5927\u5c0f\u6bd4\u8f83: >\uff0c >=\uff0c =\uff0c \\<\uff0c \\<= \u76f8\u5f02\u6bd4\u8f83: =\uff0c \\<> \u6570\u5b66\u8fd0\u7b97: +, -, *, /, ^, % \u6c47\u603b \u00b6 \u4ee5 queryset = base.filter(\"Table1\", \"age>18\") \u4e2d\u7684\u8bed\u53e5\u4e3a\u4f8b\uff1a age: \u5217\u540d\uff0c\u4ee5\u4e0b\u7528 column_name \u4ee3\u66ff > : \u64cd\u4f5c\u7b26 18: \u67e5\u8be2\u53c2\u6570 \u6570\u636e\u7ed3\u6784 \u5217\u7c7b\u578b \u5927\u5c0f\u6bd4\u8f83\u53c2\u6570\u89c4\u8303 \u76f8\u5f02\u6bd4\u8f83\u53c2\u6570\u89c4\u8303 \u6570\u5b66\u8fd0\u7b97 \u5b57\u7b26\u4e32 \u6587\u672c, \u957f\u6587\u672c, URL, \u90ae\u7bb1, \u5355\u9009 \u4e0d\u652f\u6301 \u5b57\u7b26\u4e32, \u7a7a\u503c \"\" \u4e0d\u652f\u6301 \u5217\u8868 \u591a\u9009 \u4e0d\u652f\u6301 \u5b57\u7b26\u4e32 \u4e0d\u652f\u6301 \u6570\u5b57 \u6570\u5b57 \u63a5\u53d7\u6574\u6570\uff0c\u5c0f\u6570 \u63a5\u53d7\u6574\u6570\uff0c\u5c0f\u6570\uff0c\u7a7a\u503c\u201c\u201d \u652f\u6301 \u65e5\u671f \u65e5\u671f, \u521b\u5efa\u65f6\u95f4, \u4fee\u6539\u65f6\u95f4 \u63a5\u53d7\u65e5\u671f\u683c\u5f0f\u7684\u53c2\u6570\uff0c\u89c4\u5219\u5982\u4e0b\uff1a\u5e74-\u6708-\u65e5 \u5982 \"2020-1-30\", \u5e74-\u6708-\u65e5 \u65f6:\u5206 \u5982\"2020-1-30 5:28\", \u5e74-\u6708-\u65e5 \u65f6:\u5206:\u79d2 \u5982 \"2020-1-30 5:28:7\" \u540c\u5927\u5c0f\u6bd4\u8f83\u53c2\u6570\u89c4\u8303\u76f8\u540c\uff0c\u6b64\u5916\u63a5\u53d7\u7a7a\u503c\"\" \u4e0d\u652f\u6301 \u5e03\u5c14 \u52fe\u9009 \u4e0d\u652f\u6301 \u63a5\u53d7 True\uff0cFalse (\u4e0d\u533a\u5206\u5927\u5c0f\u5199)\uff0c \u7a7a\u503c \u4e0d\u652f\u6301 \u4e3e\u4f8b\u8bf4\u660e \u00b6 \u5b57\u7b26\u4e32\u6570\u636e\u7ed3\u6784\u5217 \u00b6 \u5305\u542b \u6587\u672c \uff0c \u957f\u6587\u672c \uff0c URL \uff0c \u90ae\u7bb1 \uff0c \u5355\u9009 \u7b49\u5217\u7c7b\u578b # 1. \u76f8\u5f02\u6bd4\u8f83 base . filter ( 'Table1' , 'view_name' , \"column_name=hello world\" ) base . filter ( 'Table1' , 'view_name' , \"column_name!=''\" ) \u5217\u8868\u6570\u636e\u7ed3\u6784\u5217 \u00b6 \u5305\u542b \u591a\u9009 \u7b49\u5217\u7c7b\u578b // \u76f8\u5f02\u6bd4\u8f83 base . filter ( 'Table1' , 'view_name' , \"column_name=\u5317\u4eac and column_name=\u4e0a\u6d77\" ) # \u540c\u65f6\u5305\u542b \u201c \u5317\u4eac \u201d \u548c \u201c \u4e0a\u6d77 \u201d \u7684\u884c \uff0c and \u53ef\u4ee5\u66ff\u6362\u6210 or \u6570\u5b57\u6570\u636e\u7ed3\u6784\u5217 \u00b6 \u6570\u5b57\u7c7b\u578b\u6570\u636e\u7684\u6bd4\u8f83 // 1. \u5927\u5c0f\u6bd4\u8f83 base . filter ( 'Table1' , 'view_name' , \"column_name>18\" ) base . filter ( 'Table1' , 'view_name' , \"column_name>-10 and column_name<=0\" ) // 2. \u76f8\u5f02\u6bd4\u8f83 base . filter ( 'Table1' , 'view_name' , \"column_name<>20\" ) base . filter ( 'Table1' , 'view_name' , \"column_name=0\" ) base . filter ( 'Table1' , 'view_name' , \"column_name=''\" ) \u6570\u5b66\u8fd0\u7b97 base . filter ( 'Table1' , 'view_name' , \"column_name+3>18\" ) base . filter ( 'Table1' , 'view_name' , \"column_name*2=18\" ) base . filter ( 'Table1' , 'view_name' , \"column_name-2=18\" ) base . filter ( 'Table1' , 'view_name' , \"column_name/2=18\" ) base . filter ( 'Table1' , 'view_name' , \"column_name^2=18\" ) base . filter ( 'Table1' , 'view_name' , \"column_name%2=1\" ) \u65e5\u671f\u6570\u636e\u7ed3\u6784\u5217 \u00b6 \u5305\u62ec \u65e5\u671f \uff0c \u521b\u5efa\u65f6\u95f4 \uff0c \u4fee\u6539\u65f6\u95f4 \u7b49, # 1. \u5927\u5c0f\u6bd4\u8f83 base . filter ( 'Table1' , 'view_name' , \"column_name>'2020-1-30'\" ) base . filter ( 'Table1' , \"column_name>='2019-1-1 5:30' and column_name<='2019-5-1 6:00'\" ) # 2. \u76f8\u5f02\u6bd4\u8f83 base . filter ( 'Table1' , 'view_name' , \"column_name='2020-1-1 10:59:59'\" ) base . filter ( 'Table1' , 'view_name' , \"column_name!=''\" ) \u6ce8\u610f: \u65e5\u671f\u6bd4\u8f83\u9700\u8981\u628a\u67e5\u8be2\u7684\u65e5\u671f\u52a0\u4e0a\u5f15\u53f7 \u5e03\u5c14\u6570\u636e\u7ed3\u6784\u5217 \u00b6 \u52fe\u9009 \u7c7b\u578b // \u76f8\u5f02\u6bd4\u8f83 base . filter ( 'Table1' , 'view_name' , 'column_name=False' ) # \u540c base . filter ( 'Table1' , 'view_name' , \"column_name=''\" ) base . filter ( 'Table1' , 'view_name' , \"column_name=True\" )","title":"Query-Sentence"},{"location":"javascript/query-sentences/#query-sentence","text":"\u901a\u8fc7 base.filter \u7684\u8c03\u7528\u7ed3\u5408\u5199\u5165\u7c7b sql \u7684\u8bed\u53e5\u7684\u65b9\u5f0f\u53ef\u4ee5\u7075\u6d3b\u7684\u5bf9\u8868\u683c\u4e2d\u6570\u636e\u8fdb\u884c\u67e5\u8be2\uff0c \u5176\u4e2d\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b\u652f\u6301\u7684\u67e5\u8be2\u65b9\u5f0f\uff0c\u4ee5\u53ca\u67e5\u8be2\u8bed\u53e5\u4e66\u5199\u89c4\u8303\u6709\u4e9b\u8bb8\u5dee\u5f02\uff0c\u4ee5\u4e0b\u8fdb\u884c\u8be6\u7ec6\u8bf4\u660e","title":"Query-Sentence"},{"location":"javascript/query-sentences/#_1","text":"\u5927\u5c0f\u6bd4\u8f83: >\uff0c >=\uff0c =\uff0c \\<\uff0c \\<= \u76f8\u5f02\u6bd4\u8f83: =\uff0c \\<> \u6570\u5b66\u8fd0\u7b97: +, -, *, /, ^, %","title":"\u64cd\u4f5c\u7b26\u8bf4\u660e"},{"location":"javascript/query-sentences/#_2","text":"\u4ee5 queryset = base.filter(\"Table1\", \"age>18\") \u4e2d\u7684\u8bed\u53e5\u4e3a\u4f8b\uff1a age: \u5217\u540d\uff0c\u4ee5\u4e0b\u7528 column_name \u4ee3\u66ff > : \u64cd\u4f5c\u7b26 18: \u67e5\u8be2\u53c2\u6570 \u6570\u636e\u7ed3\u6784 \u5217\u7c7b\u578b \u5927\u5c0f\u6bd4\u8f83\u53c2\u6570\u89c4\u8303 \u76f8\u5f02\u6bd4\u8f83\u53c2\u6570\u89c4\u8303 \u6570\u5b66\u8fd0\u7b97 \u5b57\u7b26\u4e32 \u6587\u672c, \u957f\u6587\u672c, URL, \u90ae\u7bb1, \u5355\u9009 \u4e0d\u652f\u6301 \u5b57\u7b26\u4e32, \u7a7a\u503c \"\" \u4e0d\u652f\u6301 \u5217\u8868 \u591a\u9009 \u4e0d\u652f\u6301 \u5b57\u7b26\u4e32 \u4e0d\u652f\u6301 \u6570\u5b57 \u6570\u5b57 \u63a5\u53d7\u6574\u6570\uff0c\u5c0f\u6570 \u63a5\u53d7\u6574\u6570\uff0c\u5c0f\u6570\uff0c\u7a7a\u503c\u201c\u201d \u652f\u6301 \u65e5\u671f \u65e5\u671f, \u521b\u5efa\u65f6\u95f4, \u4fee\u6539\u65f6\u95f4 \u63a5\u53d7\u65e5\u671f\u683c\u5f0f\u7684\u53c2\u6570\uff0c\u89c4\u5219\u5982\u4e0b\uff1a\u5e74-\u6708-\u65e5 \u5982 \"2020-1-30\", \u5e74-\u6708-\u65e5 \u65f6:\u5206 \u5982\"2020-1-30 5:28\", \u5e74-\u6708-\u65e5 \u65f6:\u5206:\u79d2 \u5982 \"2020-1-30 5:28:7\" \u540c\u5927\u5c0f\u6bd4\u8f83\u53c2\u6570\u89c4\u8303\u76f8\u540c\uff0c\u6b64\u5916\u63a5\u53d7\u7a7a\u503c\"\" \u4e0d\u652f\u6301 \u5e03\u5c14 \u52fe\u9009 \u4e0d\u652f\u6301 \u63a5\u53d7 True\uff0cFalse (\u4e0d\u533a\u5206\u5927\u5c0f\u5199)\uff0c \u7a7a\u503c \u4e0d\u652f\u6301","title":"\u6c47\u603b"},{"location":"javascript/query-sentences/#_3","text":"","title":"\u4e3e\u4f8b\u8bf4\u660e"},{"location":"javascript/query-sentences/#_4","text":"\u5305\u542b \u6587\u672c \uff0c \u957f\u6587\u672c \uff0c URL \uff0c \u90ae\u7bb1 \uff0c \u5355\u9009 \u7b49\u5217\u7c7b\u578b # 1. \u76f8\u5f02\u6bd4\u8f83 base . filter ( 'Table1' , 'view_name' , \"column_name=hello world\" ) base . filter ( 'Table1' , 'view_name' , \"column_name!=''\" )","title":"\u5b57\u7b26\u4e32\u6570\u636e\u7ed3\u6784\u5217"},{"location":"javascript/query-sentences/#_5","text":"\u5305\u542b \u591a\u9009 \u7b49\u5217\u7c7b\u578b // \u76f8\u5f02\u6bd4\u8f83 base . filter ( 'Table1' , 'view_name' , \"column_name=\u5317\u4eac and column_name=\u4e0a\u6d77\" ) # \u540c\u65f6\u5305\u542b \u201c \u5317\u4eac \u201d \u548c \u201c \u4e0a\u6d77 \u201d \u7684\u884c \uff0c and \u53ef\u4ee5\u66ff\u6362\u6210 or","title":"\u5217\u8868\u6570\u636e\u7ed3\u6784\u5217"},{"location":"javascript/query-sentences/#_6","text":"\u6570\u5b57\u7c7b\u578b\u6570\u636e\u7684\u6bd4\u8f83 // 1. \u5927\u5c0f\u6bd4\u8f83 base . filter ( 'Table1' , 'view_name' , \"column_name>18\" ) base . filter ( 'Table1' , 'view_name' , \"column_name>-10 and column_name<=0\" ) // 2. \u76f8\u5f02\u6bd4\u8f83 base . filter ( 'Table1' , 'view_name' , \"column_name<>20\" ) base . filter ( 'Table1' , 'view_name' , \"column_name=0\" ) base . filter ( 'Table1' , 'view_name' , \"column_name=''\" ) \u6570\u5b66\u8fd0\u7b97 base . filter ( 'Table1' , 'view_name' , \"column_name+3>18\" ) base . filter ( 'Table1' , 'view_name' , \"column_name*2=18\" ) base . filter ( 'Table1' , 'view_name' , \"column_name-2=18\" ) base . filter ( 'Table1' , 'view_name' , \"column_name/2=18\" ) base . filter ( 'Table1' , 'view_name' , \"column_name^2=18\" ) base . filter ( 'Table1' , 'view_name' , \"column_name%2=1\" )","title":"\u6570\u5b57\u6570\u636e\u7ed3\u6784\u5217"},{"location":"javascript/query-sentences/#_7","text":"\u5305\u62ec \u65e5\u671f \uff0c \u521b\u5efa\u65f6\u95f4 \uff0c \u4fee\u6539\u65f6\u95f4 \u7b49, # 1. \u5927\u5c0f\u6bd4\u8f83 base . filter ( 'Table1' , 'view_name' , \"column_name>'2020-1-30'\" ) base . filter ( 'Table1' , \"column_name>='2019-1-1 5:30' and column_name<='2019-5-1 6:00'\" ) # 2. \u76f8\u5f02\u6bd4\u8f83 base . filter ( 'Table1' , 'view_name' , \"column_name='2020-1-1 10:59:59'\" ) base . filter ( 'Table1' , 'view_name' , \"column_name!=''\" ) \u6ce8\u610f: \u65e5\u671f\u6bd4\u8f83\u9700\u8981\u628a\u67e5\u8be2\u7684\u65e5\u671f\u52a0\u4e0a\u5f15\u53f7","title":"\u65e5\u671f\u6570\u636e\u7ed3\u6784\u5217"},{"location":"javascript/query-sentences/#_8","text":"\u52fe\u9009 \u7c7b\u578b // \u76f8\u5f02\u6bd4\u8f83 base . filter ( 'Table1' , 'view_name' , 'column_name=False' ) # \u540c base . filter ( 'Table1' , 'view_name' , \"column_name=''\" ) base . filter ( 'Table1' , 'view_name' , \"column_name=True\" )","title":"\u5e03\u5c14\u6570\u636e\u7ed3\u6784\u5217"},{"location":"javascript/queryset/","text":"QuerySet \u5bf9\u8c61 \u00b6 base.filter \u51fd\u6570\u7684\u8fd4\u56de\u503c, \u8be5\u5bf9\u8c61\u63d0\u4f9b\u4e86\u4e00\u4e9b\u65b9\u6cd5\u53ef\u4ee5\u7b80\u5316\u5bf9\u8bb0\u5f55\u7684\u64cd\u4f5c querySet.all \u00b6 \u4ee5\u4e00\u4e2a\u5217\u8868\u7684\u5f62\u5f0f\u8fd4\u56de\u6240\u6709\u8fc7\u6ee4\u5f97\u5230\u7684\u6570\u636e \u4f8b\u5b50 \u00b6 const list = querySet . all (); querySet.count \u00b6 \u8fd4\u56de\u8fc7\u6ee4\u5f97\u5230\u7684\u884c\u7684\u6570\u91cf \u4f8b\u5b50 \u00b6 const count = querySet . count (); querySet.last \u00b6 \u8fd4\u56de\u6700\u540e\u4e00\u6761\u8fc7\u6ee4\u5f97\u5230\u7684\u6570\u636e \u4f8b\u5b50 \u00b6 const row = querySet . last (); querySet.first \u00b6 \u8fd4\u56de\u7b2c\u4e00\u6761\u8fc7\u6ee4\u5f97\u5230\u7684\u6570\u636e \u4f8b\u5b50 \u00b6 const row = querySet . first (); querySet.delete \u00b6 \u5220\u9664\u6240\u6709\u8fc7\u6ee4\u5f97\u5230\u7684\u884c, \u5e76\u8fd4\u56de\u6210\u529f\u5220\u9664\u7684\u6570\u91cf \u4f8b\u5b50 \u00b6 const count = querySet . delete (); querySet.update \u00b6 \u4fee\u6539\u884c\u6570\u636e, \u5e76\u8fd4\u56de\u66f4\u65b0\u540e\u7684\u6570\u636e \u4f8b\u5b50 \u00b6 // \u5c06\u8fc7\u6ee4\u5f97\u5230\u7684\u6240\u6709\u7684\u884c\u7684 Name \u5217\u7684\u5185\u5bb9\u4fee\u6539\u4e3a xxxx const rows = querySet . update ({ Name : 'xxxx' }); querySet.filter \u00b6 \u8fdb\u4e00\u6b65\u8fdb\u884c\u8fc7\u6ee4, \u8fd4\u56de\u4e00\u4e2a querySet \u5bf9\u8c61 \u4f8b\u5b50 \u00b6 // \u8fc7\u6ee4\u51fa querySet \u4e2d Name \u5217\u7684\u503c\u4e3a\u674e\u660e\u7684\u884c const querySet1 = querySet . filter ( 'Name = \"\u674e\u660e\"' ); querySet.get \u00b6 \u83b7\u53d6 querySet \u4e2d\u7684\u6ee1\u8db3\u6761\u4ef6\u7684\u7b2c\u4e00\u6761\u6570\u636e, \u8fd4\u56de\u4e00\u4e2a row \u4f8b\u5b50 \u00b6 // \u83b7\u53d6 querySet \u4e2d Name \u5217\u7684\u503c\u4e3a\u674e\u660e\u7684\u7b2c\u4e00\u6761\u6570\u636e const row = querySet . get ( 'Name = \"\u674e\u660e\"' );","title":"Queryset"},{"location":"javascript/queryset/#queryset","text":"base.filter \u51fd\u6570\u7684\u8fd4\u56de\u503c, \u8be5\u5bf9\u8c61\u63d0\u4f9b\u4e86\u4e00\u4e9b\u65b9\u6cd5\u53ef\u4ee5\u7b80\u5316\u5bf9\u8bb0\u5f55\u7684\u64cd\u4f5c","title":"QuerySet \u5bf9\u8c61"},{"location":"javascript/queryset/#querysetall","text":"\u4ee5\u4e00\u4e2a\u5217\u8868\u7684\u5f62\u5f0f\u8fd4\u56de\u6240\u6709\u8fc7\u6ee4\u5f97\u5230\u7684\u6570\u636e","title":"querySet.all"},{"location":"javascript/queryset/#querysetcount","text":"\u8fd4\u56de\u8fc7\u6ee4\u5f97\u5230\u7684\u884c\u7684\u6570\u91cf","title":"querySet.count"},{"location":"javascript/queryset/#querysetlast","text":"\u8fd4\u56de\u6700\u540e\u4e00\u6761\u8fc7\u6ee4\u5f97\u5230\u7684\u6570\u636e","title":"querySet.last"},{"location":"javascript/queryset/#querysetfirst","text":"\u8fd4\u56de\u7b2c\u4e00\u6761\u8fc7\u6ee4\u5f97\u5230\u7684\u6570\u636e","title":"querySet.first"},{"location":"javascript/queryset/#querysetdelete","text":"\u5220\u9664\u6240\u6709\u8fc7\u6ee4\u5f97\u5230\u7684\u884c, \u5e76\u8fd4\u56de\u6210\u529f\u5220\u9664\u7684\u6570\u91cf","title":"querySet.delete"},{"location":"javascript/queryset/#querysetupdate","text":"\u4fee\u6539\u884c\u6570\u636e, \u5e76\u8fd4\u56de\u66f4\u65b0\u540e\u7684\u6570\u636e","title":"querySet.update"},{"location":"javascript/queryset/#querysetfilter","text":"\u8fdb\u4e00\u6b65\u8fdb\u884c\u8fc7\u6ee4, \u8fd4\u56de\u4e00\u4e2a querySet \u5bf9\u8c61","title":"querySet.filter"},{"location":"javascript/queryset/#querysetget","text":"\u83b7\u53d6 querySet \u4e2d\u7684\u6ee1\u8db3\u6761\u4ef6\u7684\u7b2c\u4e00\u6761\u6570\u636e, \u8fd4\u56de\u4e00\u4e2a row","title":"querySet.get"},{"location":"javascript/utils/","text":"Utility \u65b9\u6cd5 \u00b6 Utility \u65b9\u6cd5\u53ef\u4ee5\u5e2e\u52a9\u4f60\u5904\u7406 SeaTable \u4e2d\u7684\u6570\u636e. formatDate \u00b6 \u683c\u5f0f\u5316\u65e5\u671f, \u8fd4\u56de\u4e00\u4e2a \u2018YYYY-MM-DD\u2019 \u683c\u5f0f\u7684\u65e5\u671f \u4f8b\u5b50 \u00b6 let date = new Date (); let formatDate = base . utils . formatDate ( date ); output . text ( formatDate ); // 2020-08-20 formatDateWithMinutes \u00b6 \u683c\u5f0f\u5316\u65e5\u671f, \u8fd4\u56de\u4e00\u4e2a \u2018YYYY-MM-DD HH:mm\u2019 \u683c\u5f0f\u7684\u65e5\u671f \u4f8b\u5b50 \u00b6 let date = new Date (); let formatDate = base . utils . formatDateWithMinutes ( date ); output . text ( formatDate ); // 2020-08-20 14:00 lookupAndCopy \u00b6 base . utils . lookupAndCopy ( targetTable , targetColumn , targetColumnToCompare , sourceTableName , sourceColumnName , sourceColumnToCompare = null ); \u7c7b\u4f3c Excel \u4e2d vlookup \u51fd\u6570\u3002\u4e3a\u76ee\u6807\u8868\u683c\u7684\u6bcf\u4e00\u884c\u5728\u6e90\u8868\u683c\u4e2d\u67e5\u627e\u5339\u914d\u7684\u884c\uff0c\u7136\u540e\u628a\u5339\u914d\u884c\u7684\u6307\u5b9a\u5355\u5143\u683c\u7684\u6570\u636e\u62f7\u8d1d\u5230\u76ee\u6807\u884c\u6307\u5b9a\u7684\u5355\u5143\u683c\u4e2d\u3002 \u6bd4\u5982\u6211\u4eec\u6709\u4e00\u4e2a\u6e90\u8868\u683c\u5305\u542b\u4e86\u7528\u6237\u540d\u548c\u90ae\u4ef6\u5730\u5740\u7684\u5bf9\u5e94\u5173\u7cfb: Name Email xxx xxxx yyy yyyy \u76ee\u6807\u8868\u683c\u53ea\u6709\u7528\u6237\u540d Name Email xxx yyy \u6211\u4eec\u9700\u8981\u628a\u6e90\u8868\u683c\u4e2d\u7684 Email \u4fe1\u606f\u62f7\u8d1d\u5230\u76ee\u6807\u8868\u683c\u4e2d\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u7528\u8fd9\u4e2a\u51fd\u6570\u3002 \u4f8b\u5b50 \u00b6 // \u5339\u914d\u51fa Table1 \u548c Table2 \u4e2d Name \u5217\u7684\u5185\u5bb9\u76f8\u540c\u7684\u884c, \u5c06 Table1 \u4e2d\u7684\u884c\u7684 Email \u5217\u7684\u5185\u5bb9\u62f7\u8d1d\u5230 Table2 \u4e2d\u5bf9\u5e94\u884c\u7684 Email \u5217 base . utils . lookupAndCopy ( 'Table2' , 'Email' , 'Name' , 'Table1' , 'Name' ); // \u5339\u914d\u51fa Table1 \u4e2d Name \u5217\u548c Table2 \u4e2d Name1 \u5217\u7684\u5185\u5bb9\u76f8\u540c\u7684\u884c, \u5c06 Table1 \u4e2d\u7684\u884c\u7684 Email \u5217\u7684\u5185\u5bb9\u62f7\u8d1d\u5230 Table2 \u4e2d\u5bf9\u5e94\u884c\u7684 Email1 \u5217 base . utils . lookupAndCopy ( 'Table2' , 'Email1' , 'Name1' , 'Table1' , 'Email' , 'Name' ); query \u00b6 \u901a\u8fc7\u7c7b sql \u8bed\u53e5\u7684\u65b9\u5f0f\u5bf9\u8868\u683c\u6570\u636e\u8fdb\u884c\u7b5b\u9009\u5e76\u5f52\u603b \u4f8b\u5b50 \u00b6 // \u8fc7\u6ee4\u51fa number, number1, number2 \u8fd9\u4e09\u5217\u7684\u548c\u5927\u4e8e5\u7684\u884c, \u5e76\u5bf9\u8fd9\u4e9b\u884c\u4e2d\u7684 number, number2 \u5217\u5206\u522b\u6c42\u548c, \u8fd4\u56de\u7ed3\u679c {number: 12, number2: 23} base . utils . query ( 'Table1' , 'View_name' , 'select sum(number), sum(number2) where number + number1 + number2 > 5' );","title":"Utils"},{"location":"javascript/utils/#utility","text":"Utility \u65b9\u6cd5\u53ef\u4ee5\u5e2e\u52a9\u4f60\u5904\u7406 SeaTable \u4e2d\u7684\u6570\u636e.","title":"Utility \u65b9\u6cd5"},{"location":"javascript/utils/#formatdate","text":"\u683c\u5f0f\u5316\u65e5\u671f, \u8fd4\u56de\u4e00\u4e2a \u2018YYYY-MM-DD\u2019 \u683c\u5f0f\u7684\u65e5\u671f","title":"formatDate"},{"location":"javascript/utils/#formatdatewithminutes","text":"\u683c\u5f0f\u5316\u65e5\u671f, \u8fd4\u56de\u4e00\u4e2a \u2018YYYY-MM-DD HH:mm\u2019 \u683c\u5f0f\u7684\u65e5\u671f","title":"formatDateWithMinutes"},{"location":"javascript/utils/#lookupandcopy","text":"base . utils . lookupAndCopy ( targetTable , targetColumn , targetColumnToCompare , sourceTableName , sourceColumnName , sourceColumnToCompare = null ); \u7c7b\u4f3c Excel \u4e2d vlookup \u51fd\u6570\u3002\u4e3a\u76ee\u6807\u8868\u683c\u7684\u6bcf\u4e00\u884c\u5728\u6e90\u8868\u683c\u4e2d\u67e5\u627e\u5339\u914d\u7684\u884c\uff0c\u7136\u540e\u628a\u5339\u914d\u884c\u7684\u6307\u5b9a\u5355\u5143\u683c\u7684\u6570\u636e\u62f7\u8d1d\u5230\u76ee\u6807\u884c\u6307\u5b9a\u7684\u5355\u5143\u683c\u4e2d\u3002 \u6bd4\u5982\u6211\u4eec\u6709\u4e00\u4e2a\u6e90\u8868\u683c\u5305\u542b\u4e86\u7528\u6237\u540d\u548c\u90ae\u4ef6\u5730\u5740\u7684\u5bf9\u5e94\u5173\u7cfb: Name Email xxx xxxx yyy yyyy \u76ee\u6807\u8868\u683c\u53ea\u6709\u7528\u6237\u540d Name Email xxx yyy \u6211\u4eec\u9700\u8981\u628a\u6e90\u8868\u683c\u4e2d\u7684 Email \u4fe1\u606f\u62f7\u8d1d\u5230\u76ee\u6807\u8868\u683c\u4e2d\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u7528\u8fd9\u4e2a\u51fd\u6570\u3002","title":"lookupAndCopy"},{"location":"javascript/utils/#query","text":"\u901a\u8fc7\u7c7b sql \u8bed\u53e5\u7684\u65b9\u5f0f\u5bf9\u8868\u683c\u6570\u636e\u8fdb\u884c\u7b5b\u9009\u5e76\u5f52\u603b","title":"query"},{"location":"javascript/utils/#_4","text":"// \u8fc7\u6ee4\u51fa number, number1, number2 \u8fd9\u4e09\u5217\u7684\u548c\u5927\u4e8e5\u7684\u884c, \u5e76\u5bf9\u8fd9\u4e9b\u884c\u4e2d\u7684 number, number2 \u5217\u5206\u522b\u6c42\u548c, \u8fd4\u56de\u7ed3\u679c {number: 12, number2: 23} base . utils . query ( 'Table1' , 'View_name' , 'select sum(number), sum(number2) where number + number1 + number2 > 5' );","title":"\u4f8b\u5b50"},{"location":"javascript-api/","text":"JavaScript API \u00b6 JavaScript API \u662f\u5bf9 SeaTable \u670d\u52a1\u5668 Restful API \u7684\u5c01\u88c5\u3002\u4f60\u53ef\u4ee5\u5728\u4f60\u7684\u524d\u7aef\u9875\u9762\u4e2d\u6216\u8005 Node.js \u7a0b\u5e8f\u4e2d\u8c03\u7528\u3002 \u6ce8\u610f: JavaScript API \u4e0d\u80fd\u7528\u4e8e SeaTable \u8868\u683c\u4e2d\u811a\u672c\u3002\u811a\u672c\u7f16\u7a0b\u8bf7\u53c2\u8003\u53e6\u5916\u7684\u6587\u6863\u3002 \u7f16\u7a0b\u53c2\u8003 \u00b6 SeaTable \u4e2d\u5bf9\u8c61\u7684\u6570\u636e\u7ed3\u6784: \u6570\u636e\u7ed3\u6784 SeaTable API \u5e93\u4ecb\u7ecd: Base Query Rows Links Columns Constants : \u4e00\u4e9b\u5e38\u91cf\u5b9a\u4e49 SeaTable API \u4f7f\u7528\u8bf4\u660e \u6388\u6743 api(base.auth()) \u662f\u4e00\u4e2a async \u51fd\u6570, \u9700\u8981\u5728 async \u51fd\u6570\u4e2d\u6267\u884c \u5176\u4ed6 api \u90fd\u8fd4\u56de\u4e00\u4e2apromise \u5bf9\u8c61 \u4f7f\u7528\u65b9\u6cd5\u6709\u4e24\u79cd \u7b2c\u4e00\u79cd : base . listViews ( tableName ). then ( views => { // \u4f7f\u7528 views \u5b8c\u6210\u9700\u6c42 }). catch ( error => { // \u5f02\u5e38\u5904\u7406 }) \u7b2c\u4e8c\u79cd : try { const views = await base . listViews ( tableName ); // \u4f7f\u7528 views \u5b8c\u6210\u9700\u6c42 } catch ( error ) { // \u5f02\u5e38\u5904\u7406 } Seatable API Errors 400 Params invalid 403 Permission denied 413 exceed limit 500 Internal Server Error","title":"\u5f15\u8a00"},{"location":"javascript-api/#javascript-api","text":"JavaScript API \u662f\u5bf9 SeaTable \u670d\u52a1\u5668 Restful API \u7684\u5c01\u88c5\u3002\u4f60\u53ef\u4ee5\u5728\u4f60\u7684\u524d\u7aef\u9875\u9762\u4e2d\u6216\u8005 Node.js \u7a0b\u5e8f\u4e2d\u8c03\u7528\u3002 \u6ce8\u610f: JavaScript API \u4e0d\u80fd\u7528\u4e8e SeaTable \u8868\u683c\u4e2d\u811a\u672c\u3002\u811a\u672c\u7f16\u7a0b\u8bf7\u53c2\u8003\u53e6\u5916\u7684\u6587\u6863\u3002","title":"JavaScript API"},{"location":"javascript-api/#_1","text":"SeaTable \u4e2d\u5bf9\u8c61\u7684\u6570\u636e\u7ed3\u6784: \u6570\u636e\u7ed3\u6784 SeaTable API \u5e93\u4ecb\u7ecd: Base Query Rows Links Columns Constants : \u4e00\u4e9b\u5e38\u91cf\u5b9a\u4e49 SeaTable API \u4f7f\u7528\u8bf4\u660e \u6388\u6743 api(base.auth()) \u662f\u4e00\u4e2a async \u51fd\u6570, \u9700\u8981\u5728 async \u51fd\u6570\u4e2d\u6267\u884c \u5176\u4ed6 api \u90fd\u8fd4\u56de\u4e00\u4e2apromise \u5bf9\u8c61 \u4f7f\u7528\u65b9\u6cd5\u6709\u4e24\u79cd \u7b2c\u4e00\u79cd : base . listViews ( tableName ). then ( views => { // \u4f7f\u7528 views \u5b8c\u6210\u9700\u6c42 }). catch ( error => { // \u5f02\u5e38\u5904\u7406 }) \u7b2c\u4e8c\u79cd : try { const views = await base . listViews ( tableName ); // \u4f7f\u7528 views \u5b8c\u6210\u9700\u6c42 } catch ( error ) { // \u5f02\u5e38\u5904\u7406 } Seatable API Errors 400 Params invalid 403 Permission denied 413 exceed limit 500 Internal Server Error","title":"\u7f16\u7a0b\u53c2\u8003"},{"location":"javascript-api/base/","text":"Base \u5bf9\u8c61 \u00b6 Base \u4ee3\u8868\u4e00\u4e2a\u8868\u683c\u3002\u4f60\u53ef\u4ee5\u7528\u8868\u683c\u7684 api token \u83b7\u53d6\u8bfb\u5199 base \u7684\u6388\u6743, \u8fd9\u4e2a token \u53ef\u4ee5\u5728\u7f51\u9875\u7aef\u76f4\u63a5\u751f\u6210\u3002 \u83b7\u53d6\u6388\u6743 \u00b6 \u4f7f\u7528\u8868\u683c\u7684 API Token \u6765\u83b7\u53d6\u4e00\u4e2a base \u7684\u8bbf\u95ee\u6388\u6743\u3002 \u4f8b\u5b50 \u00b6 import { Base } from 'seatable-api' ; const config = { server : 'https://cloud.seatable.cn' , APIToken : 'c3c75dca2c369849455a39f4436147639cf02b2d' }; const base = new Base ( config ); await base . auth () Metadata \u00b6 Get metadata \u00b6 \u83b7\u53d6 base \u7684 metadata \u4fe1\u606f base . getMetadata (); \u4f8b\u5b50 \u00b6 const metadata = await base . getMetadata (); \u8fd4\u56de\u7ed3\u679c { 'tables' : [{ '_id' : '4krH' , 'name' : '\u8054\u7cfb\u4eba' , 'is_header_locked' : False , 'columns' : [{ 'key' : '0000' , 'type' : 'text' , 'name' : '\u540d\u79f0' , 'editable' : True , 'width' : 200 , 'resizable' : True , 'draggable' : True , 'data' : None , 'permission_type' : '' , 'permitted_users' : [] }, { 'key' : 'M31F' , 'type' : 'text' , 'name' : '\u90ae\u7bb1' , 'editable' : True , 'width' : 200 , 'resizable' : True , 'draggable' : True , 'data' : None , 'permission_type' : '' , 'permitted_users' : [] }], 'views' : [{ '_id' : '0000' , 'name' : '\u9ed8\u8ba4\u89c6\u56fe' , 'type' : 'table' , 'is_locked' : False , 'filter_conjunction' : 'And' , 'filters' : [], 'sorts' : [], 'groupbys' : [], 'group_rows' : [], 'groups' : [], 'colorbys' : {}, 'hidden_columns' : [], 'rows' : [], 'formula_rows' : {}, 'link_rows' : {}, 'summaries' : {}, 'colors' : {} }] }] } Table \u00b6 add table \u00b6 \u5728 base \u4e2d\u6dfb\u52a0\u5b50\u8868 base . addTable ( table_name , lang = 'en' ) \u5176\u4e2d table_name: \u9700\u8981\u6dfb\u52a0\u7684\u5b50\u8868\u540d\u79f0 lang\uff1a\u8bed\u8a00\uff0c \u9ed8\u8ba4 en \uff0c \u76ee\u524d\u652f\u6301\u82f1\u6587 ( en )\u548c\u4e2d\u6587 ( zh-cn ) \u4f8b\u5b50 \u00b6 await base . addTable ( '\u9879\u76ee\u8c03\u67e5\u8868' , lang = 'zh-cn' ) \u00b6 Base \u4e0a\u7684\u64cd\u4f5c \u00b6 Base \u5bf9\u8c61\u63d0\u4f9b\u4e86\u64cd\u4f5c\u884c\u548c\u5217\u7684\u63a5\u53e3\uff0c\u8bf7\u53c2\u8003\u6587\u6863 Rows Links Columns Query with SQL","title":"Base"},{"location":"javascript-api/base/#base","text":"Base \u4ee3\u8868\u4e00\u4e2a\u8868\u683c\u3002\u4f60\u53ef\u4ee5\u7528\u8868\u683c\u7684 api token \u83b7\u53d6\u8bfb\u5199 base \u7684\u6388\u6743, \u8fd9\u4e2a token \u53ef\u4ee5\u5728\u7f51\u9875\u7aef\u76f4\u63a5\u751f\u6210\u3002","title":"Base \u5bf9\u8c61"},{"location":"javascript-api/base/#_1","text":"\u4f7f\u7528\u8868\u683c\u7684 API Token \u6765\u83b7\u53d6\u4e00\u4e2a base \u7684\u8bbf\u95ee\u6388\u6743\u3002","title":"\u83b7\u53d6\u6388\u6743"},{"location":"javascript-api/base/#metadata","text":"","title":"Metadata"},{"location":"javascript-api/base/#get-metadata","text":"\u83b7\u53d6 base \u7684 metadata \u4fe1\u606f base . getMetadata ();","title":"Get metadata"},{"location":"javascript-api/base/#table","text":"","title":"Table"},{"location":"javascript-api/base/#add-table","text":"\u5728 base \u4e2d\u6dfb\u52a0\u5b50\u8868 base . addTable ( table_name , lang = 'en' ) \u5176\u4e2d table_name: \u9700\u8981\u6dfb\u52a0\u7684\u5b50\u8868\u540d\u79f0 lang\uff1a\u8bed\u8a00\uff0c \u9ed8\u8ba4 en \uff0c \u76ee\u524d\u652f\u6301\u82f1\u6587 ( en )\u548c\u4e2d\u6587 ( zh-cn )","title":"add table"},{"location":"javascript-api/base/#_5","text":"","title":""},{"location":"javascript-api/base/#base_1","text":"Base \u5bf9\u8c61\u63d0\u4f9b\u4e86\u64cd\u4f5c\u884c\u548c\u5217\u7684\u63a5\u53e3\uff0c\u8bf7\u53c2\u8003\u6587\u6863 Rows Links Columns Query with SQL","title":"Base \u4e0a\u7684\u64cd\u4f5c"},{"location":"javascript-api/columns/","text":"Column \u00b6 List columns \u00b6 \u5217\u51fa\u8868/\u89c6\u56fe\u6240\u6709\u884c base . listColumns ( table_name , view_name = '' ) \u4f8b\u5b50 \u00b6 const columns1 = await base . listColumns ( 'Table1' ) const columns2 = await base . listColumns ( 'Table1' , view_name = 'default' ) Insert column \u00b6 \u63d2\u5165/\u8ffd\u52a0\u5217 base . insertColumn ( table_name , column_name , column_type , column_key = '' , column_data = '' ) \u5176\u4e2d column_key\uff1a\u8981\u63d2\u5165\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u5217\u7684 key\uff0c\u5982\u82e5\u7701\u7565\u5219\u9ed8\u8ba4\u8ffd\u52a0\u4e3a\u6700\u540e\u4e00\u5217 column_type\uff1a\u8bf7\u53c2\u8003 constants column_data: \u4e00\u4e2a\u5217\u7684 config \u4fe1\u606f\uff0c\u521b\u5efa\u94fe\u63a5\u5217\u65f6\u9700\u8981\u6307\u5b9a\uff0c \u5176\u4ed6\u7c7b\u578b\u9009\u62e9\u6027\u5236\u5b9a \u4f8b\u5b50 \u00b6 import { ColumnTypes } from 'seatable-api' ; await base . insertColumn ( 'Table1' , 'seatable-api' , ColumnTypes . TEXT ) await base . insertColumn ( 'Table1' , 'seatable-api' , ColumnTypes . TEXT , '0000' ) await base . insertColumn ( 'Table1' , 'Link1' , ColumnTypes . LINK , column_data = { 'table' : 'Table1' , 'other_table' : 'Test_User' }) Rename column \u00b6 \u91cd\u547d\u540d\u5217 base . renameColumn ( table_name , column_key , new_column_name ) \u4f8b\u5b50 \u00b6 await base . renameColumn ( 'Table1' , 'kSiR' , 'new-seatable-api' ) Resize column \u00b6 \u8bbe\u7f6e\u5217\u5bbd base . resizeColumn ( table_name , column_key , new_column_width ) \u4f8b\u5b50 \u00b6 \u5217\u7684\u9ed8\u8ba4\u5bbd\u5ea6\u4e3a200\uff0c\u5982\u679c\u9700\u8981\u8c03\u6574\u5217\u5bbd\u6bd4\u5982\u8c03\u6574\u4e3a500\uff0c\u5219 await base . resizeColumn ( 'Table1' , 'asFV' , 500 ) Freeze column \u00b6 \u51bb\u7ed3\u5217 base . freezeColumn ( table_name , column_key , frozen ) frozen: true/false \u4f8b\u5b50 \u00b6 await base . freezeColumn ( 'Table1' , '0000' , true ) Move column \u00b6 base . moveColumn ( table_name , column_key , target_column_key ) \u5176\u4e2d column_key\uff1a\u8981\u79fb\u52a8\u7684\u5217\u7684 key target_column_key\uff1a \u951a\u5b9a\u5217\u7684 key\uff0c\u88ab\u79fb\u52a8\u7684\u5217\u5c06\u4f1a\u88ab\u79fb\u52a8\u5230\u8be5\u5217\u53f3\u8fb9 \u4f8b\u5b50 \u00b6 await base . moveColumn ( 'Table1' , 'loPx' , '0000' ) \u6b64\u4f8b\u4e2d\uff0c loPx \u5217\u5c06\u4f1a\u88ab\u79fb\u52a8\u5230 0000 \u5217\u7684\u53f3\u8fb9 Modify column type \u00b6 \u8f6c\u6362\u5217\u7c7b\u578b base . modifyColumnType ( table_name , column_key , new_column_type ) \u5176\u4e2d column_type\uff1a\u8bf7\u53c2\u8003 constants \u4f8b\u5b50 \u00b6 import { ColumnTypes } from 'seatable-api' ; await base . modifyColumnType ( 'Table1' , 'nePI' , ColumnTypes . NUMBER ) Add column options \u00b6 \u5355\u9009\uff0c\u591a\u9009\u5217\u4e13\u7528\uff0c\u6dfb\u52a0\u9009\u9879 base . addColumnOptions ( table_name , column , options ) \u4f8b\u5b50 \u00b6 await base . addColumnOptions ( 'Table1' , 'My choices' , [ { \"name\" : \"ddd\" , \"color\" : \"#aaa\" , \"textColor\" : \"#000000\" }, { \"name\" : \"eee\" , \"color\" : \"#aaa\" , \"textColor\" : \"#000000\" }, { \"name\" : \"fff\" , \"color\" : \"#aaa\" , \"textColor\" : \"#000000\" }, ]) Add column cascade settings \u00b6 \u5355\u9009\u5217\u4e13\u7528\uff0c\u6dfb\u52a0\u5355\u9009\u9009\u9879\u7684\u7236\u5b50\u53ca\u8054\u5173\u7cfb\uff0c\u8fbe\u5230\u5b50\u5217\u7684\u5355\u9009\u9009\u9879\u6761\u76ee\u6839\u636e\u7236\u5217\u7684\u9009\u9879\u800c\u5b9a\u7684\u6548\u679c base . addColumnCascadeSettings ( table_name , child_column , parent_column , cascade_settings ) \u5176\u4e2d child_column: \u5355\u9009\u5b50\u5217\u7684\u540d\u79f0 parent_column: \u5355\u9009\u7236\u5217\u7684\u540d\u79f0 cascade_settings: \u53ca\u8054\u5173\u7cfb\u8bbe\u7f6e\u6570\u636e \u4f8b\u5b50 \u00b6 await base . addColumnCascadeSettings ( \"Table1\" , \"single-op-col-c\" , \"single-op-col\" , { \"aaa\" : [ \"aaa-1\" , \"aaa-2\" ], # \u5982\u679c\u7236\u5217\u9009\u62e9 \u201c aaa \u201d\uff0c \u5b50\u5217\u53ea\u6709 \u201c aaa - 1 \u201d \u548c \u201c aaa - 2 \u201d \u53ef\u9009 \"bbb\" : [ \"bbb-1\" , \"bbb-2\" ], \"ccc\" : [ \"ccc-1\" , \"ccc-2\" ] }) Delete column \u00b6 \u5220\u9664\u5217 base . deleteColumn ( table_name , column_key ) \u4f8b\u5b50 \u00b6 await base . deleteColumn ( 'Table1' , 'bsKL' )","title":"Columns"},{"location":"javascript-api/columns/#column","text":"","title":"Column"},{"location":"javascript-api/columns/#list-columns","text":"\u5217\u51fa\u8868/\u89c6\u56fe\u6240\u6709\u884c base . listColumns ( table_name , view_name = '' )","title":"List columns"},{"location":"javascript-api/columns/#insert-column","text":"\u63d2\u5165/\u8ffd\u52a0\u5217 base . insertColumn ( table_name , column_name , column_type , column_key = '' , column_data = '' ) \u5176\u4e2d column_key\uff1a\u8981\u63d2\u5165\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u5217\u7684 key\uff0c\u5982\u82e5\u7701\u7565\u5219\u9ed8\u8ba4\u8ffd\u52a0\u4e3a\u6700\u540e\u4e00\u5217 column_type\uff1a\u8bf7\u53c2\u8003 constants column_data: \u4e00\u4e2a\u5217\u7684 config \u4fe1\u606f\uff0c\u521b\u5efa\u94fe\u63a5\u5217\u65f6\u9700\u8981\u6307\u5b9a\uff0c \u5176\u4ed6\u7c7b\u578b\u9009\u62e9\u6027\u5236\u5b9a","title":"Insert column"},{"location":"javascript-api/columns/#rename-column","text":"\u91cd\u547d\u540d\u5217 base . renameColumn ( table_name , column_key , new_column_name )","title":"Rename column"},{"location":"javascript-api/columns/#resize-column","text":"\u8bbe\u7f6e\u5217\u5bbd base . resizeColumn ( table_name , column_key , new_column_width )","title":"Resize column"},{"location":"javascript-api/columns/#freeze-column","text":"\u51bb\u7ed3\u5217 base . freezeColumn ( table_name , column_key , frozen ) frozen: true/false","title":"Freeze column"},{"location":"javascript-api/columns/#move-column","text":"base . moveColumn ( table_name , column_key , target_column_key ) \u5176\u4e2d column_key\uff1a\u8981\u79fb\u52a8\u7684\u5217\u7684 key target_column_key\uff1a \u951a\u5b9a\u5217\u7684 key\uff0c\u88ab\u79fb\u52a8\u7684\u5217\u5c06\u4f1a\u88ab\u79fb\u52a8\u5230\u8be5\u5217\u53f3\u8fb9","title":"Move column"},{"location":"javascript-api/columns/#modify-column-type","text":"\u8f6c\u6362\u5217\u7c7b\u578b base . modifyColumnType ( table_name , column_key , new_column_type ) \u5176\u4e2d column_type\uff1a\u8bf7\u53c2\u8003 constants","title":"Modify column type"},{"location":"javascript-api/columns/#add-column-options","text":"\u5355\u9009\uff0c\u591a\u9009\u5217\u4e13\u7528\uff0c\u6dfb\u52a0\u9009\u9879 base . addColumnOptions ( table_name , column , options )","title":"Add column options"},{"location":"javascript-api/columns/#add-column-cascade-settings","text":"\u5355\u9009\u5217\u4e13\u7528\uff0c\u6dfb\u52a0\u5355\u9009\u9009\u9879\u7684\u7236\u5b50\u53ca\u8054\u5173\u7cfb\uff0c\u8fbe\u5230\u5b50\u5217\u7684\u5355\u9009\u9009\u9879\u6761\u76ee\u6839\u636e\u7236\u5217\u7684\u9009\u9879\u800c\u5b9a\u7684\u6548\u679c base . addColumnCascadeSettings ( table_name , child_column , parent_column , cascade_settings ) \u5176\u4e2d child_column: \u5355\u9009\u5b50\u5217\u7684\u540d\u79f0 parent_column: \u5355\u9009\u7236\u5217\u7684\u540d\u79f0 cascade_settings: \u53ca\u8054\u5173\u7cfb\u8bbe\u7f6e\u6570\u636e","title":"Add column cascade settings"},{"location":"javascript-api/columns/#delete-column","text":"\u5220\u9664\u5217 base . deleteColumn ( table_name , column_key )","title":"Delete column"},{"location":"javascript-api/constants/","text":"Constants \u00b6 \u5728\u811a\u672c\u4e2d\u53ef\u80fd\u4f1a\u6709\u4e00\u4e9b\u5e38\u91cf\u9700\u8981\u6211\u4eec\u4e86\u89e3\u4e0b ColumnTypes \u00b6 \u5217\u7c7b\u578b\uff0c\u5f53\u63d2\u5165/\u8ffd\u52a0\u5217\u3001\u66f4\u6539\u5217\u7c7b\u578b\u65f6\u7b49\u60c5\u51b5\u9700\u8981\u4f7f\u7528\u5230 import { ColumnTypes } from 'seatable-api' ; ColumnTypes . NUMBER # \u6570\u5b57 ColumnTypes . TEXT # \u6587\u672c ColumnTypes . LONG_TEXT # \u957f\u6587\u672c ColumnTypes . CHECKBOX # \u52fe\u9009 ColumnTypes . DATE # \u65e5\u671f\u65f6\u95f4 ColumnTypes . SINGLE_SELECT # \u5355\u9009 ColumnTypes . MULTIPLE_SELECT # \u591a\u9009 ColumnTypes . IMAGE # \u56fe\u7247 ColumnTypes . FILE # \u6587\u4ef6 ColumnTypes . COLLABORATOR # \u534f\u4f5c\u4eba ColumnTypes . LINK # \u94fe\u63a5\u5176\u4ed6\u8bb0\u5f55 ColumnTypes . FORMULA # \u516c\u5f0f ColumnTypes . CREATOR # \u521b\u5efa\u8005 ColumnTypes . CTIME # \u521b\u5efa\u65f6\u95f4 ColumnTypes . LAST_MODIFIER # \u4fee\u6539\u8005 ColumnTypes . MTIME # \u4fee\u6539\u65f6\u95f4 ColumnTypes . GEOLOCATION # \u5730\u5740 ColumnTypes . AUTO_NUMBER # \u81ea\u52a8\u5e8f\u53f7 ColumnTypes . URL # \u94fe\u63a5","title":"Constants"},{"location":"javascript-api/constants/#constants","text":"\u5728\u811a\u672c\u4e2d\u53ef\u80fd\u4f1a\u6709\u4e00\u4e9b\u5e38\u91cf\u9700\u8981\u6211\u4eec\u4e86\u89e3\u4e0b","title":"Constants"},{"location":"javascript-api/constants/#columntypes","text":"\u5217\u7c7b\u578b\uff0c\u5f53\u63d2\u5165/\u8ffd\u52a0\u5217\u3001\u66f4\u6539\u5217\u7c7b\u578b\u65f6\u7b49\u60c5\u51b5\u9700\u8981\u4f7f\u7528\u5230 import { ColumnTypes } from 'seatable-api' ; ColumnTypes . NUMBER # \u6570\u5b57 ColumnTypes . TEXT # \u6587\u672c ColumnTypes . LONG_TEXT # \u957f\u6587\u672c ColumnTypes . CHECKBOX # \u52fe\u9009 ColumnTypes . DATE # \u65e5\u671f\u65f6\u95f4 ColumnTypes . SINGLE_SELECT # \u5355\u9009 ColumnTypes . MULTIPLE_SELECT # \u591a\u9009 ColumnTypes . IMAGE # \u56fe\u7247 ColumnTypes . FILE # \u6587\u4ef6 ColumnTypes . COLLABORATOR # \u534f\u4f5c\u4eba ColumnTypes . LINK # \u94fe\u63a5\u5176\u4ed6\u8bb0\u5f55 ColumnTypes . FORMULA # \u516c\u5f0f ColumnTypes . CREATOR # \u521b\u5efa\u8005 ColumnTypes . CTIME # \u521b\u5efa\u65f6\u95f4 ColumnTypes . LAST_MODIFIER # \u4fee\u6539\u8005 ColumnTypes . MTIME # \u4fee\u6539\u65f6\u95f4 ColumnTypes . GEOLOCATION # \u5730\u5740 ColumnTypes . AUTO_NUMBER # \u81ea\u52a8\u5e8f\u53f7 ColumnTypes . URL # \u94fe\u63a5","title":"ColumnTypes"},{"location":"javascript-api/links/","text":"Links \u00b6 Add link \u00b6 \u6dfb\u52a0\u94fe\u63a5\uff0c\u94fe\u63a5\u5176\u4ed6\u8868\u8bb0\u5f55 base . addLink ( link_id , table_name , other_table_name , row_id , other_row_id ) \u5176\u4e2d link_id: \u94fe\u63a5\u5217 data \u5c5e\u6027\u4e0b\u7684 link_id (\u4f60\u53ef\u4ee5\u83b7\u53d6 base \u7684 metadata\uff0c\u627e\u5230\u5bf9\u5e94\u7684\u5217\uff0c\u7136\u540e\u627e\u4e00\u4e0b data \u5b57\u6bb5\u4e0b\u7684 link_id \u5b57\u6bb5) table_name: \u94fe\u63a5\u8868\u7684\u540d\u5b57 other_table_name: \u88ab\u94fe\u63a5\u8868\u7684\u540d\u5b57 row_id: \u94fe\u63a5\u884c id other_row_id: \u88ab\u94fe\u63a5\u884c\u7684 id \u4f8b\u5b50 \u00b6 await base . addLink ( '5WeC' , 'real-img-files' , 'contact' , 'CGtoJB1oQM60RiKT-c5J-g' , 'PALm2wPKTCy-jdJNv_UWaQ' ) Update link \u00b6 \u66f4\u65b0\u94fe\u63a5\u4fe1\u606f base.updateLink(self, link_id, table_id, other_table_id, row_id, other_rows_ids) \u5176\u4e2d link_id: \u94fe\u63a5\u5217 data \u5c5e\u6027\u4e0b\u7684 link_id table_id: \u94fe\u63a5\u8868\u7684 id other_table_id: \u88ab\u94fe\u63a5\u8868\u7684 id row_id: \u94fe\u63a5\u884c id other_rows_ids: \u88ab\u94fe\u63a5\u884c\u7684 id \u5217\u8868 \u4f8b\u5b50 \u00b6 await base . updateLink ( link_id = 'r4IJ' , table_id = '0000' , other_table_id = 'kFoO' , row_id = 'BXhEm9ucTNu3FjupIk7Xug' , other_rows_ids = [ 'exkb56fAT66j8R0w6wD9Qg' , 'DjHjwmlRRB6WgU9uPnrWeA' ] ) Batch update links \u00b6 \u6279\u91cf\u66f4\u65b0\u94fe\u63a5\u4fe1\u606f base.batchUpdateLinks(link_id, table_id, other_table_id, row_id_list, other_rows_ids_map) \u4f8b\u5b50 \u00b6 link_id = \"WaW5\" table_id = \"0000\" other_table_id = \"jtsf\" row_id_list = [ \"fRLglslWQYSGmkU7o6KyHw\" , \"eSQe9OpPQxih8A9zPXdMVA\" , \"FseN8ygVTzq1CHDqI4NjjQ\" ] other_rows_ids_map = { \"FseN8ygVTzq1CHDqI4NjjQ\" : [ \"OcCE8aX8T7a4dvJr-qNh3g\" , \"JckTyhN0TeS8yvH8D3EN7g\" ], \"eSQe9OpPQxih8A9zPXdMVA\" : [ \"cWHbzQiTR8uHHzH_gVSKIg\" , \"X56gE7BrRF-i61YlE4oTcw\" ], \"fRLglslWQYSGmkU7o6KyHw\" : [ \"MdfUQiWcTL--uMlrGtqqgw\" , \"E7Sh3FboSPmfBlDsrj_Fhg\" , \"UcZ7w9wDT-uVq4Ohtwgy9w\" ] } await base . batchUpdateLinks ( link_id , table_id , other_table_id , row_id_list , other_rows_ids_map ) Remove link \u00b6 \u79fb\u9664\u67d0\u4e2a\u94fe\u63a5 base . removeLink ( link_id , table_name , other_table_name , row_id , other_row_id ) \u4f8b\u5b50 \u00b6 await base . removeLink ( '5WeC' , 'real-img-files' , 'contact' , 'CGtoJB1oQM60RiKT-c5J-g' , 'PALm2wPKTCy-jdJNv_UWaQ' ) Get link id \u00b6 \u901a\u8fc7\u5217\u540d\u6765\u83b7\u53d6\u94fe\u63a5\u7684id const linkId = base . getColumnLinkId ( table_name , column_name , view_name = None ) \u4f8b\u5b50 \u00b6 await base . getColumnLinkId ( 'Table1' , '\u8bb0\u5f55' ) # \u8fd4\u56de\u94fe\u63a5\u7684id \uff0c \u5982 \u2018 aHL2 \u2019","title":"Links"},{"location":"javascript-api/links/#links","text":"","title":"Links"},{"location":"javascript-api/links/#add-link","text":"\u6dfb\u52a0\u94fe\u63a5\uff0c\u94fe\u63a5\u5176\u4ed6\u8868\u8bb0\u5f55 base . addLink ( link_id , table_name , other_table_name , row_id , other_row_id ) \u5176\u4e2d link_id: \u94fe\u63a5\u5217 data \u5c5e\u6027\u4e0b\u7684 link_id (\u4f60\u53ef\u4ee5\u83b7\u53d6 base \u7684 metadata\uff0c\u627e\u5230\u5bf9\u5e94\u7684\u5217\uff0c\u7136\u540e\u627e\u4e00\u4e0b data \u5b57\u6bb5\u4e0b\u7684 link_id \u5b57\u6bb5) table_name: \u94fe\u63a5\u8868\u7684\u540d\u5b57 other_table_name: \u88ab\u94fe\u63a5\u8868\u7684\u540d\u5b57 row_id: \u94fe\u63a5\u884c id other_row_id: \u88ab\u94fe\u63a5\u884c\u7684 id","title":"Add link"},{"location":"javascript-api/links/#update-link","text":"\u66f4\u65b0\u94fe\u63a5\u4fe1\u606f base.updateLink(self, link_id, table_id, other_table_id, row_id, other_rows_ids) \u5176\u4e2d link_id: \u94fe\u63a5\u5217 data \u5c5e\u6027\u4e0b\u7684 link_id table_id: \u94fe\u63a5\u8868\u7684 id other_table_id: \u88ab\u94fe\u63a5\u8868\u7684 id row_id: \u94fe\u63a5\u884c id other_rows_ids: \u88ab\u94fe\u63a5\u884c\u7684 id \u5217\u8868","title":"Update link"},{"location":"javascript-api/links/#batch-update-links","text":"\u6279\u91cf\u66f4\u65b0\u94fe\u63a5\u4fe1\u606f base.batchUpdateLinks(link_id, table_id, other_table_id, row_id_list, other_rows_ids_map)","title":"Batch update links"},{"location":"javascript-api/links/#remove-link","text":"\u79fb\u9664\u67d0\u4e2a\u94fe\u63a5 base . removeLink ( link_id , table_name , other_table_name , row_id , other_row_id )","title":"Remove link"},{"location":"javascript-api/links/#get-link-id","text":"\u901a\u8fc7\u5217\u540d\u6765\u83b7\u53d6\u94fe\u63a5\u7684id const linkId = base . getColumnLinkId ( table_name , column_name , view_name = None )","title":"Get link id"},{"location":"javascript-api/query/","text":"Query with SQL \u00b6 Query \u00b6 \u4f7f\u7528 sql \u8bed\u53e5\u67e5\u8be2\u4e00\u4e2a base base . query ( sql ) \u5176\u4e2d sql: \u8981\u6267\u884c\u7684 SQL \u8bed\u53e5 \u6ce8\u610f: \u9ed8\u8ba4\u8fd4\u56de\u6700\u591a 100 \u6761\u7ed3\u679c\uff0c\u5982\u679c\u9700\u8981\u66f4\u591a\u7ed3\u679c\uff0c\u8bf7\u5728 sql \u8bed\u53e5\u4e2d\u52a0\u5165 limit \u53c2\u6570 \u53ef\u80fd\u7684\u5f02\u5e38\u5305\u62ec ValueError: sql can not be empty ConnectionError: network error Exception: no such table Exception: no such column Exception: columns in group by should match columns in select \u4f8b\u5b50 \u00b6 \u57fa\u7840\u67e5\u8be2 \u00b6 await base . query ( 'select name, price, year from Bill' ) \u7ed3\u679c [ { '_id' : 'PzBiZklNTGiGJS-4c0_VLw' , 'name' : 'Bob' , 'price' : 300 , 'year' : 2019 }, { '_id' : 'Ep7odyv1QC2vDQR2raMvSA' , 'name' : 'Bob' , 'price' : 300 , 'year' : 2021 }, { '_id' : 'f1x3X_8uTtSDUe9D60VlYQ' , 'name' : 'Tom' , 'price' : 100 , 'year' : 2019 }, { '_id' : 'NxeaB5pDRFKOItUs_Ugxug' , 'name' : 'Tom' , 'price' : 100 , 'year' : 2020 }, { '_id' : 'W0BrjGQpSES9nfSytvXgMA' , 'name' : 'Tom' , 'price' : 200 , 'year' : 2021 }, { '_id' : 'EvwCWtX3RmKYKHQO9w2kLg' , 'name' : 'Jane' , 'price' : 200 , 'year' : 2020 }, { '_id' : 'BTiIGSTgR06UhPLhejFctA' , 'name' : 'Jane' , 'price' : 200 , 'year' : 2021 } ] WHERE \u00b6 await base . query ( 'select name, price from Bill where year = 2021 ' ) \u7ed3\u679c [ { '_id' : 'Ep7odyv1QC2vDQR2raMvSA' , 'name' : 'Bob' , 'price' : 300 }, { '_id' : 'W0BrjGQpSES9nfSytvXgMA' , 'name' : 'Tom' , 'price' : 200 }, { '_id' : 'BTiIGSTgR06UhPLhejFctA' , 'name' : 'Jane' , 'price' : 200 } ] ORDER BY \u00b6 await base . query ( 'select name, price, year from Bill order by year' ) \u7ed3\u679c [ { '_id' : 'PzBiZklNTGiGJS-4c0_VLw' , 'name' : 'Bob' , 'price' : 300 , 'year' : 2019 }, { '_id' : 'f1x3X_8uTtSDUe9D60VlYQ' , 'name' : 'Tom' , 'price' : 100 , 'year' : 2019 }, { '_id' : 'NxeaB5pDRFKOItUs_Ugxug' , 'name' : 'Tom' , 'price' : 100 , 'year' : 2020 }, { '_id' : 'EvwCWtX3RmKYKHQO9w2kLg' , 'name' : 'Jane' , 'price' : 200 , 'year' : 2020 }, { '_id' : 'Ep7odyv1QC2vDQR2raMvSA' , 'name' : 'Bob' , 'price' : 300 , 'year' : 2021 }, { '_id' : 'W0BrjGQpSES9nfSytvXgMA' , 'name' : 'Tom' , 'price' : 200 , 'year' : 2021 }, { '_id' : 'BTiIGSTgR06UhPLhejFctA' , 'name' : 'Jane' , 'price' : 200 , 'year' : 2021 } ] GROUP BY \u00b6 await base . query ( 'select name, sum(price) from Bill group by name' ) \u7ed3\u679c [ { 'SUM(price)' : 600 , 'name' : 'Bob' }, { 'SUM(price)' : 400 , 'name' : 'Tom' }, { 'SUM(price)' : 400 , 'name' : 'Jane' } ] DISTINCT \u00b6 await base . query ( 'select distinct name from Bill' ) \u7ed3\u679c [ { '_id' : 'PzBiZklNTGiGJS-4c0_VLw' , 'name' : 'Bob' }, { '_id' : 'f1x3X_8uTtSDUe9D60VlYQ' , 'name' : 'Tom' }, { '_id' : 'EvwCWtX3RmKYKHQO9w2kLg' , 'name' : 'Jane' } ]","title":"Query with SQL"},{"location":"javascript-api/query/#query-with-sql","text":"","title":"Query with SQL"},{"location":"javascript-api/query/#query","text":"\u4f7f\u7528 sql \u8bed\u53e5\u67e5\u8be2\u4e00\u4e2a base base . query ( sql ) \u5176\u4e2d sql: \u8981\u6267\u884c\u7684 SQL \u8bed\u53e5 \u6ce8\u610f: \u9ed8\u8ba4\u8fd4\u56de\u6700\u591a 100 \u6761\u7ed3\u679c\uff0c\u5982\u679c\u9700\u8981\u66f4\u591a\u7ed3\u679c\uff0c\u8bf7\u5728 sql \u8bed\u53e5\u4e2d\u52a0\u5165 limit \u53c2\u6570 \u53ef\u80fd\u7684\u5f02\u5e38\u5305\u62ec ValueError: sql can not be empty ConnectionError: network error Exception: no such table Exception: no such column Exception: columns in group by should match columns in select","title":"Query"},{"location":"javascript-api/query/#_1","text":"","title":"\u4f8b\u5b50"},{"location":"javascript-api/query/#_2","text":"await base . query ( 'select name, price, year from Bill' ) \u7ed3\u679c [ { '_id' : 'PzBiZklNTGiGJS-4c0_VLw' , 'name' : 'Bob' , 'price' : 300 , 'year' : 2019 }, { '_id' : 'Ep7odyv1QC2vDQR2raMvSA' , 'name' : 'Bob' , 'price' : 300 , 'year' : 2021 }, { '_id' : 'f1x3X_8uTtSDUe9D60VlYQ' , 'name' : 'Tom' , 'price' : 100 , 'year' : 2019 }, { '_id' : 'NxeaB5pDRFKOItUs_Ugxug' , 'name' : 'Tom' , 'price' : 100 , 'year' : 2020 }, { '_id' : 'W0BrjGQpSES9nfSytvXgMA' , 'name' : 'Tom' , 'price' : 200 , 'year' : 2021 }, { '_id' : 'EvwCWtX3RmKYKHQO9w2kLg' , 'name' : 'Jane' , 'price' : 200 , 'year' : 2020 }, { '_id' : 'BTiIGSTgR06UhPLhejFctA' , 'name' : 'Jane' , 'price' : 200 , 'year' : 2021 } ]","title":"\u57fa\u7840\u67e5\u8be2"},{"location":"javascript-api/query/#where","text":"await base . query ( 'select name, price from Bill where year = 2021 ' ) \u7ed3\u679c [ { '_id' : 'Ep7odyv1QC2vDQR2raMvSA' , 'name' : 'Bob' , 'price' : 300 }, { '_id' : 'W0BrjGQpSES9nfSytvXgMA' , 'name' : 'Tom' , 'price' : 200 }, { '_id' : 'BTiIGSTgR06UhPLhejFctA' , 'name' : 'Jane' , 'price' : 200 } ]","title":"WHERE"},{"location":"javascript-api/query/#order-by","text":"await base . query ( 'select name, price, year from Bill order by year' ) \u7ed3\u679c [ { '_id' : 'PzBiZklNTGiGJS-4c0_VLw' , 'name' : 'Bob' , 'price' : 300 , 'year' : 2019 }, { '_id' : 'f1x3X_8uTtSDUe9D60VlYQ' , 'name' : 'Tom' , 'price' : 100 , 'year' : 2019 }, { '_id' : 'NxeaB5pDRFKOItUs_Ugxug' , 'name' : 'Tom' , 'price' : 100 , 'year' : 2020 }, { '_id' : 'EvwCWtX3RmKYKHQO9w2kLg' , 'name' : 'Jane' , 'price' : 200 , 'year' : 2020 }, { '_id' : 'Ep7odyv1QC2vDQR2raMvSA' , 'name' : 'Bob' , 'price' : 300 , 'year' : 2021 }, { '_id' : 'W0BrjGQpSES9nfSytvXgMA' , 'name' : 'Tom' , 'price' : 200 , 'year' : 2021 }, { '_id' : 'BTiIGSTgR06UhPLhejFctA' , 'name' : 'Jane' , 'price' : 200 , 'year' : 2021 } ]","title":"ORDER BY"},{"location":"javascript-api/query/#group-by","text":"await base . query ( 'select name, sum(price) from Bill group by name' ) \u7ed3\u679c [ { 'SUM(price)' : 600 , 'name' : 'Bob' }, { 'SUM(price)' : 400 , 'name' : 'Tom' }, { 'SUM(price)' : 400 , 'name' : 'Jane' } ]","title":"GROUP BY"},{"location":"javascript-api/query/#distinct","text":"await base . query ( 'select distinct name from Bill' ) \u7ed3\u679c [ { '_id' : 'PzBiZklNTGiGJS-4c0_VLw' , 'name' : 'Bob' }, { '_id' : 'f1x3X_8uTtSDUe9D60VlYQ' , 'name' : 'Tom' }, { '_id' : 'EvwCWtX3RmKYKHQO9w2kLg' , 'name' : 'Jane' } ]","title":"DISTINCT"},{"location":"javascript-api/rows/","text":"Row \u00b6 List rows \u00b6 \u83b7\u53d6\u8868\u683c\u7684\u6240\u6709\u884c base . listRows ( table_name , view_name = None , order_by = '' , desc = '' , start = '' , limit = '' ) \u5176\u4e2d order_by: \u6839\u636e\u67d0\u5217\u540d\u8fdb\u884c\u6392\u5e8f desc\uff1a \u662f\u5426\u964d\u5e8f\uff0c\u9ed8\u8ba4\u4e3a\u5347\u5e8f start: \u7d22\u5f15\u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c \u884c\u53f7 limit: \u6570\u636e\u7684\u663e\u793a\u6570\u91cf \u4f8b\u5b50 \u00b6 const rows1 = await base . listRows ( 'Table1' ) const rows2 = await base . listRows ( 'Table1' , view_name = 'default' , order_by = '\u5e74\u9f84' , desc = True , start = 5 , limit = 20 ) Get row \u00b6 \u83b7\u53d6\u8868\u683c\u7684\u67d0\u4e00\u884c base . getRow ( table_name , row_id ) \u4f8b\u5b50 \u00b6 const row = await base . getRow ( 'Table1' , 'U_eTV7mDSmSd-K2P535Wzw' ) Append row \u00b6 \u8ffd\u52a0\u884c base . appendRow ( table_name , row_data ) \u4f8b\u5b50 \u00b6 row_data = { \"Name\" : \"I am new Row\" } await base . appendRow ( 'Table1' , row_data ) Insert row \u00b6 \u63d2\u5165\u884c base . insertRow ( table_name , row_data , anchor_row_id ) \u5176\u4e2d anchor_row_id: \u951a\u5b9a\u7684\u884c\u7684 id\uff0c\u5c06\u4f1a\u628a\u65b0\u884c\u63d2\u5165\u5230\u8fd9\u884c\u4e0b\u65b9 \u4f8b\u5b50 \u00b6 row_data = { \"Name\" : \"I am new Row\" } await base . insertRow ( 'Table1' , row_data , 'U_eTV7mDSmSd-K2P535Wzw' ) Batch append rows \u00b6 \u6279\u91cf\u8ffd\u52a0\u884c base . batchAppendRows ( table_name , rows_data ) \u4f8b\u5b50 \u00b6 rows_data = [{ 'Name' : 'test batch' , 'content' : 'Yes' }, { 'Name' : 'test batch' , 'content' : 'Yes' }, { 'Name' : 'test batch' , 'content' : 'Yes' }] await base . batchAppendRows ( 'Table6' , rows_data ) Update row \u00b6 \u66f4\u65b0\u4e00\u884c base . updateRow ( table_name , row_id , row_data ) \u4f8b\u5b50 \u00b6 row_data = { \"dcXS\" : \"123\" } await base . updateRow ( 'Table1' , 'U_eTV7mDSmSd-K2P535Wzw' , row_data ) Batch update rows \u00b6 \u6279\u91cf\u66f4\u65b0\u884c base . batchUpdateRows ( table_name , rows_data ) \u4f8b\u5b50 \u00b6 updates_data = [ { \"row_id\" : \"fMmCFyoxT4GN5Y2Powbl0Q\" , \"row\" : { \"Name\" : \"Ranjiwei\" , \"age\" : \"36\" } }, { \"row_id\" : \"cF5JTE99Tae-VVx0BGT-3A\" , \"row\" : { \"Name\" : \"Huitailang\" , \"age\" : \"33\" } }, { \"row_id\" : \"WP-8rb5PSUaM-tZRmTOCPA\" , \"row\" : { \"Name\" : \"Yufeng\" , \"age\" : \"22\" } } ] await base . batchUpdateRows ( 'Table1' , rows_data = updates_data ) Delete row \u00b6 \u5220\u9664\u4e00\u884c base . deleteRow ( table_name , row_id ) \u4f8b\u5b50 \u00b6 await base . deleteRow ( 'Table1' , 'U_eTV7mDSmSd-K2P535Wzw' ) Batch delete rows \u00b6 \u6279\u91cf\u5220\u9664\u884c base . batchDeleteRows ( table_name , row_ids ) \u4f8b\u5b50 \u00b6 const del_rows = rows . slice ( 0 , 3 ); const row_ids = del_rows . map ( row => row . _id ); await base . batchDeleteRows ( 'Table1' , row_ids )","title":"Rows"},{"location":"javascript-api/rows/#row","text":"","title":"Row"},{"location":"javascript-api/rows/#list-rows","text":"\u83b7\u53d6\u8868\u683c\u7684\u6240\u6709\u884c base . listRows ( table_name , view_name = None , order_by = '' , desc = '' , start = '' , limit = '' ) \u5176\u4e2d order_by: \u6839\u636e\u67d0\u5217\u540d\u8fdb\u884c\u6392\u5e8f desc\uff1a \u662f\u5426\u964d\u5e8f\uff0c\u9ed8\u8ba4\u4e3a\u5347\u5e8f start: \u7d22\u5f15\u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c \u884c\u53f7 limit: \u6570\u636e\u7684\u663e\u793a\u6570\u91cf","title":"List rows"},{"location":"javascript-api/rows/#get-row","text":"\u83b7\u53d6\u8868\u683c\u7684\u67d0\u4e00\u884c base . getRow ( table_name , row_id )","title":"Get row"},{"location":"javascript-api/rows/#append-row","text":"\u8ffd\u52a0\u884c base . appendRow ( table_name , row_data )","title":"Append row"},{"location":"javascript-api/rows/#insert-row","text":"\u63d2\u5165\u884c base . insertRow ( table_name , row_data , anchor_row_id ) \u5176\u4e2d anchor_row_id: \u951a\u5b9a\u7684\u884c\u7684 id\uff0c\u5c06\u4f1a\u628a\u65b0\u884c\u63d2\u5165\u5230\u8fd9\u884c\u4e0b\u65b9","title":"Insert row"},{"location":"javascript-api/rows/#batch-append-rows","text":"\u6279\u91cf\u8ffd\u52a0\u884c base . batchAppendRows ( table_name , rows_data )","title":"Batch append rows"},{"location":"javascript-api/rows/#update-row","text":"\u66f4\u65b0\u4e00\u884c base . updateRow ( table_name , row_id , row_data )","title":"Update row"},{"location":"javascript-api/rows/#batch-update-rows","text":"\u6279\u91cf\u66f4\u65b0\u884c base . batchUpdateRows ( table_name , rows_data )","title":"Batch update rows"},{"location":"javascript-api/rows/#delete-row","text":"\u5220\u9664\u4e00\u884c base . deleteRow ( table_name , row_id )","title":"Delete row"},{"location":"javascript-api/rows/#batch-delete-rows","text":"\u6279\u91cf\u5220\u9664\u884c base . batchDeleteRows ( table_name , row_ids )","title":"Batch delete rows"},{"location":"plugins/","text":"SeaTable \u63d2\u4ef6\u5f00\u53d1\u6d41\u7a0b \u00b6 \u5728\u8fd9\u4e2a\u6307\u5357\u4e2d\uff0c\u6211\u4eec\u4f1a\u4e00\u6b65\u6b65\u7684\u6f14\u793a\u600e\u4e48\u7ed9 SeaTable \u5199\u4e00\u4e2a\u6269\u5c55\u3002\u8fd9\u4e2a\u6269\u5c55\u53ef\u4ee5\u663e\u793a\u8868\u683c\u57fa\u672c\u4fe1\u606f\uff0c\u5305\u62ec \u5b50\u8868\u7684\u4e2a\u6570 \u603b\u7684\u8bb0\u5f55\u6570 \u534f\u4f5c\u4eba\u6570\u76ee \u63d2\u4ef6\u5f00\u53d1\u5b9e\u4f8b\u7684\u4ee3\u7801\u5f88\u7b80\u5355\uff0c\u4f60\u53ef\u4ee5\u70b9\u51fb\u8fd9\u4e2a github\u94fe\u63a5 \u83b7\u53d6\u6e90\u7801 \u63d2\u4ef6\u5f00\u53d1\u6d41\u7a0b\u5982\u4e0b\u3002 \u63d2\u4ef6\u5f00\u53d1\u57fa\u672c\u6d41\u7a0b \u00b6 1. \u5b89\u88c5\u63d2\u4ef6\u5f00\u53d1\u811a\u624b\u67b6 \u00b6 npm install -g create-dtable-plugin 2. \u901a\u8fc7\u811a\u624b\u67b6\u521b\u5efa\u63d2\u4ef6 \u00b6 create-dtable-plugin init seatable-plugin-table-info \u5b89\u88c5\u4f9d\u8d56 cd seatable-plugin-table-info npm install 3. \u4fee\u6539\u63d2\u4ef6\u914d\u7f6e \u00b6 \u4fee\u6539 plugin-config \u6587\u4ef6\u5939\u4e2d info.json \u914d\u7f6e\u6587\u4ef6 \"name\": '', // \u63d2\u4ef6\u82f1\u6587\u540d\u5b57\uff0c\u53ea\u80fd\u5305\u542b\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u4e0b\u5212\u7ebf\u3001\u4e2d\u5212\u7ebf \"version\": '', // \u63d2\u4ef6\u7248\u672c\u53f7 \"display_name\": '', // \u63d2\u4ef6\u663e\u793a\u7684\u540d\u5b57 \"description\": '', // \u63d2\u4ef6\u529f\u80fd\u76f8\u5173\u63cf\u8ff0 \u8fd9\u91cc\u4e0d\u9700\u8981\u6dfb\u52a0\u5176\u4ed6\u914d\u7f6e\u53c2\u6570\uff0c\u5176\u4ed6\u53c2\u6570\u7531\u6253\u5305\u5de5\u5177\u81ea\u52a8\u751f\u6210\u3002 \u53ef\u9009\u64cd\u4f5c \u5728 plugin-config \u6587\u4ef6\u5939\u4e2d\u6dfb\u52a0\u81ea\u5b9a\u4e49\u7684 icon.png \u4f5c\u4e3a\u63d2\u4ef6\u7684\u56fe\u6807\uff08\u53ef\u4e0d\u63d0\u4f9b\uff0c\u91c7\u7528\u9ed8\u8ba4\u56fe\u6807\u3002icon.png \u8981\u6c42\u662f 128x128 \u50cf\u7d20) \u5728 plugin-config \u6587\u4ef6\u5939\u4e2d\u6dfb\u52a0\u81ea\u5b9a\u4e49\u7684 card_image.png \u4f5c\u4e3a\u63d2\u4ef6\u56fe\u6807\u7684\u80cc\u666f\u56fe\uff08\u53ef\u4e0d\u63d0\u4f9b\uff0c\u663e\u793a\u9ed8\u8ba4\u80cc\u666f\u3002card_image.png \u8981\u6c42\u662f 560x240 \u50cf\u7d20) 4. \u4fee\u6539entry.js\u6587\u4ef6\u4e2d\u7684\u63d2\u4ef6\u6ce8\u518c\u51fd\u6570 \u00b6 \u66f4\u65b0 window . app . registerPluginItemCallback (' test ', TaskList . execute ); \u2b07\ufe0f \u4e3a\uff1a window . app . registerPluginItemCallback ( name , TaskList . execute ); \u6b64\u5904\u7684 name \u503c\u4e3a plugin - config / info . json \u4e2d\u7684 \u201c name \u201d \u503c 5. \u6dfb\u52a0\u63d2\u4ef6\u5f00\u53d1\u914d\u7f6e\u6587\u4ef6 \u00b6 \u5728\u9879\u76ee src \u6587\u4ef6\u5939\u5939\u4e2d\u6709\u4e00\u4e2a\u6587\u4ef6 setting.local.dist.js, \u5c06\u5176 copy \u4e00\u4efd \u5e76\u547d\u540d\u4e3a setting.local.js \u6587\u4ef6\u5185\u5bb9\u5982\u4e0b, \u6309\u7167\u6ce8\u91ca\u8fdb\u884c\u4fee\u6539\u5373\u53ef const config = { APIToken : \"**\" , // \u9700\u6dfb\u52a0\u63d2\u4ef6\u7684 dtable \u7684 apiToken server : \"**\" , // \u9700\u6dfb\u52a0\u63d2\u4ef6\u7684 dtable \u7684\u90e8\u7f72\u7f51\u5740 workspaceID : \"**\" , // \u9700\u6dfb\u52a0\u63d2\u4ef6\u7684 dtable \u6240\u5728\u7684 workspace \u7684 id \u503c dtableName : \"**\" , // \u9700\u6dfb\u52a0\u63d2\u4ef6\u7684 dtable \u7684\u540d\u5b57 lang : \"**\" // \u63d2\u4ef6\u9ed8\u8ba4\u8bed\u8a00\u7c7b\u578b\uff0cen \u6216\u8005 zh-cn }; 6. \u5f00\u59cb\u5f00\u53d1 \u00b6 \u8fd0\u884c\u672c\u5730\u5f00\u53d1\u73af\u5883 npm start \u5728\u6d4f\u89c8\u5668\u4e0a\u6253\u5f00 localhost:3000 \u53ef\u4ee5\u770b\u5230\u63d2\u4ef6\u5bf9\u8bdd\u6846\u5df2\u7ecf\u6253\u5f00\uff0c\u5bf9\u8bdd\u6846\u4e2d\u9ed8\u8ba4\u663e\u793a\u901a\u8fc7 dtable-sdk \u7ec4\u4ef6\u5e93\u63d0\u4f9b\u7684\u63a5\u53e3\u51fd\u6570 1. (getTables)\u83b7\u53d6\u7684dtable\u8868\u683c\u7684\u5b50\u8868\u4fe1\u606f 2. (getRelatedUsers)\u83b7\u53d6\u7684dtable\u534f\u4f5c\u4eba\u7684\u8be6\u7ec6\u4fe1\u606f \u4e3b\u8981\u4ee3\u7801\u53ca\u7528\u9014 /src/index.js \u672c\u5730\u5f00\u53d1\u63d2\u4ef6\u7684\u5165\u53e3\u6587\u4ef6 /src/entry.js \u6309\u7167\u5230 SeaTable \u540e\u4f5c\u4e3a\u63d2\u4ef6\u8fd0\u884c\u65f6\u7684\u5165\u53e3\u6587\u4ef6 /src/app.js \u63d2\u4ef6\u4e3b\u8981\u4ee3\u7801 7. \u663e\u793a\u8868\u683c\u57fa\u672c\u4fe1\u606f \u00b6 \u5199\u4e00\u4e2a TableInfo \u7684\u7ec4\u4ef6\uff0c\u8fd9\u4e2a\u7ec4\u4ef6\u9700\u8981\u4f20\u5165 tables \u548c collaborators \u4e24\u4e2a Props class TableInfo extends React . Component { } const propTypes = { tables : PropTypes . array . isRequired , collaborators : PropTypes . array . isRequired , }; TableInfo . propTypes = propTypes ; export default TableInfo ; \u83b7\u53d6\u5b50\u8868\u7684\u4e2a\u6570 getTablesNumber = ( tables ) => { return ( tables && Array . isArray ( tables )) ? tables . length : 0 ; } \u83b7\u53d6\u603b\u7684\u8bb0\u5f55\u6570 getRecords = ( tables ) => { let recordsNumber = 0 ; if ( ! tables ) return recordsNumber ; for ( let i = 0 ; i < tables . length ; i ++ ) { const table = tables [ i ]; const rows = table . rows ; if ( rows && Array . isArray ( rows )) { recordsNumber += rows . length ; } } return recordsNumber ; } \u83b7\u53d6\u534f\u4f5c\u4eba\u53ca\u6570\u91cf renderCollaborators = (collaborators) => { if (!collaborators || !Array.isArray(collaborators)) { return null; } return collaborators.map((collaborator, index) => { return ( <div key= {index} className= \"collaborator\" > <span className= \"collaborator-avatar-container\" > <img className= \"collaborator-avatar\" alt= '' src= {collaborator.avatar_url}/ > </span> <span className= \"collaborator-name\" > {collaborator.name} </span> </div> ); }); } \u754c\u9762\u6e32\u67d3\uff1a\u5b50\u8868\u7684\u4e2a\u6570\u3001\u603b\u7684\u8bb0\u5f55\u6570\u3001\u534f\u4f5c\u4eba\u6570\u76ee render() { const { tables, collaborators } = this.props; return ( <div> <div> {'\u5b50\u8868\u7684\u4e2a\u6570: '}{this.getTablesNumber(tables)} </div><br/> <div> {'\u603b\u7684\u8bb0\u5f55\u6570: '}{this.getRecords(tables)} </div><br/> <div> {'\u534f\u4f5c\u4eba\u6570\u91cf: '}{collaborators ? collaborators.length : 0} </div><br/> <div className= \"plugin-collaborators\" > {this.renderCollaborators(collaborators)} </div> </div> ); } \u5728\u7236\u7ec4\u4ef6 app.js \u4e2d\u8c03\u7528 TableInfo \u7ec4\u4ef6\uff0c\u5e76\u4fee\u6539 app.js \u4e2d\u7684 render \u51fd\u6570\uff0c\u4f20\u5165 tables \u548c collaborators\u3002 import PropTypes from 'prop-types' ; import TableInfo from './table-info' ; class App extends React . Component { let tables = this . dtable . getTables (); let collaborators = this . dtable . getRelatedUsers (); render () { return ( < Modal isOpen = { showDialog } toggle = { this . onPluginToggle } contentClassName = \"dtable-plugin plugin-container\" size = 'lg' > < ModalHeader className = \"test-plugin-header\" toggle = { this . onPluginToggle } > { '\u63d2\u4ef6' } </ ModalHeader > < ModalBody className = \"test-plugin-content\" > < TableInfo tables = { tables } collaborators = { collaborators } /> </ ModalBody > </ Modal > ); } } App . propTypes = { row : PropTypes . object , // \u5982\u679c\u63d2\u4ef6\u662f\u901a\u8fc7\u6309\u94ae\u6253\u5f00\u7684 \uff0c \u4f1a\u6709\u4e00\u4e2arow\u53c2\u6570 } \u589e\u52a0 css/table-info.css \u6587\u4ef6\uff0c\u4fee\u6539\u63d2\u4ef6\u7684\u6837\u5f0f\u3002 \u518d\u6b21\u8fd0\u884c npm start \uff0c\u5373\u53ef\u5728\u6d4f\u89c8\u5668\u4e0a localhost: 3000 \u770b\u5230\u4e0b\u9762\u7684\u4fe1\u606f\u3002 \u5b50\u8868\u7684\u4e2a\u6570: X \u603b\u7684\u8bb0\u5f55\u6570: XXX \u534f\u4f5c\u4eba\u6570\u91cf: X 8. \u6253\u5305\u4e0a\u4f20\u63d2\u4ef6 \u00b6 \u6267\u884c npm run build-plugin \u6253\u5305\u63d2\u4ef6\uff0c\u6253\u5305\u540e\u63d2\u4ef6\u7684\u8def\u5f84\u4e3a /plugin/task.zip \u5c06\u63d2\u4ef6 task.zip \u4e0a\u4f20\u5230 dtable \u4e2d \u5b98\u65b9\u63d0\u4f9b\u7684\u63d2\u4ef6\u5f00\u53d1\u5e93 \u00b6 dtable-sdk \u00b6 dtable-sdk \u63d0\u4f9b\u4e86\u5bf9\u6570\u636e\u64cd\u4f5c\u7684\u63a5\u53e3 \u521d\u59cb\u5316\u63d2\u4ef6 Tables Views Columns Rows Query with sql plugins Constants dtable-ui-component \u00b6 dtable-ui-component \u63d0\u4f9b\u4e86\u683c\u5f0f\u5316\u663e\u793a\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\u5355\u5143\u548c\u5bf9\u6570\u636e\u8fdb\u884c\u7f16\u8f91\u7684 UI \u63a7\u4ef6\u3002 \u8be6\u60c5\u53ef\u4ee5\u67e5\u770b: https://seatable.github.io/dtable-ui-component/docs/","title":"\u63d2\u4ef6\u5f00\u53d1\u6d41\u7a0b"},{"location":"plugins/#seatable","text":"\u5728\u8fd9\u4e2a\u6307\u5357\u4e2d\uff0c\u6211\u4eec\u4f1a\u4e00\u6b65\u6b65\u7684\u6f14\u793a\u600e\u4e48\u7ed9 SeaTable \u5199\u4e00\u4e2a\u6269\u5c55\u3002\u8fd9\u4e2a\u6269\u5c55\u53ef\u4ee5\u663e\u793a\u8868\u683c\u57fa\u672c\u4fe1\u606f\uff0c\u5305\u62ec \u5b50\u8868\u7684\u4e2a\u6570 \u603b\u7684\u8bb0\u5f55\u6570 \u534f\u4f5c\u4eba\u6570\u76ee \u63d2\u4ef6\u5f00\u53d1\u5b9e\u4f8b\u7684\u4ee3\u7801\u5f88\u7b80\u5355\uff0c\u4f60\u53ef\u4ee5\u70b9\u51fb\u8fd9\u4e2a github\u94fe\u63a5 \u83b7\u53d6\u6e90\u7801 \u63d2\u4ef6\u5f00\u53d1\u6d41\u7a0b\u5982\u4e0b\u3002","title":"SeaTable \u63d2\u4ef6\u5f00\u53d1\u6d41\u7a0b"},{"location":"plugins/#_1","text":"","title":"\u63d2\u4ef6\u5f00\u53d1\u57fa\u672c\u6d41\u7a0b"},{"location":"plugins/#1","text":"npm install -g create-dtable-plugin","title":"1. \u5b89\u88c5\u63d2\u4ef6\u5f00\u53d1\u811a\u624b\u67b6"},{"location":"plugins/#2","text":"create-dtable-plugin init seatable-plugin-table-info \u5b89\u88c5\u4f9d\u8d56 cd seatable-plugin-table-info npm install","title":"2. \u901a\u8fc7\u811a\u624b\u67b6\u521b\u5efa\u63d2\u4ef6"},{"location":"plugins/#3","text":"\u4fee\u6539 plugin-config \u6587\u4ef6\u5939\u4e2d info.json \u914d\u7f6e\u6587\u4ef6 \"name\": '', // \u63d2\u4ef6\u82f1\u6587\u540d\u5b57\uff0c\u53ea\u80fd\u5305\u542b\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u4e0b\u5212\u7ebf\u3001\u4e2d\u5212\u7ebf \"version\": '', // \u63d2\u4ef6\u7248\u672c\u53f7 \"display_name\": '', // \u63d2\u4ef6\u663e\u793a\u7684\u540d\u5b57 \"description\": '', // \u63d2\u4ef6\u529f\u80fd\u76f8\u5173\u63cf\u8ff0 \u8fd9\u91cc\u4e0d\u9700\u8981\u6dfb\u52a0\u5176\u4ed6\u914d\u7f6e\u53c2\u6570\uff0c\u5176\u4ed6\u53c2\u6570\u7531\u6253\u5305\u5de5\u5177\u81ea\u52a8\u751f\u6210\u3002 \u53ef\u9009\u64cd\u4f5c \u5728 plugin-config \u6587\u4ef6\u5939\u4e2d\u6dfb\u52a0\u81ea\u5b9a\u4e49\u7684 icon.png \u4f5c\u4e3a\u63d2\u4ef6\u7684\u56fe\u6807\uff08\u53ef\u4e0d\u63d0\u4f9b\uff0c\u91c7\u7528\u9ed8\u8ba4\u56fe\u6807\u3002icon.png \u8981\u6c42\u662f 128x128 \u50cf\u7d20) \u5728 plugin-config \u6587\u4ef6\u5939\u4e2d\u6dfb\u52a0\u81ea\u5b9a\u4e49\u7684 card_image.png \u4f5c\u4e3a\u63d2\u4ef6\u56fe\u6807\u7684\u80cc\u666f\u56fe\uff08\u53ef\u4e0d\u63d0\u4f9b\uff0c\u663e\u793a\u9ed8\u8ba4\u80cc\u666f\u3002card_image.png \u8981\u6c42\u662f 560x240 \u50cf\u7d20)","title":"3. \u4fee\u6539\u63d2\u4ef6\u914d\u7f6e"},{"location":"plugins/#4-entryjs","text":"\u66f4\u65b0 window . app . registerPluginItemCallback (' test ', TaskList . execute ); \u2b07\ufe0f \u4e3a\uff1a window . app . registerPluginItemCallback ( name , TaskList . execute ); \u6b64\u5904\u7684 name \u503c\u4e3a plugin - config / info . json \u4e2d\u7684 \u201c name \u201d \u503c","title":"4. \u4fee\u6539entry.js\u6587\u4ef6\u4e2d\u7684\u63d2\u4ef6\u6ce8\u518c\u51fd\u6570"},{"location":"plugins/#5","text":"\u5728\u9879\u76ee src \u6587\u4ef6\u5939\u5939\u4e2d\u6709\u4e00\u4e2a\u6587\u4ef6 setting.local.dist.js, \u5c06\u5176 copy \u4e00\u4efd \u5e76\u547d\u540d\u4e3a setting.local.js \u6587\u4ef6\u5185\u5bb9\u5982\u4e0b, \u6309\u7167\u6ce8\u91ca\u8fdb\u884c\u4fee\u6539\u5373\u53ef const config = { APIToken : \"**\" , // \u9700\u6dfb\u52a0\u63d2\u4ef6\u7684 dtable \u7684 apiToken server : \"**\" , // \u9700\u6dfb\u52a0\u63d2\u4ef6\u7684 dtable \u7684\u90e8\u7f72\u7f51\u5740 workspaceID : \"**\" , // \u9700\u6dfb\u52a0\u63d2\u4ef6\u7684 dtable \u6240\u5728\u7684 workspace \u7684 id \u503c dtableName : \"**\" , // \u9700\u6dfb\u52a0\u63d2\u4ef6\u7684 dtable \u7684\u540d\u5b57 lang : \"**\" // \u63d2\u4ef6\u9ed8\u8ba4\u8bed\u8a00\u7c7b\u578b\uff0cen \u6216\u8005 zh-cn };","title":"5. \u6dfb\u52a0\u63d2\u4ef6\u5f00\u53d1\u914d\u7f6e\u6587\u4ef6"},{"location":"plugins/#6","text":"\u8fd0\u884c\u672c\u5730\u5f00\u53d1\u73af\u5883 npm start \u5728\u6d4f\u89c8\u5668\u4e0a\u6253\u5f00 localhost:3000 \u53ef\u4ee5\u770b\u5230\u63d2\u4ef6\u5bf9\u8bdd\u6846\u5df2\u7ecf\u6253\u5f00\uff0c\u5bf9\u8bdd\u6846\u4e2d\u9ed8\u8ba4\u663e\u793a\u901a\u8fc7 dtable-sdk \u7ec4\u4ef6\u5e93\u63d0\u4f9b\u7684\u63a5\u53e3\u51fd\u6570 1. (getTables)\u83b7\u53d6\u7684dtable\u8868\u683c\u7684\u5b50\u8868\u4fe1\u606f 2. (getRelatedUsers)\u83b7\u53d6\u7684dtable\u534f\u4f5c\u4eba\u7684\u8be6\u7ec6\u4fe1\u606f \u4e3b\u8981\u4ee3\u7801\u53ca\u7528\u9014 /src/index.js \u672c\u5730\u5f00\u53d1\u63d2\u4ef6\u7684\u5165\u53e3\u6587\u4ef6 /src/entry.js \u6309\u7167\u5230 SeaTable \u540e\u4f5c\u4e3a\u63d2\u4ef6\u8fd0\u884c\u65f6\u7684\u5165\u53e3\u6587\u4ef6 /src/app.js \u63d2\u4ef6\u4e3b\u8981\u4ee3\u7801","title":"6. \u5f00\u59cb\u5f00\u53d1"},{"location":"plugins/#7","text":"\u5199\u4e00\u4e2a TableInfo \u7684\u7ec4\u4ef6\uff0c\u8fd9\u4e2a\u7ec4\u4ef6\u9700\u8981\u4f20\u5165 tables \u548c collaborators \u4e24\u4e2a Props class TableInfo extends React . Component { } const propTypes = { tables : PropTypes . array . isRequired , collaborators : PropTypes . array . isRequired , }; TableInfo . propTypes = propTypes ; export default TableInfo ; \u83b7\u53d6\u5b50\u8868\u7684\u4e2a\u6570 getTablesNumber = ( tables ) => { return ( tables && Array . isArray ( tables )) ? tables . length : 0 ; } \u83b7\u53d6\u603b\u7684\u8bb0\u5f55\u6570 getRecords = ( tables ) => { let recordsNumber = 0 ; if ( ! tables ) return recordsNumber ; for ( let i = 0 ; i < tables . length ; i ++ ) { const table = tables [ i ]; const rows = table . rows ; if ( rows && Array . isArray ( rows )) { recordsNumber += rows . length ; } } return recordsNumber ; } \u83b7\u53d6\u534f\u4f5c\u4eba\u53ca\u6570\u91cf renderCollaborators = (collaborators) => { if (!collaborators || !Array.isArray(collaborators)) { return null; } return collaborators.map((collaborator, index) => { return ( <div key= {index} className= \"collaborator\" > <span className= \"collaborator-avatar-container\" > <img className= \"collaborator-avatar\" alt= '' src= {collaborator.avatar_url}/ > </span> <span className= \"collaborator-name\" > {collaborator.name} </span> </div> ); }); } \u754c\u9762\u6e32\u67d3\uff1a\u5b50\u8868\u7684\u4e2a\u6570\u3001\u603b\u7684\u8bb0\u5f55\u6570\u3001\u534f\u4f5c\u4eba\u6570\u76ee render() { const { tables, collaborators } = this.props; return ( <div> <div> {'\u5b50\u8868\u7684\u4e2a\u6570: '}{this.getTablesNumber(tables)} </div><br/> <div> {'\u603b\u7684\u8bb0\u5f55\u6570: '}{this.getRecords(tables)} </div><br/> <div> {'\u534f\u4f5c\u4eba\u6570\u91cf: '}{collaborators ? collaborators.length : 0} </div><br/> <div className= \"plugin-collaborators\" > {this.renderCollaborators(collaborators)} </div> </div> ); } \u5728\u7236\u7ec4\u4ef6 app.js \u4e2d\u8c03\u7528 TableInfo \u7ec4\u4ef6\uff0c\u5e76\u4fee\u6539 app.js \u4e2d\u7684 render \u51fd\u6570\uff0c\u4f20\u5165 tables \u548c collaborators\u3002 import PropTypes from 'prop-types' ; import TableInfo from './table-info' ; class App extends React . Component { let tables = this . dtable . getTables (); let collaborators = this . dtable . getRelatedUsers (); render () { return ( < Modal isOpen = { showDialog } toggle = { this . onPluginToggle } contentClassName = \"dtable-plugin plugin-container\" size = 'lg' > < ModalHeader className = \"test-plugin-header\" toggle = { this . onPluginToggle } > { '\u63d2\u4ef6' } </ ModalHeader > < ModalBody className = \"test-plugin-content\" > < TableInfo tables = { tables } collaborators = { collaborators } /> </ ModalBody > </ Modal > ); } } App . propTypes = { row : PropTypes . object , // \u5982\u679c\u63d2\u4ef6\u662f\u901a\u8fc7\u6309\u94ae\u6253\u5f00\u7684 \uff0c \u4f1a\u6709\u4e00\u4e2arow\u53c2\u6570 } \u589e\u52a0 css/table-info.css \u6587\u4ef6\uff0c\u4fee\u6539\u63d2\u4ef6\u7684\u6837\u5f0f\u3002 \u518d\u6b21\u8fd0\u884c npm start \uff0c\u5373\u53ef\u5728\u6d4f\u89c8\u5668\u4e0a localhost: 3000 \u770b\u5230\u4e0b\u9762\u7684\u4fe1\u606f\u3002 \u5b50\u8868\u7684\u4e2a\u6570: X \u603b\u7684\u8bb0\u5f55\u6570: XXX \u534f\u4f5c\u4eba\u6570\u91cf: X","title":"7. \u663e\u793a\u8868\u683c\u57fa\u672c\u4fe1\u606f"},{"location":"plugins/#8","text":"\u6267\u884c npm run build-plugin \u6253\u5305\u63d2\u4ef6\uff0c\u6253\u5305\u540e\u63d2\u4ef6\u7684\u8def\u5f84\u4e3a /plugin/task.zip \u5c06\u63d2\u4ef6 task.zip \u4e0a\u4f20\u5230 dtable \u4e2d","title":"8. \u6253\u5305\u4e0a\u4f20\u63d2\u4ef6"},{"location":"plugins/#_2","text":"","title":"\u5b98\u65b9\u63d0\u4f9b\u7684\u63d2\u4ef6\u5f00\u53d1\u5e93"},{"location":"plugins/#dtable-sdk","text":"dtable-sdk \u63d0\u4f9b\u4e86\u5bf9\u6570\u636e\u64cd\u4f5c\u7684\u63a5\u53e3 \u521d\u59cb\u5316\u63d2\u4ef6 Tables Views Columns Rows Query with sql plugins Constants","title":"dtable-sdk"},{"location":"plugins/#dtable-ui-component","text":"dtable-ui-component \u63d0\u4f9b\u4e86\u683c\u5f0f\u5316\u663e\u793a\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\u5355\u5143\u548c\u5bf9\u6570\u636e\u8fdb\u884c\u7f16\u8f91\u7684 UI \u63a7\u4ef6\u3002 \u8be6\u60c5\u53ef\u4ee5\u67e5\u770b: https://seatable.github.io/dtable-ui-component/docs/","title":"dtable-ui-component"},{"location":"plugins/base/","text":"dtable \u00b6 Init \u00b6 \u63d2\u4ef6\u5f00\u53d1\u73af\u5883\u5206\u4e3a\u4e24\u79cd, \u5f00\u53d1\u73af\u5883\u548c\u751f\u4ea7\u73af\u5883, \u7531\u4e8e\u73af\u5883\u4e0d\u540c, \u6240\u4ee5\u521d\u59cb\u5316\u7684\u65b9\u5f0f\u4e5f\u4e0d\u540c: \u5728\u5f00\u53d1\u73af\u5883\u4e2d\uff0c\u7f16\u7801\u4eba\u5458\u9700\u8981\u63d0\u4f9b\u63d2\u4ef6\u6240\u9700\u7684\u914d\u7f6e\u6587\u4ef6, \u7528\u4e8e\u521d\u59cb\u5316\u63d2\u4ef6, \u83b7\u53d6\u63d2\u4ef6\u9700\u8981\u7684\u6570\u636e\u3002 \u5728\u751f\u4ea7\u73af\u5883\u4e2d\uff0c\u7528\u6237\u5b89\u88c5\u63d2\u4ef6\u540e, \u63d2\u4ef6\u53ef\u4ee5\u76f4\u63a5\u8bfb\u53d6\u5f53\u524d\u6d4f\u89c8\u5668\u4e2d\u7684 base \u7684\u6570\u636e, \u7528\u4e8e\u521d\u59cb\u5316\u63d2\u4ef6\u3002 \u521d\u59cb\u5316\u63d2\u4ef6 \u00b6 init \u00b6 \u5f00\u53d1\u73af\u5883\u4e0b\u521d\u59cb\u5316\u63d2\u4ef6 import DTable from 'dtable-sdk' ; const dtable = new DTable (); const settings = { \"server\" : \"https://cloud.seatable.cn\" , \"APIToken\" : \"50c17897ae8b1c7c428d459fc2c379a9bc3806cc\" , } await dtable . init ( config ); initBrowser \u00b6 \u751f\u4ea7\u73af\u5883\u4e0b\u521d\u59cb\u5316\u63d2\u4ef6 import DTable from 'dtable-sdk' ; const dtable = new Dtable (); const dtableStore = window . app . dtableStore ; // \u4ece\u96c6\u6210\u73af\u5883\u4e2d\u8bfb\u53d6\u521d\u59cb\u5316\u6570\u636e await dtable . initBrowser ( dtableStore ); \u76d1\u542c\u4e8b\u4ef6\u53d8\u5316 \u00b6 subscribe \u00b6 \u4e8b\u4ef6\u7c7b\u578b \u63cf\u8ff0 \u7528\u9014 dtable-connect \u8868\u793a\u4e0e server \u5df2\u7ecf\u5efa\u7acb\u94fe\u63a5, \u6570\u636e\u52a0\u8f7d\u5b8c\u6210 \u66f4\u65b0 state, \u66f4\u65b0 UI \u663e\u793a local-dtable-changed \u8868\u793a\u672c\u5730\u6267\u884c\u4e86\u67d0\u4e9b\u64cd\u4f5c, \u6570\u636e\u53d1\u751f\u53d8\u5316 \u66f4\u65b0 state, \u66f4\u65b0 UI \u663e\u793a remote-dtable-changed \u8868\u793a\u672c\u5730\u6267\u884c\u4e86 server \u7aef\u53d1\u9001\u7684\u67d0\u4e9b\u64cd\u4f5c, \u6570\u636e\u53d1\u751f\u53d8\u5316 \u66f4\u65b0 state, \u66f4\u65b0 UI \u663e\u793a import DTable from 'dtable-sdk' ; const dtable = new Dtable (); dtable . subscribe ( 'dtable-connect' , () => {...}); dtable . subscribe ( 'local-dtable-changed' , () => {...}); dtable . subscribe ( 'remote-dtable-changed' , () => {...}); \u63d2\u4ef6\u5f00\u53d1\u521d\u59cb\u5316\u4f8b\u5b50 \u00b6 \u7531\u4e8e\u9700\u8981\u517c\u5bb9\u4e24\u4e2a\u73af\u5883, \u6240\u4ee5\u4e00\u822c\u63d2\u4ef6\u5f00\u53d1\u7684\u521d\u59cb\u5316\u64cd\u4f5c\u5982\u4e0b: import Dtable from 'dtable-sdk' ; import PropTypes from 'prop-types' ; const propsTypes = { isDevelopment : PropTypes . bool }; const settings = { \"server\" : \"https://cloud.seatable.cn\" , \"APIToken\" : \"50c17897ae8b1c7c428d459fc2c379a9bc3806cc\" , }; class App extends React . Component { constructor ( props ) { super ( props ); this . state = { isLoading : true }; this . dtable = new Dtable (); } async componentDidMount () { const { isDevelopment } = this . props ; if ( isDevelopment ) { await dtable . init ( settings ); await this . dtable . syncWithServer (); this . dtable . subscribe ( 'dtable-connect' , this . resetData ); } else { const dtableStore = window . app . dtableStore ; dtable . initBrowser ( dtableStore ); } this . dtable . subscribe ( 'local-dtable-changed' , this . resetData ); this . dtable . subscribe ( 'remote-dtable-changed' , this . resetData ); } resetData = () => { // ... this . setState ({ isLoading : false }); } render () { return ( ... ); } }","title":"Base"},{"location":"plugins/base/#dtable","text":"","title":"dtable"},{"location":"plugins/base/#init","text":"\u63d2\u4ef6\u5f00\u53d1\u73af\u5883\u5206\u4e3a\u4e24\u79cd, \u5f00\u53d1\u73af\u5883\u548c\u751f\u4ea7\u73af\u5883, \u7531\u4e8e\u73af\u5883\u4e0d\u540c, \u6240\u4ee5\u521d\u59cb\u5316\u7684\u65b9\u5f0f\u4e5f\u4e0d\u540c: \u5728\u5f00\u53d1\u73af\u5883\u4e2d\uff0c\u7f16\u7801\u4eba\u5458\u9700\u8981\u63d0\u4f9b\u63d2\u4ef6\u6240\u9700\u7684\u914d\u7f6e\u6587\u4ef6, \u7528\u4e8e\u521d\u59cb\u5316\u63d2\u4ef6, \u83b7\u53d6\u63d2\u4ef6\u9700\u8981\u7684\u6570\u636e\u3002 \u5728\u751f\u4ea7\u73af\u5883\u4e2d\uff0c\u7528\u6237\u5b89\u88c5\u63d2\u4ef6\u540e, \u63d2\u4ef6\u53ef\u4ee5\u76f4\u63a5\u8bfb\u53d6\u5f53\u524d\u6d4f\u89c8\u5668\u4e2d\u7684 base \u7684\u6570\u636e, \u7528\u4e8e\u521d\u59cb\u5316\u63d2\u4ef6\u3002","title":"Init"},{"location":"plugins/base/#_1","text":"","title":"\u521d\u59cb\u5316\u63d2\u4ef6"},{"location":"plugins/base/#init_1","text":"\u5f00\u53d1\u73af\u5883\u4e0b\u521d\u59cb\u5316\u63d2\u4ef6 import DTable from 'dtable-sdk' ; const dtable = new DTable (); const settings = { \"server\" : \"https://cloud.seatable.cn\" , \"APIToken\" : \"50c17897ae8b1c7c428d459fc2c379a9bc3806cc\" , } await dtable . init ( config );","title":"init"},{"location":"plugins/base/#initbrowser","text":"\u751f\u4ea7\u73af\u5883\u4e0b\u521d\u59cb\u5316\u63d2\u4ef6 import DTable from 'dtable-sdk' ; const dtable = new Dtable (); const dtableStore = window . app . dtableStore ; // \u4ece\u96c6\u6210\u73af\u5883\u4e2d\u8bfb\u53d6\u521d\u59cb\u5316\u6570\u636e await dtable . initBrowser ( dtableStore );","title":"initBrowser"},{"location":"plugins/base/#_2","text":"","title":"\u76d1\u542c\u4e8b\u4ef6\u53d8\u5316"},{"location":"plugins/base/#subscribe","text":"\u4e8b\u4ef6\u7c7b\u578b \u63cf\u8ff0 \u7528\u9014 dtable-connect \u8868\u793a\u4e0e server \u5df2\u7ecf\u5efa\u7acb\u94fe\u63a5, \u6570\u636e\u52a0\u8f7d\u5b8c\u6210 \u66f4\u65b0 state, \u66f4\u65b0 UI \u663e\u793a local-dtable-changed \u8868\u793a\u672c\u5730\u6267\u884c\u4e86\u67d0\u4e9b\u64cd\u4f5c, \u6570\u636e\u53d1\u751f\u53d8\u5316 \u66f4\u65b0 state, \u66f4\u65b0 UI \u663e\u793a remote-dtable-changed \u8868\u793a\u672c\u5730\u6267\u884c\u4e86 server \u7aef\u53d1\u9001\u7684\u67d0\u4e9b\u64cd\u4f5c, \u6570\u636e\u53d1\u751f\u53d8\u5316 \u66f4\u65b0 state, \u66f4\u65b0 UI \u663e\u793a import DTable from 'dtable-sdk' ; const dtable = new Dtable (); dtable . subscribe ( 'dtable-connect' , () => {...}); dtable . subscribe ( 'local-dtable-changed' , () => {...}); dtable . subscribe ( 'remote-dtable-changed' , () => {...});","title":"subscribe"},{"location":"plugins/base/#_3","text":"\u7531\u4e8e\u9700\u8981\u517c\u5bb9\u4e24\u4e2a\u73af\u5883, \u6240\u4ee5\u4e00\u822c\u63d2\u4ef6\u5f00\u53d1\u7684\u521d\u59cb\u5316\u64cd\u4f5c\u5982\u4e0b: import Dtable from 'dtable-sdk' ; import PropTypes from 'prop-types' ; const propsTypes = { isDevelopment : PropTypes . bool }; const settings = { \"server\" : \"https://cloud.seatable.cn\" , \"APIToken\" : \"50c17897ae8b1c7c428d459fc2c379a9bc3806cc\" , }; class App extends React . Component { constructor ( props ) { super ( props ); this . state = { isLoading : true }; this . dtable = new Dtable (); } async componentDidMount () { const { isDevelopment } = this . props ; if ( isDevelopment ) { await dtable . init ( settings ); await this . dtable . syncWithServer (); this . dtable . subscribe ( 'dtable-connect' , this . resetData ); } else { const dtableStore = window . app . dtableStore ; dtable . initBrowser ( dtableStore ); } this . dtable . subscribe ( 'local-dtable-changed' , this . resetData ); this . dtable . subscribe ( 'remote-dtable-changed' , this . resetData ); } resetData = () => { // ... this . setState ({ isLoading : false }); } render () { return ( ... ); } }","title":"\u63d2\u4ef6\u5f00\u53d1\u521d\u59cb\u5316\u4f8b\u5b50"},{"location":"plugins/columns/","text":"Columns \u00b6 getColumns \u00b6 \u83b7\u53d6\u5b50\u8868\u6240\u6709\u7684\u5217\u5185\u5bb9 dtable . getColumns ( table ); \u5176\u4e2d table: \u5b50\u8868\u5bf9\u8c61 \u4f8b\u5b50 \u00b6 const tableId = '0000' ; const table = dtable . getTableById ( tableId ); const columns = dtable . getColumns ( table ); getShownColumns \u00b6 \u83b7\u53d6\u89c6\u56fe\u6240\u6709\u663e\u793a\u7684\u5217\u5185\u5bb9(\u4e0d\u5305\u542b\u9690\u85cf\u5217) dtable . getShownColumns ( table , view ); \u5176\u4e2d table: \u5b50\u8868\u5bf9\u8c61 view: \u5b50\u8868\u4e2d\u7684\u89c6\u56fe\u5bf9\u8c61 \u4f8b\u5b50 \u00b6 const tableId = '0000' ; const viewId = '0000' ; const table = dtable . getTableById ( tableId ); const view = dtable . getViewById ( table , viewId ); const shownColumns = dtable . getShownColumns ( table , view ); getColumnsByType \u00b6 \u83b7\u53d6\u5b50\u8868\u4e2d\u6240\u6709\u7c7b\u578b\u4e00\u6837\u7684\u5217\u5185\u5bb9 dtable . getColumnsByType ( table , type ); \u5176\u4e2d table: \u5b50\u8868\u5bf9\u8c61 type: \u83b7\u53d6\u5217\u7684\u7c7b\u578b \u4f8b\u5b50 \u00b6 import { CELL_TYPE } from 'dtable-sdk' ; const tableId = '0000' ; const table = dtable . getTableById ( tableId ); const columnType = CELL_TYPE . TEXT ; const sameTypeColumns = dtable . getColumnsByType ( table , columnType ); getColumnByName \u00b6 \u901a\u8fc7 name \u83b7\u53d6\u5217\u5185\u5bb9 dtable . getColumnByName ( table , columnName ); \u5176\u4e2d table: \u5b50\u8868\u5bf9\u8c61 columnName: \u83b7\u53d6\u5217\u7684\u540d\u5b57 \u4f8b\u5b50 \u00b6 const tableId = '0000' ; const table = dtable . getTableById ( tableId ); const columnName = 'columnName' ; const column = dtable . getColumnByName ( table , columnName ); getColumnByKey \u00b6 \u901a\u8fc7 key \u83b7\u53d6\u5217\u5185\u5bb9 dtable . getColumnByKey ( table , columnKey ); \u5176\u4e2d table: \u5b50\u8868\u5bf9\u8c61 columnKey: \u83b7\u53d6\u5217\u7684 key \u503c \u4f8b\u5b50 \u00b6 const tableId = '0000' ; const table = dtable . getTableById ( tableId ); const columnKey = '0000' ; const column = dtable . getColumnByKey ( table , columnKey ); modifyColumnData \u00b6 \u66f4\u65b0\u5217\u7684 data \u5c5e\u6027 dtable . modifyColumnData ( table , columnName , columnData ); \u5176\u4e2d table: \u5b50\u8868\u5bf9\u8c61 columnName: \u66f4\u65b0\u5217\u7684 name \u503c columnData: \u66f4\u65b0\u5217\u7684\u65b0 data \u5c5e\u6027 \u4f8b\u5b50 \u00b6 const tableId = '0000' ; const table = dtable . getTableById ( tableId ); const columnName = 'dateColumn' ; const data = { format : 'YYYY-MM-DD' }; dtable . modifyColumnData ( table , columnName , data );","title":"Columns"},{"location":"plugins/columns/#columns","text":"","title":"Columns"},{"location":"plugins/columns/#getcolumns","text":"\u83b7\u53d6\u5b50\u8868\u6240\u6709\u7684\u5217\u5185\u5bb9 dtable . getColumns ( table ); \u5176\u4e2d table: \u5b50\u8868\u5bf9\u8c61","title":"getColumns"},{"location":"plugins/columns/#_1","text":"const tableId = '0000' ; const table = dtable . getTableById ( tableId ); const columns = dtable . getColumns ( table );","title":"\u4f8b\u5b50"},{"location":"plugins/columns/#getshowncolumns","text":"\u83b7\u53d6\u89c6\u56fe\u6240\u6709\u663e\u793a\u7684\u5217\u5185\u5bb9(\u4e0d\u5305\u542b\u9690\u85cf\u5217) dtable . getShownColumns ( table , view ); \u5176\u4e2d table: \u5b50\u8868\u5bf9\u8c61 view: \u5b50\u8868\u4e2d\u7684\u89c6\u56fe\u5bf9\u8c61","title":"getShownColumns"},{"location":"plugins/columns/#_2","text":"const tableId = '0000' ; const viewId = '0000' ; const table = dtable . getTableById ( tableId ); const view = dtable . getViewById ( table , viewId ); const shownColumns = dtable . getShownColumns ( table , view );","title":"\u4f8b\u5b50"},{"location":"plugins/columns/#getcolumnsbytype","text":"\u83b7\u53d6\u5b50\u8868\u4e2d\u6240\u6709\u7c7b\u578b\u4e00\u6837\u7684\u5217\u5185\u5bb9 dtable . getColumnsByType ( table , type ); \u5176\u4e2d table: \u5b50\u8868\u5bf9\u8c61 type: \u83b7\u53d6\u5217\u7684\u7c7b\u578b","title":"getColumnsByType"},{"location":"plugins/columns/#_3","text":"import { CELL_TYPE } from 'dtable-sdk' ; const tableId = '0000' ; const table = dtable . getTableById ( tableId ); const columnType = CELL_TYPE . TEXT ; const sameTypeColumns = dtable . getColumnsByType ( table , columnType );","title":"\u4f8b\u5b50"},{"location":"plugins/columns/#getcolumnbyname","text":"\u901a\u8fc7 name \u83b7\u53d6\u5217\u5185\u5bb9 dtable . getColumnByName ( table , columnName ); \u5176\u4e2d table: \u5b50\u8868\u5bf9\u8c61 columnName: \u83b7\u53d6\u5217\u7684\u540d\u5b57","title":"getColumnByName"},{"location":"plugins/columns/#_4","text":"const tableId = '0000' ; const table = dtable . getTableById ( tableId ); const columnName = 'columnName' ; const column = dtable . getColumnByName ( table , columnName );","title":"\u4f8b\u5b50"},{"location":"plugins/columns/#getcolumnbykey","text":"\u901a\u8fc7 key \u83b7\u53d6\u5217\u5185\u5bb9 dtable . getColumnByKey ( table , columnKey ); \u5176\u4e2d table: \u5b50\u8868\u5bf9\u8c61 columnKey: \u83b7\u53d6\u5217\u7684 key \u503c","title":"getColumnByKey"},{"location":"plugins/columns/#_5","text":"const tableId = '0000' ; const table = dtable . getTableById ( tableId ); const columnKey = '0000' ; const column = dtable . getColumnByKey ( table , columnKey );","title":"\u4f8b\u5b50"},{"location":"plugins/columns/#modifycolumndata","text":"\u66f4\u65b0\u5217\u7684 data \u5c5e\u6027 dtable . modifyColumnData ( table , columnName , columnData ); \u5176\u4e2d table: \u5b50\u8868\u5bf9\u8c61 columnName: \u66f4\u65b0\u5217\u7684 name \u503c columnData: \u66f4\u65b0\u5217\u7684\u65b0 data \u5c5e\u6027","title":"modifyColumnData"},{"location":"plugins/columns/#_6","text":"const tableId = '0000' ; const table = dtable . getTableById ( tableId ); const columnName = 'dateColumn' ; const data = { format : 'YYYY-MM-DD' }; dtable . modifyColumnData ( table , columnName , data );","title":"\u4f8b\u5b50"},{"location":"plugins/common/","text":"Common api \u00b6 getRelatedUsers \u00b6 \u83b7\u53d6\u5f53\u524d base \u5173\u8054\u7684\u5176\u4ed6\u7528\u6237(\u8868\u683c\u7684\u534f\u4f5c\u4eba, \u8868\u7684\u88ab\u5206\u4eab\u4eba\u7b49) dtable . getRelatedUsers () \u4f8b\u5b50 const collaborators = dtable . getRelatedUsers (); getCollaboratorsName \u00b6 \u83b7\u53d6\u534f\u4f5c\u8005\u7684\u540d\u5b57\u5217\u8868 dtable . getCollaboratorsName ( collaborators , value ) \u5176\u4e2d collaborators: base \u534f\u4f5c\u4eba\u5217\u8868 value: \u534f\u4f5c\u8005\u5217\u7684\u90ae\u7bb1\u5217\u8868 \u4f8b\u5b50 const collaborators = dtable . getRelatedUsers (); const value = [ 'abc@seafile.com' , 'shun@seafile.com' ]; const name = dtable . getCollaboratorsName ( collaborators , value ); // 'abc, shun' getTableFormulaResults \u00b6 \u83b7\u53d6\u5b50\u8868\u8ba1\u7b97\u516c\u5f0f\u5217\u7684\u6570\u636e dtable . getTableFormulaResults ( table , rows ) \u5176\u4e2d table: \u5b50\u8868\u5bf9\u8c61 rows: \u9700\u8981\u83b7\u53d6 \u8ba1\u7b97\u516c\u5f0f\u5217\u76f8\u5173\u6570\u636e\u7684\u884c\u6570\u636e \u4f8b\u5b50 const tableName = 'tableName' ; const viewName = 'viewName' ; const table = dtable . getTableByName ( tableName ); const view = dtable . getViewByName ( table , viewName ); const rows = dtable . getViewRows (); const formulaResult = dtable . getTableFormulaResults ( table , rows ); getViewRowsColor \u00b6 \u83b7\u53d6\u89c6\u56fe\u4e2d\u884c\u6570\u636e\u7684\u989c\u8272\u5c5e\u6027 dtable . getViewRowsColor ( rows , view , table ) \u5176\u4e2d rows: \u9700\u8981\u83b7\u53d6 \u989c\u8272\u5c5e\u6027 \u7684\u884c\u6570\u636e view: \u89c6\u56fe\u5bf9\u8c61 table: \u5b50\u8868\u5bf9\u8c61 \u4f8b\u5b50 const tableName = 'tableName' ; const viewName = 'viewName' ; const table = dtable . getTableByName ( tableName ); const view = dtable . getViewByName ( table , viewName ); const rows = dtable . getViewRows (); const rowsColor = dtable . getViewRowsColor ( rows , view , table ); getLinkCellValue \u00b6 \u83b7\u53d6\u5b50\u8868\u884c\u6570\u636e\u5173\u8054\u5176\u4ed6\u8868\u683c\u7684\u884c\u6570\u636e\u7684 id \u5217\u8868 dtable . getLinkCellValue ( linkId , tableId , otherTableId , rowId ) \u5176\u4e2d linkId: link \u5217\u5bf9\u5e94\u7684 link_id \u503c tableId: \u5f53\u524d\u8868\u683c\u7684 id \u503c otherTableId: \u5173\u8054\u8868\u683c\u7684 id \u503c rowId: \u5f53\u524d\u8868\u683c\u4e2d\u884c\u7684 id \u503c \u4f8b\u5b50 const tableName = 'tableName' ; const table = dtable . getTableByName ( tableName ); const rows = table . rows ; const row = rows [ 0 ]; const columnName = 'linkColumn' ; const linkColumn = dtable . getColumnByName ( table , columnName ); const { link_id , table_id , other_table_id , display_column_key } = linkColumn . data ; const linkedTaleId = table . _id === table_id ? other_table_id : table_id ; const linkedRowIds = dtable . getLinkCellValue ( link_id , table . _id , linkedTableId , row . _id ); getLinkDisplayString \u00b6 \u83b7\u53d6 link \u5217\u5173\u8054\u884c\u7684\u5185\u5bb9\u503c dtable . getLinkDisplayString ( linkedRowIds , linkedTable , displayColumnKey ) \u5176\u4e2d linkedRowIds: \u5173\u8054\u7684\u884c\u5217\u8868 linkedTable: \u5173\u8054\u7684\u5b50\u8868\u5bf9\u8c61 displayColumnKey: \u5173\u8054\u7684\u5217\u5bf9\u8c61 \u4f8b\u5b50 const tableName = 'tableName' ; const table = dtable . getTableByName ( tableName ); const rows = table . rows ; const row = rows [ 0 ]; const columnName = 'linkColumn' ; const linkColumn = dtable . getColumnByName ( table , columnName ); const { link_id , table_id , other_table_id , display_column_key } = linkColumn . data ; const linkedTaleId = table . _id === table_id ? other_table_id : table_id ; const linkedRowIds = dtable . getLinkCellValue ( link_id , table . _id , linkedTableId , row . _id ); const linkedTable = dtable . getTableById ( linkedTableId ); const results = dtable . getLinkDisplayString ( linkedRowIds , linkedTable , display_column_key ); getNumberDisplayString \u00b6 \u83b7\u53d6 number \u5217\u7684\u5b57\u7b26\u4e32\u663e\u793a(\u6309\u7167\u4e0d\u540c\u7684format\u8fd4\u56de\u7528\u6237\u6570\u636e) dtable . getNumberDisplayString ( value , columnData ) \u5176\u4e2d value: number \u7c7b\u578b\u5217\u5bf9\u5e94\u7684 value \u503c columnData: number \u7c7b\u578b\u5217 \u5bf9\u5e94\u7684 column \u7684 data \u914d\u7f6e\u5c5e\u6027 \u4f8b\u5b50 const tableName = 'tableName' ; const table = dtable . getTableByName ( tableName ); const columnName = 'dateColumn' ; const column = dtable . getColumnByName ( table , columnName ); const value = 190203 ; const name = dtable . getNumberDisplayString ( value , column . data ); getGeolocationDisplayString \u00b6 \u83b7\u53d6 geolocation \u5217\u7684\u5b57\u7b26\u4e32\u663e\u793a(\u6309\u7167\u4e0d\u540c\u7684\u914d\u7f6e\u53c2\u6570\u8fd4\u56de\u7528\u6237\u6570\u636e) dtable . getGeolocationDisplayString ( value , columnData ) \u5176\u4e2d value: geolocation \u7c7b\u578b\u5217\u5bf9\u5e94\u7684 value \u503c columnData: geolocation \u7c7b\u578b\u5217 \u5bf9\u5e94\u7684 column \u7684 data \u914d\u7f6e\u5c5e\u6027 \u4f8b\u5b50 const tableName = 'tableName' ; const table = dtable . getTableByName ( tableName ); const columnName = 'dateColumn' ; const column = dtable . getColumnByName ( table , columnName ); const value = { city : \"\u5b89\u5e86\u5e02\" , detail : \"nide\" , district : \"\u8fce\u6c5f\u533a\" , province : \"\u5b89\u5fbd\u7701\" }; const name = dtable . getGeolocationDisplayString ( value , column . data ); getDurationDisplayString \u00b6 \u83b7\u53d6 duration \u5217\u7684\u5b57\u7b26\u4e32\u663e\u793a(\u6309\u7167\u4e0d\u540c\u7684\u914d\u7f6e\u53c2\u6570\u8fd4\u56de\u7528\u6237\u6570\u636e) dtable . getDurationDisplayString ( value , columnData ) \u5176\u4e2d value: duration \u7c7b\u578b\u5217\u5bf9\u5e94\u7684 value \u503c columnData: duration \u7c7b\u578b\u5217 \u5bf9\u5e94\u7684 column \u7684 data \u914d\u7f6e\u5c5e\u6027 \u4f8b\u5b50 const tableName = 'tableName' ; const table = dtable . getTableByName ( tableName ); const columnName = 'dateColumn' ; const column = dtable . getColumnByName ( table , columnName ); const value = '12:30' ; const name = dtable . getDurationDisplayString ( value , column . data ); getDateDisplayString \u00b6 \u83b7\u53d6 date \u5217\u7684\u5b57\u7b26\u4e32\u663e\u793a(\u6309\u7167\u4e0d\u540c\u7684\u914d\u7f6e\u53c2\u6570\u8fd4\u56de\u7528\u6237\u6570\u636e) dtable . getDateDisplayString ( value , columnData ) \u5176\u4e2d value: date \u7c7b\u578b\u5217\u5bf9\u5e94\u7684 value \u503c columnData: date \u7c7b\u578b\u5217 \u5bf9\u5e94\u7684 column \u7684 data \u914d\u7f6e\u5c5e\u6027 \u4f8b\u5b50 const tableName = 'tableName' ; const table = dtable . getTableByName ( tableName ); const columnName = 'dateColumn' ; const column = dtable . getColumnByName ( table , columnName ); const value = 'YYYY-MM-DD' ; const name = dtable . getDateDisplayString ( value , column . data );","title":"Common"},{"location":"plugins/common/#common-api","text":"","title":"Common api"},{"location":"plugins/common/#getrelatedusers","text":"\u83b7\u53d6\u5f53\u524d base \u5173\u8054\u7684\u5176\u4ed6\u7528\u6237(\u8868\u683c\u7684\u534f\u4f5c\u4eba, \u8868\u7684\u88ab\u5206\u4eab\u4eba\u7b49) dtable . getRelatedUsers () \u4f8b\u5b50 const collaborators = dtable . getRelatedUsers ();","title":"getRelatedUsers"},{"location":"plugins/common/#getcollaboratorsname","text":"\u83b7\u53d6\u534f\u4f5c\u8005\u7684\u540d\u5b57\u5217\u8868 dtable . getCollaboratorsName ( collaborators , value ) \u5176\u4e2d collaborators: base \u534f\u4f5c\u4eba\u5217\u8868 value: \u534f\u4f5c\u8005\u5217\u7684\u90ae\u7bb1\u5217\u8868 \u4f8b\u5b50 const collaborators = dtable . getRelatedUsers (); const value = [ 'abc@seafile.com' , 'shun@seafile.com' ]; const name = dtable . getCollaboratorsName ( collaborators , value ); // 'abc, shun'","title":"getCollaboratorsName"},{"location":"plugins/common/#gettableformularesults","text":"\u83b7\u53d6\u5b50\u8868\u8ba1\u7b97\u516c\u5f0f\u5217\u7684\u6570\u636e dtable . getTableFormulaResults ( table , rows ) \u5176\u4e2d table: \u5b50\u8868\u5bf9\u8c61 rows: \u9700\u8981\u83b7\u53d6 \u8ba1\u7b97\u516c\u5f0f\u5217\u76f8\u5173\u6570\u636e\u7684\u884c\u6570\u636e \u4f8b\u5b50 const tableName = 'tableName' ; const viewName = 'viewName' ; const table = dtable . getTableByName ( tableName ); const view = dtable . getViewByName ( table , viewName ); const rows = dtable . getViewRows (); const formulaResult = dtable . getTableFormulaResults ( table , rows );","title":"getTableFormulaResults"},{"location":"plugins/common/#getviewrowscolor","text":"\u83b7\u53d6\u89c6\u56fe\u4e2d\u884c\u6570\u636e\u7684\u989c\u8272\u5c5e\u6027 dtable . getViewRowsColor ( rows , view , table ) \u5176\u4e2d rows: \u9700\u8981\u83b7\u53d6 \u989c\u8272\u5c5e\u6027 \u7684\u884c\u6570\u636e view: \u89c6\u56fe\u5bf9\u8c61 table: \u5b50\u8868\u5bf9\u8c61 \u4f8b\u5b50 const tableName = 'tableName' ; const viewName = 'viewName' ; const table = dtable . getTableByName ( tableName ); const view = dtable . getViewByName ( table , viewName ); const rows = dtable . getViewRows (); const rowsColor = dtable . getViewRowsColor ( rows , view , table );","title":"getViewRowsColor"},{"location":"plugins/common/#getlinkcellvalue","text":"\u83b7\u53d6\u5b50\u8868\u884c\u6570\u636e\u5173\u8054\u5176\u4ed6\u8868\u683c\u7684\u884c\u6570\u636e\u7684 id \u5217\u8868 dtable . getLinkCellValue ( linkId , tableId , otherTableId , rowId ) \u5176\u4e2d linkId: link \u5217\u5bf9\u5e94\u7684 link_id \u503c tableId: \u5f53\u524d\u8868\u683c\u7684 id \u503c otherTableId: \u5173\u8054\u8868\u683c\u7684 id \u503c rowId: \u5f53\u524d\u8868\u683c\u4e2d\u884c\u7684 id \u503c \u4f8b\u5b50 const tableName = 'tableName' ; const table = dtable . getTableByName ( tableName ); const rows = table . rows ; const row = rows [ 0 ]; const columnName = 'linkColumn' ; const linkColumn = dtable . getColumnByName ( table , columnName ); const { link_id , table_id , other_table_id , display_column_key } = linkColumn . data ; const linkedTaleId = table . _id === table_id ? other_table_id : table_id ; const linkedRowIds = dtable . getLinkCellValue ( link_id , table . _id , linkedTableId , row . _id );","title":"getLinkCellValue"},{"location":"plugins/common/#getlinkdisplaystring","text":"\u83b7\u53d6 link \u5217\u5173\u8054\u884c\u7684\u5185\u5bb9\u503c dtable . getLinkDisplayString ( linkedRowIds , linkedTable , displayColumnKey ) \u5176\u4e2d linkedRowIds: \u5173\u8054\u7684\u884c\u5217\u8868 linkedTable: \u5173\u8054\u7684\u5b50\u8868\u5bf9\u8c61 displayColumnKey: \u5173\u8054\u7684\u5217\u5bf9\u8c61 \u4f8b\u5b50 const tableName = 'tableName' ; const table = dtable . getTableByName ( tableName ); const rows = table . rows ; const row = rows [ 0 ]; const columnName = 'linkColumn' ; const linkColumn = dtable . getColumnByName ( table , columnName ); const { link_id , table_id , other_table_id , display_column_key } = linkColumn . data ; const linkedTaleId = table . _id === table_id ? other_table_id : table_id ; const linkedRowIds = dtable . getLinkCellValue ( link_id , table . _id , linkedTableId , row . _id ); const linkedTable = dtable . getTableById ( linkedTableId ); const results = dtable . getLinkDisplayString ( linkedRowIds , linkedTable , display_column_key );","title":"getLinkDisplayString"},{"location":"plugins/common/#getnumberdisplaystring","text":"\u83b7\u53d6 number \u5217\u7684\u5b57\u7b26\u4e32\u663e\u793a(\u6309\u7167\u4e0d\u540c\u7684format\u8fd4\u56de\u7528\u6237\u6570\u636e) dtable . getNumberDisplayString ( value , columnData ) \u5176\u4e2d value: number \u7c7b\u578b\u5217\u5bf9\u5e94\u7684 value \u503c columnData: number \u7c7b\u578b\u5217 \u5bf9\u5e94\u7684 column \u7684 data \u914d\u7f6e\u5c5e\u6027 \u4f8b\u5b50 const tableName = 'tableName' ; const table = dtable . getTableByName ( tableName ); const columnName = 'dateColumn' ; const column = dtable . getColumnByName ( table , columnName ); const value = 190203 ; const name = dtable . getNumberDisplayString ( value , column . data );","title":"getNumberDisplayString"},{"location":"plugins/common/#getgeolocationdisplaystring","text":"\u83b7\u53d6 geolocation \u5217\u7684\u5b57\u7b26\u4e32\u663e\u793a(\u6309\u7167\u4e0d\u540c\u7684\u914d\u7f6e\u53c2\u6570\u8fd4\u56de\u7528\u6237\u6570\u636e) dtable . getGeolocationDisplayString ( value , columnData ) \u5176\u4e2d value: geolocation \u7c7b\u578b\u5217\u5bf9\u5e94\u7684 value \u503c columnData: geolocation \u7c7b\u578b\u5217 \u5bf9\u5e94\u7684 column \u7684 data \u914d\u7f6e\u5c5e\u6027 \u4f8b\u5b50 const tableName = 'tableName' ; const table = dtable . getTableByName ( tableName ); const columnName = 'dateColumn' ; const column = dtable . getColumnByName ( table , columnName ); const value = { city : \"\u5b89\u5e86\u5e02\" , detail : \"nide\" , district : \"\u8fce\u6c5f\u533a\" , province : \"\u5b89\u5fbd\u7701\" }; const name = dtable . getGeolocationDisplayString ( value , column . data );","title":"getGeolocationDisplayString"},{"location":"plugins/common/#getdurationdisplaystring","text":"\u83b7\u53d6 duration \u5217\u7684\u5b57\u7b26\u4e32\u663e\u793a(\u6309\u7167\u4e0d\u540c\u7684\u914d\u7f6e\u53c2\u6570\u8fd4\u56de\u7528\u6237\u6570\u636e) dtable . getDurationDisplayString ( value , columnData ) \u5176\u4e2d value: duration \u7c7b\u578b\u5217\u5bf9\u5e94\u7684 value \u503c columnData: duration \u7c7b\u578b\u5217 \u5bf9\u5e94\u7684 column \u7684 data \u914d\u7f6e\u5c5e\u6027 \u4f8b\u5b50 const tableName = 'tableName' ; const table = dtable . getTableByName ( tableName ); const columnName = 'dateColumn' ; const column = dtable . getColumnByName ( table , columnName ); const value = '12:30' ; const name = dtable . getDurationDisplayString ( value , column . data );","title":"getDurationDisplayString"},{"location":"plugins/common/#getdatedisplaystring","text":"\u83b7\u53d6 date \u5217\u7684\u5b57\u7b26\u4e32\u663e\u793a(\u6309\u7167\u4e0d\u540c\u7684\u914d\u7f6e\u53c2\u6570\u8fd4\u56de\u7528\u6237\u6570\u636e) dtable . getDateDisplayString ( value , columnData ) \u5176\u4e2d value: date \u7c7b\u578b\u5217\u5bf9\u5e94\u7684 value \u503c columnData: date \u7c7b\u578b\u5217 \u5bf9\u5e94\u7684 column \u7684 data \u914d\u7f6e\u5c5e\u6027 \u4f8b\u5b50 const tableName = 'tableName' ; const table = dtable . getTableByName ( tableName ); const columnName = 'dateColumn' ; const column = dtable . getColumnByName ( table , columnName ); const value = 'YYYY-MM-DD' ; const name = dtable . getDateDisplayString ( value , column . data );","title":"getDateDisplayString"},{"location":"plugins/constants/","text":"Constants \u00b6 \u5728\u811a\u672c\u4e2d\u53ef\u80fd\u4f1a\u6709\u4e00\u4e9b\u5e38\u91cf\u9700\u8981\u6211\u4eec\u4e86\u89e3\u4e0b ColumnTypes \u00b6 \u5217\u7c7b\u578b\uff0c\u5f53\u63d2\u5165/\u8ffd\u52a0\u5217\u3001\u66f4\u6539\u5217\u7c7b\u578b, \u83b7\u53d6 formatter \u7b49\u60c5\u51b5\u9700\u8981\u4f7f\u7528\u5230 import { CELL_TYPE } from 'dtable-sdk' ; CELL_TYPE . NUMBER // \u6570\u5b57 CELL_TYPE . TEXT // \u6587\u672c CELL_TYPE . LONG_TEXT // \u957f\u6587\u672c CELL_TYPE . CHECKBOX // \u52fe\u9009 CELL_TYPE . DATE // \u65e5\u671f\u65f6\u95f4 CELL_TYPE . SINGLE_SELECT // \u5355\u9009 CELL_TYPE . MULTIPLE_SELECT // \u591a\u9009 CELL_TYPE . IMAGE // \u56fe\u7247 CELL_TYPE . FILE // \u6587\u4ef6 CELL_TYPE . COLLABORATOR // \u534f\u4f5c\u4eba CELL_TYPE . LINK // \u94fe\u63a5\u5176\u4ed6\u8bb0\u5f55 CELL_TYPE . FORMULA // \u516c\u5f0f CELL_TYPE . LINK_FORMULA // \u94fe\u63a5\u516c\u5f0f CELL_TYPE . CREATOR // \u521b\u5efa\u8005 CELL_TYPE . CTIME // \u521b\u5efa\u65f6\u95f4 CELL_TYPE . LAST_MODIFIER // \u4fee\u6539\u8005 CELL_TYPE . MTIME // \u4fee\u6539\u65f6\u95f4 CELL_TYPE . GEOLOCATION // \u5730\u5740 CELL_TYPE . AUTO_NUMBER // \u81ea\u52a8\u5e8f\u53f7 CELL_TYPE . URL // \u94fe\u63a5 CELL_TYPE . EMAIL // \u90ae\u7bb1 CELL_TYPE . BUTTON // \u6309\u94ae CELL_TYPE . RATE // \u7b49\u7ea7 Column icon configs \u00b6 \u5217\u7c7b\u578b\u5bf9\u5e94\u7684\u56fe\u6807\u914d\u7f6e\u4fe1\u606f import { CELL_TYPE , COLUMNS_ICON_CONFIG } from 'dtable-store' ; const text = CELL_TYPE . TEXT ; // value: 'dtable-font dtable-icon-single-line-text' const textIconClass = COLUMNS_ICON_CONFIG [ text ]; const single_select = CELL_TYPE . SINGLE_SELECT ; // value: 'dtable-font dtable-icon-single-election' const singleSelectIconClass = COLUMNS_ICON_CONFIG [ single_select ]; ... // \u6ce8: iconClass \u7528\u6765\u663e\u793a\u5217\u7684\u56fe\u6807(\u9700\u8981\u5f15\u5165dtable-font) Column options \u00b6 \u5217\u7684\u57fa\u672c\u914d\u7f6e\u4fe1\u606f, \u83b7\u53d6\u5217\u7684 icon \u914d\u7f6e\u548c\u4e0d\u540c\u5217\u7c7b\u578b\u7684\u63d0\u793a\u4fe1\u606f\u65f6\u9700\u8981\u4f7f\u7528\u5230 import { CELL_TYPE , COLUMN_OPTIONS } from 'dtable-sdk' ; const text = CELL_TYPE . TEXT ; // textOption : // { // type: 'text', // iconClass: 'dtable-font dtable-icon-single-line-text' // iconName: 'Text' // } const textOption = COLUMN_OPTIONS . find ( option => option . type === text ); const singleSelect = CELL_TYPE . SINGLE_SELECT ; // singleSelectOption : // { // type: 'single-select', // iconClass: 'dtable-font dtable-icon-single-election' // iconName: 'Single_Select' // } const singleSelectOption = COLUMN_OPTIONS . find ( option => option . type === singleSelect ); ... // \u6ce8: iconClass \u7528\u6765\u663e\u793a\u5217\u7684\u56fe\u6807(\u9700\u8981\u5f15\u5165dtable-font) // iconName \u53ef\u4ee5\u7528\u6765\u56fd\u9645\u5316, \u663e\u793a\u63d0\u793a\u4fe1\u606f\u6216\u6587\u672c\u4fe1\u606f Formula result type \u00b6 \u516c\u5f0f\u5217, \u94fe\u63a5\u516c\u5f0f\u5217\u8ba1\u7b97\u7ed3\u679c\u7c7b\u578b\u6c47\u603b, \u7528\u4e8e\u786e\u5b9a\u4e0e\u8ba1\u7b97\u6709\u5173\u7684\u5217\u7c7b\u578b\u7684\u8ba1\u7b97\u7ed3\u679c import { FORMULA_RESULT_TYPE } from 'dtable-sdk' ; FORMULA_RESULT_TYPE . NUMBER // number FORMULA_RESULT_TYPE . STRING // string FORMULA_RESULT_TYPE . DATE // date FORMULA_RESULT_TYPE . BOOL // bool FORMULA_RESULT_TYPE . ARRAY // array Select option colors \u00b6 \u521b\u5efa, \u4fee\u6539\u5355\u9009\u5217/\u591a\u9009\u5217\u9009\u9879\u65f6, \u63d0\u4f9b\u9009\u9879\u7684\u6587\u672c\u989c\u8272, \u80cc\u666f\u989c\u8272, \u8fb9\u6846\u989c\u8272 import { SELECT_OPTION_COLORS } from 'dtable-sdk' ; // const SELECT_OPTION_COLORS = [ // {COLOR: '#FFFCB5', BORDER_COLOR: '#E8E79D', TEXT_COLOR: '#202428'}, // {COLOR: '#FFEAB6', BORDER_COLOR: '#ECD084', TEXT_COLOR: '#202428'}, // {COLOR: '#FFD9C8', BORDER_COLOR: '#EFBAA3', TEXT_COLOR: '#202428'}, // {COLOR: '#FFDDE5', BORDER_COLOR: '#EDC4C1', TEXT_COLOR: '#202428'}, // {COLOR: '#FFD4FF', BORDER_COLOR: '#E6B6E6', TEXT_COLOR: '#202428'}, // {COLOR: '#DAD7FF', BORDER_COLOR: '#C3BEEF', TEXT_COLOR: '#202428'}, // {COLOR: '#DDFFE6', BORDER_COLOR: '#BBEBCD', TEXT_COLOR: '#202428'}, // {COLOR: '#DEF7C4', BORDER_COLOR: '#C5EB9E', TEXT_COLOR: '#202428'}, // {COLOR: '#D8FAFF', BORDER_COLOR: '#B4E4E9', TEXT_COLOR: '#202428'}, // {COLOR: '#D7E8FF', BORDER_COLOR: '#BAD1E9', TEXT_COLOR: '#202428'}, // {COLOR: '#B7CEF9', BORDER_COLOR: '#96B2E1', TEXT_COLOR: '#202428'}, // {COLOR: '#E9E9E9', BORDER_COLOR: '#DADADA', TEXT_COLOR: '#202428'}, // {COLOR: '#FBD44A', BORDER_COLOR: '#E5C142', TEXT_COLOR: '#FFFFFF'}, // {COLOR: '#EAA775', BORDER_COLOR: '#D59361', TEXT_COLOR: '#FFFFFF'}, // {COLOR: '#F4667C', BORDER_COLOR: '#DC556A', TEXT_COLOR: '#FFFFFF'}, // {COLOR: '#DC82D2', BORDER_COLOR: '#D166C5', TEXT_COLOR: '#FFFFFF'}, // {COLOR: '#9860E5', BORDER_COLOR: '#844BD2', TEXT_COLOR: '#FFFFFF'}, // {COLOR: '#9F8CF1', BORDER_COLOR: '#8F75E2', TEXT_COLOR: '#FFFFFF'}, // {COLOR: '#59CB74', BORDER_COLOR: '#4EB867', TEXT_COLOR: '#FFFFFF'}, // {COLOR: '#ADDF84', BORDER_COLOR: '#9CCF72', TEXT_COLOR: '#FFFFFF'}, // {COLOR: '#89D2EA', BORDER_COLOR: '#7BC0D6', TEXT_COLOR: '#FFFFFF'}, // {COLOR: '#4ECCCB', BORDER_COLOR: '#45BAB9', TEXT_COLOR: '#FFFFFF'}, // {COLOR: '#46A1FD', BORDER_COLOR: '#3C8FE4', TEXT_COLOR: '#FFFFFF'}, // {COLOR: '#C2C2C2', BORDER_COLOR: '#ADADAD', TEXT_COLOR: '#FFFFFF'}, // ]; // \u521b\u5efa\u9009\u9879\u65f6, \u53ef\u4ee5\u63d0\u4f9b\u76f8\u5173\u9009\u9879, \u4e5f\u53ef\u4ee5\u901a\u8fc7\u968f\u673a\u51fd\u6570, \u81ea\u52a8\u751f\u6210\u76f8\u5e94\u7684\u9009\u9879\u989c\u8272 const colorIndex = ( Math . random () * SELECT_OPTION_COLORS . length ). toFix ( 0 ); const selectColor = SELECT_OPTION_COLORS [ colorIndex ]; Table permission type \u00b6 \u5b50\u8868\u7684\u6743\u9650\u7c7b\u578b import { TABLE_PERMISSION_TYPE } from 'dtable-sdk' ; TABLE_PERMISSION_TYPE . DEFAULT // default \u9ed8\u8ba4\u6743\u9650 TABLE_PERMISSION_TYPE . ADMINS // admins \u6709\u7ba1\u7406\u6743\u9650\u7684\u4eba TABLE_PERMISSION_TYPE . SPECIFIC_USERS // specific_users \u7279\u5b9a\u7528\u6237 TABLE_PERMISSION_TYPE . NONE // none \u8c01\u90fd\u4e0d\u80fd\u66f4\u6539","title":"Constants"},{"location":"plugins/constants/#constants","text":"\u5728\u811a\u672c\u4e2d\u53ef\u80fd\u4f1a\u6709\u4e00\u4e9b\u5e38\u91cf\u9700\u8981\u6211\u4eec\u4e86\u89e3\u4e0b","title":"Constants"},{"location":"plugins/constants/#columntypes","text":"\u5217\u7c7b\u578b\uff0c\u5f53\u63d2\u5165/\u8ffd\u52a0\u5217\u3001\u66f4\u6539\u5217\u7c7b\u578b, \u83b7\u53d6 formatter \u7b49\u60c5\u51b5\u9700\u8981\u4f7f\u7528\u5230 import { CELL_TYPE } from 'dtable-sdk' ; CELL_TYPE . NUMBER // \u6570\u5b57 CELL_TYPE . TEXT // \u6587\u672c CELL_TYPE . LONG_TEXT // \u957f\u6587\u672c CELL_TYPE . CHECKBOX // \u52fe\u9009 CELL_TYPE . DATE // \u65e5\u671f\u65f6\u95f4 CELL_TYPE . SINGLE_SELECT // \u5355\u9009 CELL_TYPE . MULTIPLE_SELECT // \u591a\u9009 CELL_TYPE . IMAGE // \u56fe\u7247 CELL_TYPE . FILE // \u6587\u4ef6 CELL_TYPE . COLLABORATOR // \u534f\u4f5c\u4eba CELL_TYPE . LINK // \u94fe\u63a5\u5176\u4ed6\u8bb0\u5f55 CELL_TYPE . FORMULA // \u516c\u5f0f CELL_TYPE . LINK_FORMULA // \u94fe\u63a5\u516c\u5f0f CELL_TYPE . CREATOR // \u521b\u5efa\u8005 CELL_TYPE . CTIME // \u521b\u5efa\u65f6\u95f4 CELL_TYPE . LAST_MODIFIER // \u4fee\u6539\u8005 CELL_TYPE . MTIME // \u4fee\u6539\u65f6\u95f4 CELL_TYPE . GEOLOCATION // \u5730\u5740 CELL_TYPE . AUTO_NUMBER // \u81ea\u52a8\u5e8f\u53f7 CELL_TYPE . URL // \u94fe\u63a5 CELL_TYPE . EMAIL // \u90ae\u7bb1 CELL_TYPE . BUTTON // \u6309\u94ae CELL_TYPE . RATE // \u7b49\u7ea7","title":"ColumnTypes"},{"location":"plugins/constants/#column-icon-configs","text":"\u5217\u7c7b\u578b\u5bf9\u5e94\u7684\u56fe\u6807\u914d\u7f6e\u4fe1\u606f import { CELL_TYPE , COLUMNS_ICON_CONFIG } from 'dtable-store' ; const text = CELL_TYPE . TEXT ; // value: 'dtable-font dtable-icon-single-line-text' const textIconClass = COLUMNS_ICON_CONFIG [ text ]; const single_select = CELL_TYPE . SINGLE_SELECT ; // value: 'dtable-font dtable-icon-single-election' const singleSelectIconClass = COLUMNS_ICON_CONFIG [ single_select ]; ... // \u6ce8: iconClass \u7528\u6765\u663e\u793a\u5217\u7684\u56fe\u6807(\u9700\u8981\u5f15\u5165dtable-font)","title":"Column icon configs"},{"location":"plugins/constants/#column-options","text":"\u5217\u7684\u57fa\u672c\u914d\u7f6e\u4fe1\u606f, \u83b7\u53d6\u5217\u7684 icon \u914d\u7f6e\u548c\u4e0d\u540c\u5217\u7c7b\u578b\u7684\u63d0\u793a\u4fe1\u606f\u65f6\u9700\u8981\u4f7f\u7528\u5230 import { CELL_TYPE , COLUMN_OPTIONS } from 'dtable-sdk' ; const text = CELL_TYPE . TEXT ; // textOption : // { // type: 'text', // iconClass: 'dtable-font dtable-icon-single-line-text' // iconName: 'Text' // } const textOption = COLUMN_OPTIONS . find ( option => option . type === text ); const singleSelect = CELL_TYPE . SINGLE_SELECT ; // singleSelectOption : // { // type: 'single-select', // iconClass: 'dtable-font dtable-icon-single-election' // iconName: 'Single_Select' // } const singleSelectOption = COLUMN_OPTIONS . find ( option => option . type === singleSelect ); ... // \u6ce8: iconClass \u7528\u6765\u663e\u793a\u5217\u7684\u56fe\u6807(\u9700\u8981\u5f15\u5165dtable-font) // iconName \u53ef\u4ee5\u7528\u6765\u56fd\u9645\u5316, \u663e\u793a\u63d0\u793a\u4fe1\u606f\u6216\u6587\u672c\u4fe1\u606f","title":"Column options"},{"location":"plugins/constants/#formula-result-type","text":"\u516c\u5f0f\u5217, \u94fe\u63a5\u516c\u5f0f\u5217\u8ba1\u7b97\u7ed3\u679c\u7c7b\u578b\u6c47\u603b, \u7528\u4e8e\u786e\u5b9a\u4e0e\u8ba1\u7b97\u6709\u5173\u7684\u5217\u7c7b\u578b\u7684\u8ba1\u7b97\u7ed3\u679c import { FORMULA_RESULT_TYPE } from 'dtable-sdk' ; FORMULA_RESULT_TYPE . NUMBER // number FORMULA_RESULT_TYPE . STRING // string FORMULA_RESULT_TYPE . DATE // date FORMULA_RESULT_TYPE . BOOL // bool FORMULA_RESULT_TYPE . ARRAY // array","title":"Formula result type"},{"location":"plugins/constants/#select-option-colors","text":"\u521b\u5efa, \u4fee\u6539\u5355\u9009\u5217/\u591a\u9009\u5217\u9009\u9879\u65f6, \u63d0\u4f9b\u9009\u9879\u7684\u6587\u672c\u989c\u8272, \u80cc\u666f\u989c\u8272, \u8fb9\u6846\u989c\u8272 import { SELECT_OPTION_COLORS } from 'dtable-sdk' ; // const SELECT_OPTION_COLORS = [ // {COLOR: '#FFFCB5', BORDER_COLOR: '#E8E79D', TEXT_COLOR: '#202428'}, // {COLOR: '#FFEAB6', BORDER_COLOR: '#ECD084', TEXT_COLOR: '#202428'}, // {COLOR: '#FFD9C8', BORDER_COLOR: '#EFBAA3', TEXT_COLOR: '#202428'}, // {COLOR: '#FFDDE5', BORDER_COLOR: '#EDC4C1', TEXT_COLOR: '#202428'}, // {COLOR: '#FFD4FF', BORDER_COLOR: '#E6B6E6', TEXT_COLOR: '#202428'}, // {COLOR: '#DAD7FF', BORDER_COLOR: '#C3BEEF', TEXT_COLOR: '#202428'}, // {COLOR: '#DDFFE6', BORDER_COLOR: '#BBEBCD', TEXT_COLOR: '#202428'}, // {COLOR: '#DEF7C4', BORDER_COLOR: '#C5EB9E', TEXT_COLOR: '#202428'}, // {COLOR: '#D8FAFF', BORDER_COLOR: '#B4E4E9', TEXT_COLOR: '#202428'}, // {COLOR: '#D7E8FF', BORDER_COLOR: '#BAD1E9', TEXT_COLOR: '#202428'}, // {COLOR: '#B7CEF9', BORDER_COLOR: '#96B2E1', TEXT_COLOR: '#202428'}, // {COLOR: '#E9E9E9', BORDER_COLOR: '#DADADA', TEXT_COLOR: '#202428'}, // {COLOR: '#FBD44A', BORDER_COLOR: '#E5C142', TEXT_COLOR: '#FFFFFF'}, // {COLOR: '#EAA775', BORDER_COLOR: '#D59361', TEXT_COLOR: '#FFFFFF'}, // {COLOR: '#F4667C', BORDER_COLOR: '#DC556A', TEXT_COLOR: '#FFFFFF'}, // {COLOR: '#DC82D2', BORDER_COLOR: '#D166C5', TEXT_COLOR: '#FFFFFF'}, // {COLOR: '#9860E5', BORDER_COLOR: '#844BD2', TEXT_COLOR: '#FFFFFF'}, // {COLOR: '#9F8CF1', BORDER_COLOR: '#8F75E2', TEXT_COLOR: '#FFFFFF'}, // {COLOR: '#59CB74', BORDER_COLOR: '#4EB867', TEXT_COLOR: '#FFFFFF'}, // {COLOR: '#ADDF84', BORDER_COLOR: '#9CCF72', TEXT_COLOR: '#FFFFFF'}, // {COLOR: '#89D2EA', BORDER_COLOR: '#7BC0D6', TEXT_COLOR: '#FFFFFF'}, // {COLOR: '#4ECCCB', BORDER_COLOR: '#45BAB9', TEXT_COLOR: '#FFFFFF'}, // {COLOR: '#46A1FD', BORDER_COLOR: '#3C8FE4', TEXT_COLOR: '#FFFFFF'}, // {COLOR: '#C2C2C2', BORDER_COLOR: '#ADADAD', TEXT_COLOR: '#FFFFFF'}, // ]; // \u521b\u5efa\u9009\u9879\u65f6, \u53ef\u4ee5\u63d0\u4f9b\u76f8\u5173\u9009\u9879, \u4e5f\u53ef\u4ee5\u901a\u8fc7\u968f\u673a\u51fd\u6570, \u81ea\u52a8\u751f\u6210\u76f8\u5e94\u7684\u9009\u9879\u989c\u8272 const colorIndex = ( Math . random () * SELECT_OPTION_COLORS . length ). toFix ( 0 ); const selectColor = SELECT_OPTION_COLORS [ colorIndex ];","title":"Select option colors"},{"location":"plugins/constants/#table-permission-type","text":"\u5b50\u8868\u7684\u6743\u9650\u7c7b\u578b import { TABLE_PERMISSION_TYPE } from 'dtable-sdk' ; TABLE_PERMISSION_TYPE . DEFAULT // default \u9ed8\u8ba4\u6743\u9650 TABLE_PERMISSION_TYPE . ADMINS // admins \u6709\u7ba1\u7406\u6743\u9650\u7684\u4eba TABLE_PERMISSION_TYPE . SPECIFIC_USERS // specific_users \u7279\u5b9a\u7528\u6237 TABLE_PERMISSION_TYPE . NONE // none \u8c01\u90fd\u4e0d\u80fd\u66f4\u6539","title":"Table permission type"},{"location":"plugins/plugins/","text":"Plugins \u00b6 getPluginSettings \u00b6 \u83b7\u53d6\u63d2\u4ef6\u7684\u914d\u7f6e\u53c2\u6570 dtable . getPluginSettings ( pluginName ); \u5176\u4e2d pluginName: \u63d2\u4ef6\u540d\u5b57 \u4f8b\u5b50 const pluginName = 'gallery' ; const pluginSetting = dtable . getPluginSettings ( pluginName ); updatePluginSettings \u00b6 \u66f4\u65b0\u63d2\u4ef6\u7684\u914d\u7f6e\u53c2\u6570 dtable . updatePluginSettings ( pluginName , pluginSettings ); \u5176\u4e2d pluginName: \u63d2\u4ef6\u540d\u5b57 pluginSettings: \u63d2\u4ef6\u7684\u914d\u7f6e\u53c2\u6570 \u4f8b\u5b50 const pluginName = 'gallery' ; const pluginSettings = {}; dtable . updatePluginSettings ( pluginName , pluginSettings ); deletePluginSettings \u00b6 \u5220\u9664\u63d2\u4ef6\u7684\u914d\u7f6e\u53c2\u6570 dtable . deletePluginSettings ( pluginName ); \u5176\u4e2d pluginName: \u63d2\u4ef6\u540d\u5b57 \u4f8b\u5b50 const pluginName = 'gallery' ; dtable . deletePluginSettings ( pluginName );","title":"plugins"},{"location":"plugins/plugins/#plugins","text":"","title":"Plugins"},{"location":"plugins/plugins/#getpluginsettings","text":"\u83b7\u53d6\u63d2\u4ef6\u7684\u914d\u7f6e\u53c2\u6570 dtable . getPluginSettings ( pluginName ); \u5176\u4e2d pluginName: \u63d2\u4ef6\u540d\u5b57 \u4f8b\u5b50 const pluginName = 'gallery' ; const pluginSetting = dtable . getPluginSettings ( pluginName );","title":"getPluginSettings"},{"location":"plugins/plugins/#updatepluginsettings","text":"\u66f4\u65b0\u63d2\u4ef6\u7684\u914d\u7f6e\u53c2\u6570 dtable . updatePluginSettings ( pluginName , pluginSettings ); \u5176\u4e2d pluginName: \u63d2\u4ef6\u540d\u5b57 pluginSettings: \u63d2\u4ef6\u7684\u914d\u7f6e\u53c2\u6570 \u4f8b\u5b50 const pluginName = 'gallery' ; const pluginSettings = {}; dtable . updatePluginSettings ( pluginName , pluginSettings );","title":"updatePluginSettings"},{"location":"plugins/plugins/#deletepluginsettings","text":"\u5220\u9664\u63d2\u4ef6\u7684\u914d\u7f6e\u53c2\u6570 dtable . deletePluginSettings ( pluginName ); \u5176\u4e2d pluginName: \u63d2\u4ef6\u540d\u5b57 \u4f8b\u5b50 const pluginName = 'gallery' ; dtable . deletePluginSettings ( pluginName );","title":"deletePluginSettings"},{"location":"plugins/query/","text":"Query with SQL \u00b6 Query \u00b6 \u4f7f\u7528 sql \u8bed\u53e5\u67e5\u8be2\u4e00\u4e2a dtable dtable . sqlQuery ( sql ) \u5176\u4e2d sql: \u8981\u6267\u884c\u7684 SQL \u8bed\u53e5 \u6ce8\u610f: \u9ed8\u8ba4\u8fd4\u56de\u6700\u591a 100 \u6761\u7ed3\u679c\uff0c\u5982\u679c\u9700\u8981\u66f4\u591a\u7ed3\u679c\uff0c\u8bf7\u5728 sql \u8bed\u53e5\u4e2d\u52a0\u5165 limit \u53c2\u6570 \u53ef\u80fd\u7684\u5f02\u5e38\u5305\u62ec ValueError: sql can not be empty ConnectionError: network error Exception: no such table Exception: no such column Exception: columns in group by should match columns in select \u4f8b\u5b50 \u00b6 \u57fa\u7840\u67e5\u8be2 \u00b6 dtable . sqlQuery ( 'select name, price, year from Bill' ) \u7ed3\u679c [ { '_id' : 'PzBiZklNTGiGJS-4c0_VLw' , 'name' : 'Bob' , 'price' : 300 , 'year' : 2019 }, { '_id' : 'Ep7odyv1QC2vDQR2raMvSA' , 'name' : 'Bob' , 'price' : 300 , 'year' : 2021 }, { '_id' : 'f1x3X_8uTtSDUe9D60VlYQ' , 'name' : 'Tom' , 'price' : 100 , 'year' : 2019 }, { '_id' : 'NxeaB5pDRFKOItUs_Ugxug' , 'name' : 'Tom' , 'price' : 100 , 'year' : 2020 }, { '_id' : 'W0BrjGQpSES9nfSytvXgMA' , 'name' : 'Tom' , 'price' : 200 , 'year' : 2021 }, { '_id' : 'EvwCWtX3RmKYKHQO9w2kLg' , 'name' : 'Jane' , 'price' : 200 , 'year' : 2020 }, { '_id' : 'BTiIGSTgR06UhPLhejFctA' , 'name' : 'Jane' , 'price' : 200 , 'year' : 2021 } ] WHERE \u00b6 dtable . sqlQuery ( 'select name, price from Bill where year = 2021 ' ) \u7ed3\u679c [ { '_id' : 'Ep7odyv1QC2vDQR2raMvSA' , 'name' : 'Bob' , 'price' : 300 }, { '_id' : 'W0BrjGQpSES9nfSytvXgMA' , 'name' : 'Tom' , 'price' : 200 }, { '_id' : 'BTiIGSTgR06UhPLhejFctA' , 'name' : 'Jane' , 'price' : 200 } ] ORDER BY \u00b6 dtable . sqlQuery ( 'select name, price, year from Bill order by year' ) \u7ed3\u679c [ { '_id' : 'PzBiZklNTGiGJS-4c0_VLw' , 'name' : 'Bob' , 'price' : 300 , 'year' : 2019 }, { '_id' : 'f1x3X_8uTtSDUe9D60VlYQ' , 'name' : 'Tom' , 'price' : 100 , 'year' : 2019 }, { '_id' : 'NxeaB5pDRFKOItUs_Ugxug' , 'name' : 'Tom' , 'price' : 100 , 'year' : 2020 }, { '_id' : 'EvwCWtX3RmKYKHQO9w2kLg' , 'name' : 'Jane' , 'price' : 200 , 'year' : 2020 }, { '_id' : 'Ep7odyv1QC2vDQR2raMvSA' , 'name' : 'Bob' , 'price' : 300 , 'year' : 2021 }, { '_id' : 'W0BrjGQpSES9nfSytvXgMA' , 'name' : 'Tom' , 'price' : 200 , 'year' : 2021 }, { '_id' : 'BTiIGSTgR06UhPLhejFctA' , 'name' : 'Jane' , 'price' : 200 , 'year' : 2021 } ] GROUP BY \u00b6 dtable . sqlQuery ( 'select name, sum(price) from Bill group by name' ) \u7ed3\u679c [ { 'SUM(price)' : 600 , 'name' : 'Bob' }, { 'SUM(price)' : 400 , 'name' : 'Tom' }, { 'SUM(price)' : 400 , 'name' : 'Jane' } ] DISTINCT \u00b6 dtable . sqlQuery ( 'select distinct name from Bill' ) \u7ed3\u679c [ { '_id' : 'PzBiZklNTGiGJS-4c0_VLw' , 'name' : 'Bob' }, { '_id' : 'f1x3X_8uTtSDUe9D60VlYQ' , 'name' : 'Tom' }, { '_id' : 'EvwCWtX3RmKYKHQO9w2kLg' , 'name' : 'Jane' } ]","title":"Query with SQL"},{"location":"plugins/query/#query-with-sql","text":"","title":"Query with SQL"},{"location":"plugins/query/#query","text":"\u4f7f\u7528 sql \u8bed\u53e5\u67e5\u8be2\u4e00\u4e2a dtable dtable . sqlQuery ( sql ) \u5176\u4e2d sql: \u8981\u6267\u884c\u7684 SQL \u8bed\u53e5 \u6ce8\u610f: \u9ed8\u8ba4\u8fd4\u56de\u6700\u591a 100 \u6761\u7ed3\u679c\uff0c\u5982\u679c\u9700\u8981\u66f4\u591a\u7ed3\u679c\uff0c\u8bf7\u5728 sql \u8bed\u53e5\u4e2d\u52a0\u5165 limit \u53c2\u6570 \u53ef\u80fd\u7684\u5f02\u5e38\u5305\u62ec ValueError: sql can not be empty ConnectionError: network error Exception: no such table Exception: no such column Exception: columns in group by should match columns in select","title":"Query"},{"location":"plugins/query/#_1","text":"","title":"\u4f8b\u5b50"},{"location":"plugins/query/#_2","text":"dtable . sqlQuery ( 'select name, price, year from Bill' ) \u7ed3\u679c [ { '_id' : 'PzBiZklNTGiGJS-4c0_VLw' , 'name' : 'Bob' , 'price' : 300 , 'year' : 2019 }, { '_id' : 'Ep7odyv1QC2vDQR2raMvSA' , 'name' : 'Bob' , 'price' : 300 , 'year' : 2021 }, { '_id' : 'f1x3X_8uTtSDUe9D60VlYQ' , 'name' : 'Tom' , 'price' : 100 , 'year' : 2019 }, { '_id' : 'NxeaB5pDRFKOItUs_Ugxug' , 'name' : 'Tom' , 'price' : 100 , 'year' : 2020 }, { '_id' : 'W0BrjGQpSES9nfSytvXgMA' , 'name' : 'Tom' , 'price' : 200 , 'year' : 2021 }, { '_id' : 'EvwCWtX3RmKYKHQO9w2kLg' , 'name' : 'Jane' , 'price' : 200 , 'year' : 2020 }, { '_id' : 'BTiIGSTgR06UhPLhejFctA' , 'name' : 'Jane' , 'price' : 200 , 'year' : 2021 } ]","title":"\u57fa\u7840\u67e5\u8be2"},{"location":"plugins/query/#where","text":"dtable . sqlQuery ( 'select name, price from Bill where year = 2021 ' ) \u7ed3\u679c [ { '_id' : 'Ep7odyv1QC2vDQR2raMvSA' , 'name' : 'Bob' , 'price' : 300 }, { '_id' : 'W0BrjGQpSES9nfSytvXgMA' , 'name' : 'Tom' , 'price' : 200 }, { '_id' : 'BTiIGSTgR06UhPLhejFctA' , 'name' : 'Jane' , 'price' : 200 } ]","title":"WHERE"},{"location":"plugins/query/#order-by","text":"dtable . sqlQuery ( 'select name, price, year from Bill order by year' ) \u7ed3\u679c [ { '_id' : 'PzBiZklNTGiGJS-4c0_VLw' , 'name' : 'Bob' , 'price' : 300 , 'year' : 2019 }, { '_id' : 'f1x3X_8uTtSDUe9D60VlYQ' , 'name' : 'Tom' , 'price' : 100 , 'year' : 2019 }, { '_id' : 'NxeaB5pDRFKOItUs_Ugxug' , 'name' : 'Tom' , 'price' : 100 , 'year' : 2020 }, { '_id' : 'EvwCWtX3RmKYKHQO9w2kLg' , 'name' : 'Jane' , 'price' : 200 , 'year' : 2020 }, { '_id' : 'Ep7odyv1QC2vDQR2raMvSA' , 'name' : 'Bob' , 'price' : 300 , 'year' : 2021 }, { '_id' : 'W0BrjGQpSES9nfSytvXgMA' , 'name' : 'Tom' , 'price' : 200 , 'year' : 2021 }, { '_id' : 'BTiIGSTgR06UhPLhejFctA' , 'name' : 'Jane' , 'price' : 200 , 'year' : 2021 } ]","title":"ORDER BY"},{"location":"plugins/query/#group-by","text":"dtable . sqlQuery ( 'select name, sum(price) from Bill group by name' ) \u7ed3\u679c [ { 'SUM(price)' : 600 , 'name' : 'Bob' }, { 'SUM(price)' : 400 , 'name' : 'Tom' }, { 'SUM(price)' : 400 , 'name' : 'Jane' } ]","title":"GROUP BY"},{"location":"plugins/query/#distinct","text":"dtable . sqlQuery ( 'select distinct name from Bill' ) \u7ed3\u679c [ { '_id' : 'PzBiZklNTGiGJS-4c0_VLw' , 'name' : 'Bob' }, { '_id' : 'f1x3X_8uTtSDUe9D60VlYQ' , 'name' : 'Tom' }, { '_id' : 'EvwCWtX3RmKYKHQO9w2kLg' , 'name' : 'Jane' } ]","title":"DISTINCT"},{"location":"plugins/rows/","text":"Rows \u00b6 appendRow \u00b6 \u6dfb\u52a0\u884c\u6570\u636e dtable . appendRow ( table , rowData , view , { collaborators } = {}); \u5176\u4e2d table: \u5b50\u8868\u5bf9\u8c61 rowData: \u884c\u6570\u636e view: \u89c6\u56fe\u5bf9\u8c61, \u53ef\u4ee5\u4e3a null { collaborators } : \u5305\u542b\u534f\u4f5c\u4eba\u5217\u8868\u7684\u7684\u5bf9\u8c61\u53c2\u6570 \u4f8b\u5b50 const tableName = 'Table1' ; const table = dtable . getTableByName ( tableName ); const viewName = 'Default View' const view = dtable . getViewByName ( table , viewName ); const collaborators = dtable . getRelatedUsers (); const rowData = { '\u540d\u79f0' : '\u5c0f\u5f3a' , '\u5e74\u9f84' : 28 , '\u5de5\u4f5c' : '\u7a0b\u5e8f\u5458' }; dtable . appendRow ( table , rowData , view , { collaborators }); deleteRowById \u00b6 \u901a\u8fc7 id \u5220\u9664\u5b50\u8868\u7684\u884c\u6570\u636e dtable . deleteRowById ( table , rowId ); \u5176\u4e2d table: \u5b50\u8868\u5bf9\u8c61 rowId: \u5220\u9664\u884c\u7684 id \u503c \u4f8b\u5b50 const tableName = 'Table1' ; const table = dtable . getTableByName ( tableName ); const viewName = 'Default View' const view = dtable . getViewByName ( table , viewName ); const rows = dtable . getViewRows ( view , table ); const rowId = rows [ 0 ]. _id ; dtable . deleteRowById ( table , rowId ); deleteRowsByIds \u00b6 \u901a\u8fc7 id \u5217\u8868\u5220\u9664\u5b50\u8868\u7684\u591a\u884c\u6570\u636e dtable . deleteRowsByIds ( table , rowIds ); \u5176\u4e2d table: \u5b50\u8868\u5bf9\u8c61 rowIds: \u5220\u9664\u591a\u884c\u6570\u636e\u7684 id \u5217\u8868 \u4f8b\u5b50 const tableName = 'Table1' ; const table = dtable . getTableByName ( tableName ); const viewName = 'Default View' const view = dtable . getViewByName ( table , viewName ); const rows = dtable . getViewRows ( view , table ); const rowIds = rows . map ( row => row . _id ); // \u5220\u9664\u524d\u4e94\u884c\u6570\u636e dtable . deleteRowsByIds ( table , rowIds . slice ( 0 , 5 )); modifyRow \u00b6 \u66f4\u6539\u884c\u5185\u5bb9 dtable . modifyRow ( table , row , updated ); \u5176\u4e2d table: \u5b50\u8868\u5bf9\u8c61 row: \u884c\u5bf9\u8c61 updated: \u65b0\u7684\u884c\u53c2\u6570\u5bf9\u8c61 \u4f8b\u5b50 const tableName = 'Table1' ; const table = dtable . getTableByName ( tableName ); const viewName = 'Default View' const view = dtable . getViewByName ( table , viewName ); const rows = dtable . getViewRows ( view , table ); const rowId = rows [ 0 ]; const updated = { '\u5e74\u9f84' : 30 , '\u5de5\u4f5c' : '\u9500\u552e' }; dtable . modifyRow ( table , row , updated ); forEachRow \u00b6 \u904d\u5386\u884c\u6570\u636e, \u4f9d\u636e\u67d0\u4e9b\u6761\u4ef6\u5b8c\u6210\u76f8\u5e94\u4e1a\u52a1\u903b\u8f91 dtable . forEachRow ( tableName , viewName , callback , { username , userId } = {}); \u5176\u4e2d tableName: \u5b50\u8868\u540d\u5b57 viewName: \u89c6\u56fe\u540d\u5b57 callback: \u56de\u8c03\u51fd\u6570, \u5904\u7406\u81ea\u5b9a\u4e49\u4e1a\u52a1\u903b\u8f91 { username, userId }: \u5305\u542b\u7528\u6237\u540d\u5b57, \u7528\u6237 id \u7684\u5bf9\u8c61\u53c2\u6570 \u6ce8: username, userId: \u5728\u5f00\u53d1\u73af\u5883\u4e2d\u53ef\u4ee5\u4ece\u672c\u5730\u914d\u7f6e\u6587\u4ef6\u8bfb\u53d6, \u5728\u96c6\u6210\u73af\u5883\u4e2d\u4ece window.dtable \u4e2d\u8bfb\u53d6 \u4f8b\u5b50 import { username , userId } from 'setting.local' ; // const { username, userId } = window.dtable; // \u4e1a\u52a1\u9700\u6c42: \u5982\u679c \u884c\u6570\u636e\u4e2d\u7684 \u201c\u4efb\u52a1\u72b6\u6001\u201d \u5217\u662f \u201c\u5b8c\u6210\u201d \u72b6\u6001, \u5c06\u6539\u884c\u4e2d \u201c\u5408\u683c\u201d \u5217\u8bbe\u7f6e\u4e3a \u201c\u662f\u201d const tableName = 'Table1' ; const viewName = 'Default View' dtable . forEachRow ( tableName , viewName , ( row ) => { // \u5b9e\u73b0\u4e1a\u52a1\u9700\u6c42 if ( row [ '\u4efb\u52a1\u72b6\u6001' ] === '\u5b8c\u6210' ) { const table = dtable . getTableByName ( tableName ); const updated = { '\u5408\u683c' : '\u662f' }; dtable . modifyRow ( table , row , updated ); } }, { username , userId }); getTableLinkRows \u00b6 \u83b7\u53d6\u884c\u6570\u636e\u5173\u8054\u5176\u4ed6\u8868\u7684\u6240\u6709\u884c\u6570\u636e\u7684 id \u503c dtable . getTableLinkRows ( rows , table ); \u5176\u4e2d rows: \u884c\u6570\u636e table: \u884c\u6570\u636e\u6240\u5c5e\u7684\u5b50\u8868\u5bf9\u8c61 \u4f8b\u5b50 const tableName = 'Table1' ; const table = dtable . getTableByName ( tableName ); const viewName = 'Default View' const view = dtable . getViewByName ( table , viewName ); const rows = dtable . getViewRows ( view , table ); const findLinkRows = rows . slice ( 0 , 5 ); dtable . getTableLinkRows ( finLinkRows , table ); getViewRows \u00b6 \u83b7\u53d6\u89c6\u56fe\u7684\u884c\u6570\u636e dtable . getViewRows ( view , table ); \u5176\u4e2d view: \u89c6\u56fe\u5bf9\u8c61 table: \u5b50\u8868\u5bf9\u8c61 \u4f8b\u5b50 const tableName = 'Table1' ; const table = dtable . getTableByName ( tableName ); const viewName = 'Default View' const view = dtable . getViewByName ( table , viewName ); const rows = dtable . getViewRows ( view , table ); getGroupRows \u00b6 \u83b7\u53d6\u5206\u7ec4\u7684\u884c\u6570\u636e dtable . getGroupRows ( view , table ); \u5176\u4e2d view: \u89c6\u56fe\u5bf9\u8c61 table: \u5b50\u8868\u5bf9\u8c61 \u4f8b\u5b50 const tableName = 'Table1' ; const table = dtable . getTableByName ( tableName ); const viewName = 'Default View' const view = dtable . getViewByName ( table , viewName ); const rows = dtable . getViewRows ( view , table ); getInsertedRowInitData \u00b6 \u83b7\u53d6\u65b0\u589e\u884c\u7684\u9ed8\u8ba4\u6570\u636e(\u5982\u679c\u8868\u683c\u4e2d\u5305\u542b\u6392\u5e8f, \u5206\u7ec4, \u8fc7\u6ee4\u7b49\u529f\u80fd, \u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 api \u83b7\u53d6\u65b0\u589e\u884c\u7684\u9ed8\u8ba4\u503c) dtable . getInsertedRowInitData ( view , table , rowId ); \u5176\u4e2d view: \u89c6\u56fe\u5bf9\u8c61 table: \u5b50\u8868\u5bf9\u8c61 rowId: \u65b0\u589e\u884c\u7684\u524d\u4e00\u884c\u7684 id \u503c \u4f8b\u5b50 const tableName = 'Table1' ; const table = dtable . getTableByName ( tableName ); const viewName = 'Default View' const view = dtable . getViewByName ( table , viewName ); const rows = dtable . getViewRows ( view , table ); const prevRow = rows [ row . length - 1 ]; const defaultRowData = dtable . getInsertedRowInitData ( view , table , prevRow . _id ); getRowsByID \u00b6 \u901a\u8fc7 id \u5217\u8868\u83b7\u53d6\u5b50\u8868\u7684\u76f8\u5173\u884c\u6570\u636e dtable . getRowsByID ( tableId , rowIds ); \u5176\u4e2d tableId: \u5b50\u8868\u7684 id \u503c rowIds: \u67e5\u627e\u884c\u7684 id \u5217\u8868 \u4f8b\u5b50 const tableName = 'Table1' ; const table = dtable . getTableByName ( tableName ); const rowIds = [ 'aaa' , 'bbb' , 'cccc' , 'dddd' ]; const rows = dtable . getRowsByID ( table . _id , rowIds ); getRowById \u00b6 \u901a\u8fc7 id \u83b7\u53d6\u5b50\u8868\u7684\u76f8\u5173\u884c\u6570\u636e dtable . getRowById ( table , rowId ); \u5176\u4e2d table: \u5b50\u8868\u5bf9\u8c61 rowId: \u67e5\u627e\u884c\u7684 id \u503c \u4f8b\u5b50 const tableName = 'Table1' ; const table = dtable . getTableByName ( tableName ); const rowId = 'aaaa' ; const rows = dtable . getRowById ( table , rowId ); moveGroupRows \u00b6 \u79fb\u52a8\u5206\u7ec4\u4e2d\u7684\u884c dtable . moveGroupRows ( table , targetIds , movePosition , movedRows , upperRowIds , updated , oldRows , groupbyColumns ); \u5176\u4e2d table: \u5b50\u8868\u5bf9\u8c61 targetIds: \u79fb\u52a8\u884c\u7684\u76ee\u6807\u4f4d\u7f6e\u884c\u7684 id \u5217\u8868 movePosition: \u79fb\u52a8\u7684\u76f8\u5bf9\u4f4d\u7f6e, move_above | move_below movedRows: \u79fb\u52a8\u7684\u884c\u6570\u636e\u5217\u8868 upperRowIds: \u6240\u6709\u79fb\u52a8\u884c\u4e4b\u524d\u6240\u5728\u4f4d\u7f6e\u7684\u524d\u4e00\u884c\u7684 id \u5217\u8868 updated: \u79fb\u52a8\u540e\u79fb\u52a8\u884c\u9700\u8981\u66f4\u65b0\u7684\u65b0\u7684\u5c5e\u6027\u503c\u5bf9\u8c61 (\u8de8\u5206\u7ec4\u79fb\u52a8, \u4e0d\u540c\u8fc7\u6ee4\u6761\u4ef6\u7684\u79fb\u52a8\u53ef\u80fd\u5bfc\u81f4\u6570\u636e\u53d1\u751f\u53d8\u5316) oldRows: \u79fb\u52a8\u524d\u79fb\u52a8\u884c\u9700\u8981\u66f4\u65b0\u7684\u65e7\u7684\u5c5e\u6027\u503c\u5bf9\u8c61 groupbyColumns: \u5f53\u524d\u89c6\u56fe\u5206\u7ec4\u7684\u5217\u6570\u636e \u4f8b\u5b50 const tableName = 'Table1' ; const table = dtable . getTableByName ( tableName ); // 1. \u5047\u8bbe: \u9ed8\u8ba4\u884c\u6570\u636e\u5217\u8868\u5982\u4e0b, \u6309\u7167\u5206\u7ec4\u5217\u8fdb\u884c\u5206\u7ec4 const rows = [ { _id : 'aaa' , '\u540d\u79f0' , '\u5c0f\u5f3a' , '\u5e74\u9f84' : '29' , '\u51fa\u751f\u65e5\u671f' : '1992-09-09' , '\u5206\u7ec4' : 'a' }, { _id : 'bbb' , '\u540d\u79f0' , '\u5c0f\u660e' , '\u5e74\u9f84' : '25' , '\u51fa\u751f\u65e5\u671f' : '1996-09-09' , '\u5206\u7ec4' : 'a' }, { _id : 'ccc' , '\u540d\u79f0' , '\u5c0f\u7ea2' , '\u5e74\u9f84' : '24' , '\u51fa\u751f\u65e5\u671f' : '1997-09-09' , '\u5206\u7ec4' : 'a' }, { _id : 'ddd' , '\u540d\u79f0' , '\u5c0f\u4e3d' , '\u5e74\u9f84' : '22' , '\u51fa\u751f\u65e5\u671f' : '1993-09-09' , '\u5206\u7ec4' : 'a' }, { _id : 'eee' , '\u540d\u79f0' , '\u5c0f\u83dc' , '\u5e74\u9f84' : '27' , '\u51fa\u751f\u65e5\u671f' : '1992-09-09' , '\u5206\u7ec4' : 'b' }, { _id : 'fff' , '\u540d\u79f0' , '\u5c0f\u9f99' , '\u5e74\u9f84' : '25' , '\u51fa\u751f\u65e5\u671f' : '1990-09-09' , '\u5206\u7ec4' : 'b' }, { _id : 'ggg' , '\u540d\u79f0' , '\u5c0f\u9a6c' , '\u5e74\u9f84' : '26' , '\u51fa\u751f\u65e5\u671f' : '1996-09-09' , '\u5206\u7ec4' : 'b' }, { _id : 'hhh' , '\u540d\u79f0' , '\u5c0f\u6b63' , '\u5e74\u9f84' : '27' , '\u51fa\u751f\u65e5\u671f' : '1999-09-09' , '\u5206\u7ec4' : 'b' }, ]; // 2. \u5c06 \u5c0f\u660e,\u5c0f\u4e3d\u79fb\u52a8\u5230\u5c0f\u6b63\u7684\u4e0b\u9762, \u76f8\u5173\u53c2\u6570\u5982\u4e0b const targetIds = [ 'hhh' , 'hhh' ]; const move_position = 'move_below' ; const movedRows = [ { _id : 'bbb' , '\u540d\u79f0' , '\u5c0f\u660e' , '\u5e74\u9f84' : '25' , '\u51fa\u751f\u65e5\u671f' : '1996-09-09' , '\u5206\u7ec4' : 'a' }, { _id : 'ddd' , '\u540d\u79f0' , '\u5c0f\u4e3d' , '\u5e74\u9f84' : '22' , '\u51fa\u751f\u65e5\u671f' : '1993-09-09' , '\u5206\u7ec4' : 'a' }, ]; const upperRowIds = [ 'aaa' , 'ccc' ]; const updated = { 'bbb' : { '\u5206\u7ec4' : 'b' }, 'ddd' : { '\u5206\u7ec4' : 'b' }, }; const oldRows = { 'bbb' : { '\u5206\u7ec4' : 'a' }, 'ddd' : { '\u5206\u7ec4' : 'a' }, }; const groupbyColumns = [{ key : '\u5206\u7ec4' , name : '\u5206\u7ec4' , type : 'text' , ...}]; const rows = dtable . moveGroupRows ( table , targetIds , movePosition , movedRows , upperRowIds , updated , oldRows , groupbyColumns );","title":"Rows"},{"location":"plugins/rows/#rows","text":"","title":"Rows"},{"location":"plugins/rows/#appendrow","text":"\u6dfb\u52a0\u884c\u6570\u636e dtable . appendRow ( table , rowData , view , { collaborators } = {}); \u5176\u4e2d table: \u5b50\u8868\u5bf9\u8c61 rowData: \u884c\u6570\u636e view: \u89c6\u56fe\u5bf9\u8c61, \u53ef\u4ee5\u4e3a null { collaborators } : \u5305\u542b\u534f\u4f5c\u4eba\u5217\u8868\u7684\u7684\u5bf9\u8c61\u53c2\u6570 \u4f8b\u5b50 const tableName = 'Table1' ; const table = dtable . getTableByName ( tableName ); const viewName = 'Default View' const view = dtable . getViewByName ( table , viewName ); const collaborators = dtable . getRelatedUsers (); const rowData = { '\u540d\u79f0' : '\u5c0f\u5f3a' , '\u5e74\u9f84' : 28 , '\u5de5\u4f5c' : '\u7a0b\u5e8f\u5458' }; dtable . appendRow ( table , rowData , view , { collaborators });","title":"appendRow"},{"location":"plugins/rows/#deleterowbyid","text":"\u901a\u8fc7 id \u5220\u9664\u5b50\u8868\u7684\u884c\u6570\u636e dtable . deleteRowById ( table , rowId ); \u5176\u4e2d table: \u5b50\u8868\u5bf9\u8c61 rowId: \u5220\u9664\u884c\u7684 id \u503c \u4f8b\u5b50 const tableName = 'Table1' ; const table = dtable . getTableByName ( tableName ); const viewName = 'Default View' const view = dtable . getViewByName ( table , viewName ); const rows = dtable . getViewRows ( view , table ); const rowId = rows [ 0 ]. _id ; dtable . deleteRowById ( table , rowId );","title":"deleteRowById"},{"location":"plugins/rows/#deleterowsbyids","text":"\u901a\u8fc7 id \u5217\u8868\u5220\u9664\u5b50\u8868\u7684\u591a\u884c\u6570\u636e dtable . deleteRowsByIds ( table , rowIds ); \u5176\u4e2d table: \u5b50\u8868\u5bf9\u8c61 rowIds: \u5220\u9664\u591a\u884c\u6570\u636e\u7684 id \u5217\u8868 \u4f8b\u5b50 const tableName = 'Table1' ; const table = dtable . getTableByName ( tableName ); const viewName = 'Default View' const view = dtable . getViewByName ( table , viewName ); const rows = dtable . getViewRows ( view , table ); const rowIds = rows . map ( row => row . _id ); // \u5220\u9664\u524d\u4e94\u884c\u6570\u636e dtable . deleteRowsByIds ( table , rowIds . slice ( 0 , 5 ));","title":"deleteRowsByIds"},{"location":"plugins/rows/#modifyrow","text":"\u66f4\u6539\u884c\u5185\u5bb9 dtable . modifyRow ( table , row , updated ); \u5176\u4e2d table: \u5b50\u8868\u5bf9\u8c61 row: \u884c\u5bf9\u8c61 updated: \u65b0\u7684\u884c\u53c2\u6570\u5bf9\u8c61 \u4f8b\u5b50 const tableName = 'Table1' ; const table = dtable . getTableByName ( tableName ); const viewName = 'Default View' const view = dtable . getViewByName ( table , viewName ); const rows = dtable . getViewRows ( view , table ); const rowId = rows [ 0 ]; const updated = { '\u5e74\u9f84' : 30 , '\u5de5\u4f5c' : '\u9500\u552e' }; dtable . modifyRow ( table , row , updated );","title":"modifyRow"},{"location":"plugins/rows/#foreachrow","text":"\u904d\u5386\u884c\u6570\u636e, \u4f9d\u636e\u67d0\u4e9b\u6761\u4ef6\u5b8c\u6210\u76f8\u5e94\u4e1a\u52a1\u903b\u8f91 dtable . forEachRow ( tableName , viewName , callback , { username , userId } = {}); \u5176\u4e2d tableName: \u5b50\u8868\u540d\u5b57 viewName: \u89c6\u56fe\u540d\u5b57 callback: \u56de\u8c03\u51fd\u6570, \u5904\u7406\u81ea\u5b9a\u4e49\u4e1a\u52a1\u903b\u8f91 { username, userId }: \u5305\u542b\u7528\u6237\u540d\u5b57, \u7528\u6237 id \u7684\u5bf9\u8c61\u53c2\u6570 \u6ce8: username, userId: \u5728\u5f00\u53d1\u73af\u5883\u4e2d\u53ef\u4ee5\u4ece\u672c\u5730\u914d\u7f6e\u6587\u4ef6\u8bfb\u53d6, \u5728\u96c6\u6210\u73af\u5883\u4e2d\u4ece window.dtable \u4e2d\u8bfb\u53d6 \u4f8b\u5b50 import { username , userId } from 'setting.local' ; // const { username, userId } = window.dtable; // \u4e1a\u52a1\u9700\u6c42: \u5982\u679c \u884c\u6570\u636e\u4e2d\u7684 \u201c\u4efb\u52a1\u72b6\u6001\u201d \u5217\u662f \u201c\u5b8c\u6210\u201d \u72b6\u6001, \u5c06\u6539\u884c\u4e2d \u201c\u5408\u683c\u201d \u5217\u8bbe\u7f6e\u4e3a \u201c\u662f\u201d const tableName = 'Table1' ; const viewName = 'Default View' dtable . forEachRow ( tableName , viewName , ( row ) => { // \u5b9e\u73b0\u4e1a\u52a1\u9700\u6c42 if ( row [ '\u4efb\u52a1\u72b6\u6001' ] === '\u5b8c\u6210' ) { const table = dtable . getTableByName ( tableName ); const updated = { '\u5408\u683c' : '\u662f' }; dtable . modifyRow ( table , row , updated ); } }, { username , userId });","title":"forEachRow"},{"location":"plugins/rows/#gettablelinkrows","text":"\u83b7\u53d6\u884c\u6570\u636e\u5173\u8054\u5176\u4ed6\u8868\u7684\u6240\u6709\u884c\u6570\u636e\u7684 id \u503c dtable . getTableLinkRows ( rows , table ); \u5176\u4e2d rows: \u884c\u6570\u636e table: \u884c\u6570\u636e\u6240\u5c5e\u7684\u5b50\u8868\u5bf9\u8c61 \u4f8b\u5b50 const tableName = 'Table1' ; const table = dtable . getTableByName ( tableName ); const viewName = 'Default View' const view = dtable . getViewByName ( table , viewName ); const rows = dtable . getViewRows ( view , table ); const findLinkRows = rows . slice ( 0 , 5 ); dtable . getTableLinkRows ( finLinkRows , table );","title":"getTableLinkRows"},{"location":"plugins/rows/#getviewrows","text":"\u83b7\u53d6\u89c6\u56fe\u7684\u884c\u6570\u636e dtable . getViewRows ( view , table ); \u5176\u4e2d view: \u89c6\u56fe\u5bf9\u8c61 table: \u5b50\u8868\u5bf9\u8c61 \u4f8b\u5b50 const tableName = 'Table1' ; const table = dtable . getTableByName ( tableName ); const viewName = 'Default View' const view = dtable . getViewByName ( table , viewName ); const rows = dtable . getViewRows ( view , table );","title":"getViewRows"},{"location":"plugins/rows/#getgrouprows","text":"\u83b7\u53d6\u5206\u7ec4\u7684\u884c\u6570\u636e dtable . getGroupRows ( view , table ); \u5176\u4e2d view: \u89c6\u56fe\u5bf9\u8c61 table: \u5b50\u8868\u5bf9\u8c61 \u4f8b\u5b50 const tableName = 'Table1' ; const table = dtable . getTableByName ( tableName ); const viewName = 'Default View' const view = dtable . getViewByName ( table , viewName ); const rows = dtable . getViewRows ( view , table );","title":"getGroupRows"},{"location":"plugins/rows/#getinsertedrowinitdata","text":"\u83b7\u53d6\u65b0\u589e\u884c\u7684\u9ed8\u8ba4\u6570\u636e(\u5982\u679c\u8868\u683c\u4e2d\u5305\u542b\u6392\u5e8f, \u5206\u7ec4, \u8fc7\u6ee4\u7b49\u529f\u80fd, \u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 api \u83b7\u53d6\u65b0\u589e\u884c\u7684\u9ed8\u8ba4\u503c) dtable . getInsertedRowInitData ( view , table , rowId ); \u5176\u4e2d view: \u89c6\u56fe\u5bf9\u8c61 table: \u5b50\u8868\u5bf9\u8c61 rowId: \u65b0\u589e\u884c\u7684\u524d\u4e00\u884c\u7684 id \u503c \u4f8b\u5b50 const tableName = 'Table1' ; const table = dtable . getTableByName ( tableName ); const viewName = 'Default View' const view = dtable . getViewByName ( table , viewName ); const rows = dtable . getViewRows ( view , table ); const prevRow = rows [ row . length - 1 ]; const defaultRowData = dtable . getInsertedRowInitData ( view , table , prevRow . _id );","title":"getInsertedRowInitData"},{"location":"plugins/rows/#getrowsbyid","text":"\u901a\u8fc7 id \u5217\u8868\u83b7\u53d6\u5b50\u8868\u7684\u76f8\u5173\u884c\u6570\u636e dtable . getRowsByID ( tableId , rowIds ); \u5176\u4e2d tableId: \u5b50\u8868\u7684 id \u503c rowIds: \u67e5\u627e\u884c\u7684 id \u5217\u8868 \u4f8b\u5b50 const tableName = 'Table1' ; const table = dtable . getTableByName ( tableName ); const rowIds = [ 'aaa' , 'bbb' , 'cccc' , 'dddd' ]; const rows = dtable . getRowsByID ( table . _id , rowIds );","title":"getRowsByID"},{"location":"plugins/rows/#getrowbyid","text":"\u901a\u8fc7 id \u83b7\u53d6\u5b50\u8868\u7684\u76f8\u5173\u884c\u6570\u636e dtable . getRowById ( table , rowId ); \u5176\u4e2d table: \u5b50\u8868\u5bf9\u8c61 rowId: \u67e5\u627e\u884c\u7684 id \u503c \u4f8b\u5b50 const tableName = 'Table1' ; const table = dtable . getTableByName ( tableName ); const rowId = 'aaaa' ; const rows = dtable . getRowById ( table , rowId );","title":"getRowById"},{"location":"plugins/rows/#movegrouprows","text":"\u79fb\u52a8\u5206\u7ec4\u4e2d\u7684\u884c dtable . moveGroupRows ( table , targetIds , movePosition , movedRows , upperRowIds , updated , oldRows , groupbyColumns ); \u5176\u4e2d table: \u5b50\u8868\u5bf9\u8c61 targetIds: \u79fb\u52a8\u884c\u7684\u76ee\u6807\u4f4d\u7f6e\u884c\u7684 id \u5217\u8868 movePosition: \u79fb\u52a8\u7684\u76f8\u5bf9\u4f4d\u7f6e, move_above | move_below movedRows: \u79fb\u52a8\u7684\u884c\u6570\u636e\u5217\u8868 upperRowIds: \u6240\u6709\u79fb\u52a8\u884c\u4e4b\u524d\u6240\u5728\u4f4d\u7f6e\u7684\u524d\u4e00\u884c\u7684 id \u5217\u8868 updated: \u79fb\u52a8\u540e\u79fb\u52a8\u884c\u9700\u8981\u66f4\u65b0\u7684\u65b0\u7684\u5c5e\u6027\u503c\u5bf9\u8c61 (\u8de8\u5206\u7ec4\u79fb\u52a8, \u4e0d\u540c\u8fc7\u6ee4\u6761\u4ef6\u7684\u79fb\u52a8\u53ef\u80fd\u5bfc\u81f4\u6570\u636e\u53d1\u751f\u53d8\u5316) oldRows: \u79fb\u52a8\u524d\u79fb\u52a8\u884c\u9700\u8981\u66f4\u65b0\u7684\u65e7\u7684\u5c5e\u6027\u503c\u5bf9\u8c61 groupbyColumns: \u5f53\u524d\u89c6\u56fe\u5206\u7ec4\u7684\u5217\u6570\u636e \u4f8b\u5b50 const tableName = 'Table1' ; const table = dtable . getTableByName ( tableName ); // 1. \u5047\u8bbe: \u9ed8\u8ba4\u884c\u6570\u636e\u5217\u8868\u5982\u4e0b, \u6309\u7167\u5206\u7ec4\u5217\u8fdb\u884c\u5206\u7ec4 const rows = [ { _id : 'aaa' , '\u540d\u79f0' , '\u5c0f\u5f3a' , '\u5e74\u9f84' : '29' , '\u51fa\u751f\u65e5\u671f' : '1992-09-09' , '\u5206\u7ec4' : 'a' }, { _id : 'bbb' , '\u540d\u79f0' , '\u5c0f\u660e' , '\u5e74\u9f84' : '25' , '\u51fa\u751f\u65e5\u671f' : '1996-09-09' , '\u5206\u7ec4' : 'a' }, { _id : 'ccc' , '\u540d\u79f0' , '\u5c0f\u7ea2' , '\u5e74\u9f84' : '24' , '\u51fa\u751f\u65e5\u671f' : '1997-09-09' , '\u5206\u7ec4' : 'a' }, { _id : 'ddd' , '\u540d\u79f0' , '\u5c0f\u4e3d' , '\u5e74\u9f84' : '22' , '\u51fa\u751f\u65e5\u671f' : '1993-09-09' , '\u5206\u7ec4' : 'a' }, { _id : 'eee' , '\u540d\u79f0' , '\u5c0f\u83dc' , '\u5e74\u9f84' : '27' , '\u51fa\u751f\u65e5\u671f' : '1992-09-09' , '\u5206\u7ec4' : 'b' }, { _id : 'fff' , '\u540d\u79f0' , '\u5c0f\u9f99' , '\u5e74\u9f84' : '25' , '\u51fa\u751f\u65e5\u671f' : '1990-09-09' , '\u5206\u7ec4' : 'b' }, { _id : 'ggg' , '\u540d\u79f0' , '\u5c0f\u9a6c' , '\u5e74\u9f84' : '26' , '\u51fa\u751f\u65e5\u671f' : '1996-09-09' , '\u5206\u7ec4' : 'b' }, { _id : 'hhh' , '\u540d\u79f0' , '\u5c0f\u6b63' , '\u5e74\u9f84' : '27' , '\u51fa\u751f\u65e5\u671f' : '1999-09-09' , '\u5206\u7ec4' : 'b' }, ]; // 2. \u5c06 \u5c0f\u660e,\u5c0f\u4e3d\u79fb\u52a8\u5230\u5c0f\u6b63\u7684\u4e0b\u9762, \u76f8\u5173\u53c2\u6570\u5982\u4e0b const targetIds = [ 'hhh' , 'hhh' ]; const move_position = 'move_below' ; const movedRows = [ { _id : 'bbb' , '\u540d\u79f0' , '\u5c0f\u660e' , '\u5e74\u9f84' : '25' , '\u51fa\u751f\u65e5\u671f' : '1996-09-09' , '\u5206\u7ec4' : 'a' }, { _id : 'ddd' , '\u540d\u79f0' , '\u5c0f\u4e3d' , '\u5e74\u9f84' : '22' , '\u51fa\u751f\u65e5\u671f' : '1993-09-09' , '\u5206\u7ec4' : 'a' }, ]; const upperRowIds = [ 'aaa' , 'ccc' ]; const updated = { 'bbb' : { '\u5206\u7ec4' : 'b' }, 'ddd' : { '\u5206\u7ec4' : 'b' }, }; const oldRows = { 'bbb' : { '\u5206\u7ec4' : 'a' }, 'ddd' : { '\u5206\u7ec4' : 'a' }, }; const groupbyColumns = [{ key : '\u5206\u7ec4' , name : '\u5206\u7ec4' , type : 'text' , ...}]; const rows = dtable . moveGroupRows ( table , targetIds , movePosition , movedRows , upperRowIds , updated , oldRows , groupbyColumns );","title":"moveGroupRows"},{"location":"plugins/tables/","text":"Tables \u00b6 addTable \u00b6 \u6dfb\u52a0\u5b50\u8868 dtable . addTable ( tableName ); \u5176\u4e2d tableName: \u6dfb\u52a0\u5b50\u8868\u7684\u540d\u79f0 \u4f8b\u5b50 dtable . addTable ( 'newTable' ); deleteTable \u00b6 \u5220\u9664\u5b50\u8868 dtable . deleteTable ( tableName ); \u5176\u4e2d tableName: \u5220\u9664\u5b50\u8868\u7684\u540d\u79f0 \u4f8b\u5b50 dtable . deleteTable ( 'newTable' ); renameTable \u00b6 \u4fee\u6539\u5b50\u8868\u540d\u5b57 dtable . renameTable ( oldTableName , newTableName ); \u5176\u4e2d oldTableName: \u66f4\u65b0\u5b50\u8868\u7684\u65e7\u540d\u5b57 newTableName: \u66f4\u65b0\u5b50\u8868\u7684\u65b0\u540d\u5b57 \u4f8b\u5b50 dtable . renameTable ( 'oldTableName' , 'newTableName' ); getTables \u00b6 \u83b7\u53d6 base \u4e2d\u6240\u6709\u7684\u5b50\u8868 dtable . getTables (); \u4f8b\u5b50 const tables = dtable . getTables (); getActiveTable \u00b6 \u83b7\u53d6\u5f53\u524d base \u6b63\u5728\u8bbf\u95ee\u7684\u5b50\u8868 dtable . getActiveTable (); \u4f8b\u5b50 const table = dtable . getActiveTable (); getTableByName \u00b6 \u901a\u8fc7 name \u83b7\u53d6\u5b50\u8868\u5185\u5bb9 dtable . getTableByName ( tableName ); \u5176\u4e2d tableName: \u5b50\u8868\u7684 name \u503c \u4f8b\u5b50 dtable . getTableByName ( 'tableName' ); getTableById \u00b6 \u901a\u8fc7 id \u83b7\u53d6\u5b50\u8868\u5185\u5bb9 dtable . getTableById ( tableId ); \u5176\u4e2d tableId: \u5b50\u8868\u7684 id \u503c \u4f8b\u5b50 dtable . getTableById ( '0000' ); importDataIntoNewTable \u00b6 \u5411 base \u4e2d\u6dfb\u52a0\u65b0\u7684\u5b50\u8868,\u5e76\u5305\u542b\u9ed8\u8ba4\u6570\u636e dtable . importDataIntoNewTable ( tableName , columns , rows ); \u5176\u4e2d tableName: \u65b0\u8868\u7684\u540d\u5b57 columns: \u65b0\u8868\u7684\u5217\u6570\u636e rows: \u65b0\u8868\u7684\u884c\u6570\u636e \u4f8b\u5b50 const tableName = 'tableName' ; const columns = [ { key : '0000' , type : 'text' , name : 'column1' , width : 200 , }, { key : '1111' , type : 'date' , name : 'column2' , width : 300 , data : { format : 'YYYY-MM-DD' } } ]; const rows = [ { '0000' : '\u5c0f\u5f3a' , '1111' : '1993-03-03' }, { '0000' : '\u5c0f\u660e' , '1111' : '1993-04-04' }, { '0000' : '\u5c0f\u7ea2' , '1111' : '1994-04-05' }, ]; dtable . importDataIntoNewTable ( tableName , columns , rows );","title":"Tables"},{"location":"plugins/tables/#tables","text":"","title":"Tables"},{"location":"plugins/tables/#addtable","text":"\u6dfb\u52a0\u5b50\u8868 dtable . addTable ( tableName ); \u5176\u4e2d tableName: \u6dfb\u52a0\u5b50\u8868\u7684\u540d\u79f0 \u4f8b\u5b50 dtable . addTable ( 'newTable' );","title":"addTable"},{"location":"plugins/tables/#deletetable","text":"\u5220\u9664\u5b50\u8868 dtable . deleteTable ( tableName ); \u5176\u4e2d tableName: \u5220\u9664\u5b50\u8868\u7684\u540d\u79f0 \u4f8b\u5b50 dtable . deleteTable ( 'newTable' );","title":"deleteTable"},{"location":"plugins/tables/#renametable","text":"\u4fee\u6539\u5b50\u8868\u540d\u5b57 dtable . renameTable ( oldTableName , newTableName ); \u5176\u4e2d oldTableName: \u66f4\u65b0\u5b50\u8868\u7684\u65e7\u540d\u5b57 newTableName: \u66f4\u65b0\u5b50\u8868\u7684\u65b0\u540d\u5b57 \u4f8b\u5b50 dtable . renameTable ( 'oldTableName' , 'newTableName' );","title":"renameTable"},{"location":"plugins/tables/#gettables","text":"\u83b7\u53d6 base \u4e2d\u6240\u6709\u7684\u5b50\u8868 dtable . getTables (); \u4f8b\u5b50 const tables = dtable . getTables ();","title":"getTables"},{"location":"plugins/tables/#getactivetable","text":"\u83b7\u53d6\u5f53\u524d base \u6b63\u5728\u8bbf\u95ee\u7684\u5b50\u8868 dtable . getActiveTable (); \u4f8b\u5b50 const table = dtable . getActiveTable ();","title":"getActiveTable"},{"location":"plugins/tables/#gettablebyname","text":"\u901a\u8fc7 name \u83b7\u53d6\u5b50\u8868\u5185\u5bb9 dtable . getTableByName ( tableName ); \u5176\u4e2d tableName: \u5b50\u8868\u7684 name \u503c \u4f8b\u5b50 dtable . getTableByName ( 'tableName' );","title":"getTableByName"},{"location":"plugins/tables/#gettablebyid","text":"\u901a\u8fc7 id \u83b7\u53d6\u5b50\u8868\u5185\u5bb9 dtable . getTableById ( tableId ); \u5176\u4e2d tableId: \u5b50\u8868\u7684 id \u503c \u4f8b\u5b50 dtable . getTableById ( '0000' );","title":"getTableById"},{"location":"plugins/tables/#importdataintonewtable","text":"\u5411 base \u4e2d\u6dfb\u52a0\u65b0\u7684\u5b50\u8868,\u5e76\u5305\u542b\u9ed8\u8ba4\u6570\u636e dtable . importDataIntoNewTable ( tableName , columns , rows ); \u5176\u4e2d tableName: \u65b0\u8868\u7684\u540d\u5b57 columns: \u65b0\u8868\u7684\u5217\u6570\u636e rows: \u65b0\u8868\u7684\u884c\u6570\u636e \u4f8b\u5b50 const tableName = 'tableName' ; const columns = [ { key : '0000' , type : 'text' , name : 'column1' , width : 200 , }, { key : '1111' , type : 'date' , name : 'column2' , width : 300 , data : { format : 'YYYY-MM-DD' } } ]; const rows = [ { '0000' : '\u5c0f\u5f3a' , '1111' : '1993-03-03' }, { '0000' : '\u5c0f\u660e' , '1111' : '1993-04-04' }, { '0000' : '\u5c0f\u7ea2' , '1111' : '1994-04-05' }, ]; dtable . importDataIntoNewTable ( tableName , columns , rows );","title":"importDataIntoNewTable"},{"location":"plugins/views/","text":"Views \u00b6 addView \u00b6 \u6dfb\u52a0\u89c6\u56fe dtable . addView ( tableName , viewName ); \u5176\u4e2d tableName: \u5b50\u8868\u540d\u5b57 viewName: \u6dfb\u52a0\u89c6\u56fe\u7684\u540d\u5b57 \u4f8b\u5b50 dtable . addView ( 'tableName' , 'viewName' ); deleteView \u00b6 \u5220\u9664\u89c6\u56fe dtable . deleteView ( tableName , viewName ); \u5176\u4e2d tableName: \u5b50\u8868\u540d\u5b57 viewName: \u5220\u9664\u89c6\u56fe\u7684\u540d\u5b57 \u4f8b\u5b50 dtable . deleteView ( 'TableName' , ViewName ); renameView \u00b6 \u4fee\u6539\u89c6\u56fe\u540d\u5b57 dtable . renameView ( tableName , oldViewName , newViewName ); \u5176\u4e2d tableName: \u5b50\u8868\u7684\u540d\u5b57 oldViewName: \u89c6\u56fe\u7684\u65e7\u540d\u5b57 newViewName: \u89c6\u56fe\u7684\u65b0\u540d\u5b57 \u4f8b\u5b50 dtable . renameView ( 'tableName' , 'oldViewName' , 'newViewName' ); getViews \u00b6 \u83b7\u53d6 table \u4e2d\u7684\u975e\u79c1\u6709\u89c6\u56fe dtable . getViews ( table ); \u5176\u4e2d table: \u5b50\u8868\u5bf9\u8c61 \u4f8b\u5b50 const tableId = '0000' ; const table = dtable . getTableById ( tableId ); const views = dtable . getViews ( table ); getNonArchiveViews \u00b6 \u83b7\u53d6 table \u4e2d\u7684\u975e\u79c1\u6709\u4e14\u975e\u5f52\u6863\u89c6\u56fe dtable . getNonArchiveViews ( table ); \u5176\u4e2d table: \u5b50\u8868\u5bf9\u8c61 \u4f8b\u5b50 const tableId = '0000' ; const table = dtable . getTableById ( tableId ); const views = dtable . getNonArchiveViews ( table ); getActiveView \u00b6 \u83b7\u53d6\u5f53\u524d base \u6b63\u5728\u8bbf\u95ee\u7684\u89c6\u56fe dtable . getActiveView (); \u4f8b\u5b50 const view = dtable . getActiveView (); getViewByName \u00b6 \u901a\u8fc7 name \u83b7\u53d6\u89c6\u56fe\u5185\u5bb9 dtable . getViewByName ( table , viewName ); \u5176\u4e2d table: \u5b50\u8868\u5bf9\u8c61 viewName: \u83b7\u53d6\u89c6\u56fe\u7684\u540d\u5b57 \u4f8b\u5b50 const tableId = '0000' ; const table = dtable . getTableById ( tableId ); const viewName = 'viewName' ; const view = dtable . getViewByName ( table , viewName ); getViewById \u00b6 \u901a\u8fc7 id \u83b7\u53d6\u89c6\u56fe\u5185\u5bb9 dtable . getViewById ( table , viewId ); \u5176\u4e2d table: \u5b50\u8868\u5bf9\u8c61 viewId: \u83b7\u53d6\u89c6\u56fe\u7684id \u4f8b\u5b50 const tableId = '0000' ; const table = dtable . getTableById ( tableId ); const viewId = '0000' ; const view = dtable . getViewById ( table , viewId ); isDefaultView \u00b6 \u5224\u65ad\u662f\u5426\u4e3a\u9ed8\u8ba4\u89c6\u56fe(\u4e0d\u5305\u542b\u5206\u7ec4, \u8fc7\u6ee4, \u6392\u5e8f\u7b49\u6761\u4ef6) dtable . isDefaultView ( view , columns ); \u5176\u4e2d view: \u89c6\u56fe\u5bf9\u8c61 columns: \u5b50\u8868\u4e2d\u6240\u6709\u7684\u5217\u5185\u5bb9 \u4f8b\u5b50 const tableId = '0000' ; const table = dtable . getTableById ( tableId ); const viewId = '0000' ; const view = dtable . getViewById ( table , viewId ); const columns = dtable . getColumns ( table ); const isDefaultView = dtable . isDefaultView ( view , columns ); isGroupView \u00b6 \u5224\u65ad\u662f\u5426\u4e3a\u5305\u542b\u5206\u7ec4\u7684\u89c6\u56fe(\u5305\u542b\u5206\u7ec4\u6761\u4ef6) dtable . isGroupView ( view , columns ); \u5176\u4e2d view: \u89c6\u56fe\u5bf9\u8c61 columns: \u5b50\u8868\u4e2d\u6240\u6709\u7684\u5217\u5185\u5bb9 \u4f8b\u5b50 const tableId = '0000' ; const table = dtable . getTableById ( tableId ); const viewId = '0000' ; const view = dtable . getViewById ( table , viewId ); const columns = dtable . getColumns ( table ); const isGroupView = dtable . isGroupView ( view , columns ); isFilterView \u00b6 \u5224\u65ad\u662f\u5426\u4e3a\u8fc7\u6ee4\u89c6\u56fe(\u5305\u542b\u8fc7\u6ee4\u6761\u4ef6) dtable . isFilterView ( view , columns ); \u5176\u4e2d view: \u89c6\u56fe\u5bf9\u8c61 columns: \u5b50\u8868\u4e2d\u6240\u6709\u7684\u5217\u5185\u5bb9 \u4f8b\u5b50 const tableId = '0000' ; const table = dtable . getTableById ( tableId ); const viewId = '0000' ; const view = dtable . getViewById ( table , viewId ); const columns = dtable . getColumns ( table ); const isFilterView = dtable . isFilterView ( view , columns );","title":"Views"},{"location":"plugins/views/#views","text":"","title":"Views"},{"location":"plugins/views/#addview","text":"\u6dfb\u52a0\u89c6\u56fe dtable . addView ( tableName , viewName ); \u5176\u4e2d tableName: \u5b50\u8868\u540d\u5b57 viewName: \u6dfb\u52a0\u89c6\u56fe\u7684\u540d\u5b57 \u4f8b\u5b50 dtable . addView ( 'tableName' , 'viewName' );","title":"addView"},{"location":"plugins/views/#deleteview","text":"\u5220\u9664\u89c6\u56fe dtable . deleteView ( tableName , viewName ); \u5176\u4e2d tableName: \u5b50\u8868\u540d\u5b57 viewName: \u5220\u9664\u89c6\u56fe\u7684\u540d\u5b57 \u4f8b\u5b50 dtable . deleteView ( 'TableName' , ViewName );","title":"deleteView"},{"location":"plugins/views/#renameview","text":"\u4fee\u6539\u89c6\u56fe\u540d\u5b57 dtable . renameView ( tableName , oldViewName , newViewName ); \u5176\u4e2d tableName: \u5b50\u8868\u7684\u540d\u5b57 oldViewName: \u89c6\u56fe\u7684\u65e7\u540d\u5b57 newViewName: \u89c6\u56fe\u7684\u65b0\u540d\u5b57 \u4f8b\u5b50 dtable . renameView ( 'tableName' , 'oldViewName' , 'newViewName' );","title":"renameView"},{"location":"plugins/views/#getviews","text":"\u83b7\u53d6 table \u4e2d\u7684\u975e\u79c1\u6709\u89c6\u56fe dtable . getViews ( table ); \u5176\u4e2d table: \u5b50\u8868\u5bf9\u8c61 \u4f8b\u5b50 const tableId = '0000' ; const table = dtable . getTableById ( tableId ); const views = dtable . getViews ( table );","title":"getViews"},{"location":"plugins/views/#getnonarchiveviews","text":"\u83b7\u53d6 table \u4e2d\u7684\u975e\u79c1\u6709\u4e14\u975e\u5f52\u6863\u89c6\u56fe dtable . getNonArchiveViews ( table ); \u5176\u4e2d table: \u5b50\u8868\u5bf9\u8c61 \u4f8b\u5b50 const tableId = '0000' ; const table = dtable . getTableById ( tableId ); const views = dtable . getNonArchiveViews ( table );","title":"getNonArchiveViews"},{"location":"plugins/views/#getactiveview","text":"\u83b7\u53d6\u5f53\u524d base \u6b63\u5728\u8bbf\u95ee\u7684\u89c6\u56fe dtable . getActiveView (); \u4f8b\u5b50 const view = dtable . getActiveView ();","title":"getActiveView"},{"location":"plugins/views/#getviewbyname","text":"\u901a\u8fc7 name \u83b7\u53d6\u89c6\u56fe\u5185\u5bb9 dtable . getViewByName ( table , viewName ); \u5176\u4e2d table: \u5b50\u8868\u5bf9\u8c61 viewName: \u83b7\u53d6\u89c6\u56fe\u7684\u540d\u5b57 \u4f8b\u5b50 const tableId = '0000' ; const table = dtable . getTableById ( tableId ); const viewName = 'viewName' ; const view = dtable . getViewByName ( table , viewName );","title":"getViewByName"},{"location":"plugins/views/#getviewbyid","text":"\u901a\u8fc7 id \u83b7\u53d6\u89c6\u56fe\u5185\u5bb9 dtable . getViewById ( table , viewId ); \u5176\u4e2d table: \u5b50\u8868\u5bf9\u8c61 viewId: \u83b7\u53d6\u89c6\u56fe\u7684id \u4f8b\u5b50 const tableId = '0000' ; const table = dtable . getTableById ( tableId ); const viewId = '0000' ; const view = dtable . getViewById ( table , viewId );","title":"getViewById"},{"location":"plugins/views/#isdefaultview","text":"\u5224\u65ad\u662f\u5426\u4e3a\u9ed8\u8ba4\u89c6\u56fe(\u4e0d\u5305\u542b\u5206\u7ec4, \u8fc7\u6ee4, \u6392\u5e8f\u7b49\u6761\u4ef6) dtable . isDefaultView ( view , columns ); \u5176\u4e2d view: \u89c6\u56fe\u5bf9\u8c61 columns: \u5b50\u8868\u4e2d\u6240\u6709\u7684\u5217\u5185\u5bb9 \u4f8b\u5b50 const tableId = '0000' ; const table = dtable . getTableById ( tableId ); const viewId = '0000' ; const view = dtable . getViewById ( table , viewId ); const columns = dtable . getColumns ( table ); const isDefaultView = dtable . isDefaultView ( view , columns );","title":"isDefaultView"},{"location":"plugins/views/#isgroupview","text":"\u5224\u65ad\u662f\u5426\u4e3a\u5305\u542b\u5206\u7ec4\u7684\u89c6\u56fe(\u5305\u542b\u5206\u7ec4\u6761\u4ef6) dtable . isGroupView ( view , columns ); \u5176\u4e2d view: \u89c6\u56fe\u5bf9\u8c61 columns: \u5b50\u8868\u4e2d\u6240\u6709\u7684\u5217\u5185\u5bb9 \u4f8b\u5b50 const tableId = '0000' ; const table = dtable . getTableById ( tableId ); const viewId = '0000' ; const view = dtable . getViewById ( table , viewId ); const columns = dtable . getColumns ( table ); const isGroupView = dtable . isGroupView ( view , columns );","title":"isGroupView"},{"location":"plugins/views/#isfilterview","text":"\u5224\u65ad\u662f\u5426\u4e3a\u8fc7\u6ee4\u89c6\u56fe(\u5305\u542b\u8fc7\u6ee4\u6761\u4ef6) dtable . isFilterView ( view , columns ); \u5176\u4e2d view: \u89c6\u56fe\u5bf9\u8c61 columns: \u5b50\u8868\u4e2d\u6240\u6709\u7684\u5217\u5185\u5bb9 \u4f8b\u5b50 const tableId = '0000' ; const table = dtable . getTableById ( tableId ); const viewId = '0000' ; const view = dtable . getViewById ( table , viewId ); const columns = dtable . getColumns ( table ); const isFilterView = dtable . isFilterView ( view , columns );","title":"isFilterView"},{"location":"python/","text":"SeaTable Python \u811a\u672c\u7f16\u7a0b \u00b6 Javascript \u811a\u672c\u5728\u5f53\u524d\u7684\u6d4f\u89c8\u5668\u4e2d\u76f4\u63a5\u8fd0\u884c\uff0c\u9002\u5408\u4e8e\u5bf9\u6570\u636e\u8fdb\u884c\u7b80\u5355\u7684\u5904\u7406\u3002Python \u811a\u672c\u5728\u670d\u52a1\u5668\u7aef\u8fd0\u884c\uff0c\u800c\u4e14\u53ef\u4ee5\u8bbe\u7f6e\u81ea\u52a8\u5468\u671f\u6027\u8fd0\u884c\uff0c\u9002\u5408\u4e8e\u66f4\u590d\u6742\u7684\u6570\u636e\u5904\u7406\u573a\u666f\u3002 Python \u811a\u672c\u4e5f\u53ef\u4ee5\u5728\u4f60\u7684\u672c\u5730\u673a\u5668\u4e0a\u8fd0\u884c\uff0c\u4e5f\u53ef\u4ee5\u4e0a\u4f20\u5230 SeaTable \u4e91\u7aef\u8fd0\u884c\u3002\u672c\u5730\u8fd0\u884c\u65b9\u4fbf\u4f60\u5f00\u53d1\u8c03\u8bd5\uff0c\u4e5f\u53ef\u4ee5\u65b9\u4fbf\u7684\u628a\u811a\u672c\u96c6\u6210\u5230\u66f4\u5927\u7684\u9879\u76ee\u4e2d\u3002 \u5982\u4f55\u8ba9\u811a\u672c\u540c\u65f6\u652f\u6301\u672c\u5730\u4e91\u7aef\u4e2d\u8fd0\u884c \u00b6 \u811a\u672c\u5728\u4e91\u7aef\u8fd0\u884c\u7684\u65f6\u5019\u4f1a\u63d0\u4f9b\u4e00\u4e2a context \u5bf9\u8c61\uff0c\u91cc\u8fb9\u5305\u542b\u4e86\u7cfb\u7edf\u81ea\u52a8\u7ed9\u4f60\u751f\u6210\u7684\u670d\u52a1\u5668\u7684\u5730\u5740\u548c base \u7684 API token\u3002\u5982\u679c\u4f60\u5728\u672c\u5730\u8fd0\u884c\u5219\u9700\u8981\u624b\u5de5\u6307\u5b9a\u8fd9\u4e24\u4e2a\u53d8\u91cf\uff1b\u5176\u4e2d API token \u53ef\u4ee5\u5728\u8868\u683c\u7684\u4e0b\u62c9\u83dc\u5355 \"\u9ad8\u7ea7 -> API Token\" \u4e2d\u751f\u6210\u3002 \u7528\u4ee5\u4e0b\u7684\u5199\u6cd5\u6765\u652f\u6301\u811a\u672c\u540c\u65f6\u5728\u672c\u5730\u548c\u4e91\u7aef\u8fd0\u884c from seatable_api import Base , context server_url = context . server_url or 'https://cloud.seatable.cn' api_token = context . api_token or 'c3c75dca2c369849455a39f4436147639cf02b2d' base = Base ( api_token , server_url ) base . auth () \u5982\u679c\u4f60\u5728\u4e91\u7aef\u7f16\u5199\u7684\u8bdd\uff0c\u53ef\u4ee5\u590d\u5236\u4e00\u4e0b\u5185\u5bb9\u5feb\u901f\u5f00\u59cb\u7f16\u5199: from seatable_api import Base , context base = Base ( context . api_token , context . server_url ) base . auth () \u672c\u5730\u8fd0\u884c\u9700\u8981\u5b89\u88c5\u7684\u5e93 \u00b6 \u811a\u672c\u5728\u672c\u5730\u8fd0\u884c\u7684\u65f6\u5019\u9700\u8981\u5b89\u88c5 seatable-api \u3002 pip3 install seatable-api \u8981\u6c42 Python >= 3.5 requests socketIO-client-nexus \u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50 \u00b6 \u4e0b\u9762\u7684\u4f8b\u5b50\u5c55\u793a\u600e\u4e48\u5728\u4e00\u4e2a base \u4e2d\u67e5\u8be2\u6570\u636e\u548c\u66f4\u65b0\u6570\u636e\u3002 base = Base ( api_token , server_url ) base . auth () queryset = base . filter ( ' Table1 ' , \" age>18 and gender='male' \" ) elder_queryset = queryset . filter ( \" age > 70 \" ) for row in elder_queryset : print ( row ) update_row_data = { ' paid ' : True } updated_rows = elder_queryset . update ( update_row_data ) deleted_count = elder_queryset . delete () \u7f16\u7a0b\u53c2\u8003 \u00b6 SeaTable \u4e2d\u5bf9\u8c61\u7684\u6570\u636e\u7ed3\u6784: \u6570\u636e\u7ed3\u6784 SeaTable API \u5e93\u4ecb\u7ecd: Base QuerySet Rows Links Columns Files Account Context Constants : \u4e00\u4e9b\u5e38\u91cf\u5b9a\u4e49 \u4e91\u7aef\u73af\u5883\u4e0b\u652f\u6301\u7684\u5e93 : \u4e91\u7aef\u73af\u5883\u4e0b\u652f\u6301\u5bfc\u5165\u7684 Python \u5e93\u5217\u8868 QuerySet\u67e5\u8be2\u8bed\u53e5\u89c4\u8303 \u4f8b\u5b50 \u00b6 \u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u94fe\u63a5\u627e\u5230\u4e00\u4e9b\u5bb9\u6613\u7406\u89e3\u7684\u4f8b\u5b50 https://github.com/seatable/seatable-scripts-cn/tree/master/examples/python \u5177\u4f53\u5982\u4e0b send_email.py : \u8bfb\u53d6\u4e00\u4e2a\u8868\u4e2d\u7684\u56fe\u7247/\u6587\u4ef6\u4f5c\u4e3a\u9644\u4ef6\u53d1\u9001\u90ae\u4ef6\u7ed9\u53e6\u4e00\u4e2a\u8868\u4e2d\u7684\u8054\u7cfb\u4eba image_transfer.py : \u4ece\u4e00\u4e2a\u8bb0\u5f55\u56fe\u7247 URL \u5217\u8868\u5217\u4e0b\u8f7d\u56fe\u7247\u5e76\u6dfb\u52a0\u5230\u8868\u683c\u4e2d verify_records.py : \u6839\u636e\u8bb0\u5f55\u7684\u521b\u5efa\u65f6\u95f4\u5224\u65ad\u8bb0\u5f55\u7684\u6709\u6548\u6027\uff0c\u5e76\u5199\u5230\u4e00\u5217\u4e0a sync_mysql.py : \u5c06mysql\u6570\u636e\u5e93\u4e2d\u7684\u4fe1\u606f\u540c\u6b65\u81f3\u8868\u683c\u4e2d update_certification_expiration.py : \u66f4\u65b0\u7f51\u7ad9\u8bc1\u4e66\u8fc7\u671f\u65f6\u95f4 send_wechat_msg.py : \u901a\u8fc7\u4f01\u4e1a\u5fae\u4fe1\u7fa4\u673a\u5668\u4eba\u63a8\u9001\u7fa4\u6d88\u606f sync_stock_price.py : \u66f4\u65b0\u80a1\u7968\u4ef7\u683c\u4fe1\u606f sync_data_by_spider.py : \u901a\u8fc7\u722c\u53d6\u7ef4\u57fa\u767e\u79d1\u4fe1\u606f\u5199\u5165\u8868\u683c","title":"\u5f15\u8a00"},{"location":"python/#seatable-python","text":"Javascript \u811a\u672c\u5728\u5f53\u524d\u7684\u6d4f\u89c8\u5668\u4e2d\u76f4\u63a5\u8fd0\u884c\uff0c\u9002\u5408\u4e8e\u5bf9\u6570\u636e\u8fdb\u884c\u7b80\u5355\u7684\u5904\u7406\u3002Python \u811a\u672c\u5728\u670d\u52a1\u5668\u7aef\u8fd0\u884c\uff0c\u800c\u4e14\u53ef\u4ee5\u8bbe\u7f6e\u81ea\u52a8\u5468\u671f\u6027\u8fd0\u884c\uff0c\u9002\u5408\u4e8e\u66f4\u590d\u6742\u7684\u6570\u636e\u5904\u7406\u573a\u666f\u3002 Python \u811a\u672c\u4e5f\u53ef\u4ee5\u5728\u4f60\u7684\u672c\u5730\u673a\u5668\u4e0a\u8fd0\u884c\uff0c\u4e5f\u53ef\u4ee5\u4e0a\u4f20\u5230 SeaTable \u4e91\u7aef\u8fd0\u884c\u3002\u672c\u5730\u8fd0\u884c\u65b9\u4fbf\u4f60\u5f00\u53d1\u8c03\u8bd5\uff0c\u4e5f\u53ef\u4ee5\u65b9\u4fbf\u7684\u628a\u811a\u672c\u96c6\u6210\u5230\u66f4\u5927\u7684\u9879\u76ee\u4e2d\u3002","title":"SeaTable Python \u811a\u672c\u7f16\u7a0b"},{"location":"python/#_1","text":"\u811a\u672c\u5728\u4e91\u7aef\u8fd0\u884c\u7684\u65f6\u5019\u4f1a\u63d0\u4f9b\u4e00\u4e2a context \u5bf9\u8c61\uff0c\u91cc\u8fb9\u5305\u542b\u4e86\u7cfb\u7edf\u81ea\u52a8\u7ed9\u4f60\u751f\u6210\u7684\u670d\u52a1\u5668\u7684\u5730\u5740\u548c base \u7684 API token\u3002\u5982\u679c\u4f60\u5728\u672c\u5730\u8fd0\u884c\u5219\u9700\u8981\u624b\u5de5\u6307\u5b9a\u8fd9\u4e24\u4e2a\u53d8\u91cf\uff1b\u5176\u4e2d API token \u53ef\u4ee5\u5728\u8868\u683c\u7684\u4e0b\u62c9\u83dc\u5355 \"\u9ad8\u7ea7 -> API Token\" \u4e2d\u751f\u6210\u3002 \u7528\u4ee5\u4e0b\u7684\u5199\u6cd5\u6765\u652f\u6301\u811a\u672c\u540c\u65f6\u5728\u672c\u5730\u548c\u4e91\u7aef\u8fd0\u884c from seatable_api import Base , context server_url = context . server_url or 'https://cloud.seatable.cn' api_token = context . api_token or 'c3c75dca2c369849455a39f4436147639cf02b2d' base = Base ( api_token , server_url ) base . auth () \u5982\u679c\u4f60\u5728\u4e91\u7aef\u7f16\u5199\u7684\u8bdd\uff0c\u53ef\u4ee5\u590d\u5236\u4e00\u4e0b\u5185\u5bb9\u5feb\u901f\u5f00\u59cb\u7f16\u5199: from seatable_api import Base , context base = Base ( context . api_token , context . server_url ) base . auth ()","title":"\u5982\u4f55\u8ba9\u811a\u672c\u540c\u65f6\u652f\u6301\u672c\u5730\u4e91\u7aef\u4e2d\u8fd0\u884c"},{"location":"python/#_2","text":"\u811a\u672c\u5728\u672c\u5730\u8fd0\u884c\u7684\u65f6\u5019\u9700\u8981\u5b89\u88c5 seatable-api \u3002 pip3 install seatable-api \u8981\u6c42 Python >= 3.5 requests socketIO-client-nexus","title":"\u672c\u5730\u8fd0\u884c\u9700\u8981\u5b89\u88c5\u7684\u5e93"},{"location":"python/#_3","text":"\u4e0b\u9762\u7684\u4f8b\u5b50\u5c55\u793a\u600e\u4e48\u5728\u4e00\u4e2a base \u4e2d\u67e5\u8be2\u6570\u636e\u548c\u66f4\u65b0\u6570\u636e\u3002 base = Base ( api_token , server_url ) base . auth () queryset = base . filter ( ' Table1 ' , \" age>18 and gender='male' \" ) elder_queryset = queryset . filter ( \" age > 70 \" ) for row in elder_queryset : print ( row ) update_row_data = { ' paid ' : True } updated_rows = elder_queryset . update ( update_row_data ) deleted_count = elder_queryset . delete ()","title":"\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50"},{"location":"python/#_4","text":"SeaTable \u4e2d\u5bf9\u8c61\u7684\u6570\u636e\u7ed3\u6784: \u6570\u636e\u7ed3\u6784 SeaTable API \u5e93\u4ecb\u7ecd: Base QuerySet Rows Links Columns Files Account Context Constants : \u4e00\u4e9b\u5e38\u91cf\u5b9a\u4e49 \u4e91\u7aef\u73af\u5883\u4e0b\u652f\u6301\u7684\u5e93 : \u4e91\u7aef\u73af\u5883\u4e0b\u652f\u6301\u5bfc\u5165\u7684 Python \u5e93\u5217\u8868 QuerySet\u67e5\u8be2\u8bed\u53e5\u89c4\u8303","title":"\u7f16\u7a0b\u53c2\u8003"},{"location":"python/#_5","text":"\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u94fe\u63a5\u627e\u5230\u4e00\u4e9b\u5bb9\u6613\u7406\u89e3\u7684\u4f8b\u5b50 https://github.com/seatable/seatable-scripts-cn/tree/master/examples/python \u5177\u4f53\u5982\u4e0b send_email.py : \u8bfb\u53d6\u4e00\u4e2a\u8868\u4e2d\u7684\u56fe\u7247/\u6587\u4ef6\u4f5c\u4e3a\u9644\u4ef6\u53d1\u9001\u90ae\u4ef6\u7ed9\u53e6\u4e00\u4e2a\u8868\u4e2d\u7684\u8054\u7cfb\u4eba image_transfer.py : \u4ece\u4e00\u4e2a\u8bb0\u5f55\u56fe\u7247 URL \u5217\u8868\u5217\u4e0b\u8f7d\u56fe\u7247\u5e76\u6dfb\u52a0\u5230\u8868\u683c\u4e2d verify_records.py : \u6839\u636e\u8bb0\u5f55\u7684\u521b\u5efa\u65f6\u95f4\u5224\u65ad\u8bb0\u5f55\u7684\u6709\u6548\u6027\uff0c\u5e76\u5199\u5230\u4e00\u5217\u4e0a sync_mysql.py : \u5c06mysql\u6570\u636e\u5e93\u4e2d\u7684\u4fe1\u606f\u540c\u6b65\u81f3\u8868\u683c\u4e2d update_certification_expiration.py : \u66f4\u65b0\u7f51\u7ad9\u8bc1\u4e66\u8fc7\u671f\u65f6\u95f4 send_wechat_msg.py : \u901a\u8fc7\u4f01\u4e1a\u5fae\u4fe1\u7fa4\u673a\u5668\u4eba\u63a8\u9001\u7fa4\u6d88\u606f sync_stock_price.py : \u66f4\u65b0\u80a1\u7968\u4ef7\u683c\u4fe1\u606f sync_data_by_spider.py : \u901a\u8fc7\u722c\u53d6\u7ef4\u57fa\u767e\u79d1\u4fe1\u606f\u5199\u5165\u8868\u683c","title":"\u4f8b\u5b50"},{"location":"python/account/","text":"Account \u00b6 Account \u7c7b\u63d0\u4f9b\u4e86\u64cd\u4f5c\u5168\u5c40 API \u7684\u63a5\u53e3\uff0c\u5305\u62ec \u5217\u51fa\u6240\u6709\u7684 Workspace \u65b0\u589e/\u590d\u5236/\u5220\u9664 Base \u83b7\u53d6\u5355\u4e2a Base \u7684\u8bbf\u95ee\u6743\u9650 \u8ba4\u8bc1 \u00b6 \u4f7f\u7528 \u90ae\u7bb1/\u5bc6\u7801 \u8fdb\u884c\u8ba4\u8bc1\uff0c\u5728\u8c03\u7528 Account \u63d0\u4f9b\u7684 API \u524d\uff0c\u9700\u8981\u5148\u8fdb\u884c\u8ba4\u8bc1 \u4f8b\u5b50 \u00b6 from seatable_api import Account email = 'xiongxxx@xxx.com' password = 'xxxxxxx' server_url = 'https://cloud.seatable.cn/' account = Account ( email , password , server_url ) account . auth () Workspace \u00b6 \u5728 SeaTable \u4e2d\uff0c\u4e00\u4e2a workspace \u662f\u4e2a\u4eba\u7684\u8868\u683c\u7684\u96c6\u5408\u6216\u8005\u4e00\u4e2a\u7fa4\u7ec4\u7684\u8868\u683c\u7684\u96c6\u5408\u3002Base \u5b58\u50a8\u5728 workspace \u4e2d\u3002SeaTable \u4f1a\u4e3a\u6bcf\u4e2a\u8d26\u53f7\u751f\u6210\u4e00\u4e2a\u4e2a\u4eba\u7684 workspace, \u6bcf\u4e2a\u7fa4\u7ec4\u4e5f\u6709\u4e00\u4e2a workspace\u3002 List workspaces \u00b6 \u83b7\u53d6\u60a8\u6240\u6709 workspace \u4e0e\u5176\u4e0b\u7684 base \u4f8b\u5b50 \u00b6 account . list_workspaces () \u8fd4\u56de\u7ed3\u679c { \"workspace_list\" : [{ \"id\" : 13740 , # workspace\u7684id \"repo_id\" : \"cd9a97a6-9214-4eeb-b609-4295530b9018\" , \"table_list\" : [{ # base\u5bf9\u8c61 \"id\" : 24022 , \"workspace_id\" : 13740 , \"uuid\" : \"69771c2e-b51e-4fe4-b721-01cd1950e68c\" , \"name\" : \"q\" , \"creator\" : \"122\" , \"modifier\" : \"122\" , \"created_at\" : \"2020-10-26T14:43:02+08:00\" , \"updated_at\" : \"2020-10-26T14:43:02+08:00\" , \"color\" : null , \"text_color\" : null , \"icon\" : null , \"starred\" : false }], \"owner_name\" : \"122\" , \"owner_type\" : \"Personal\" }], \"starred_dtable_list\" : [] } Base \u00b6 \u65b0\u589e/\u590d\u5236/\u5220\u9664 Base\uff0c\u83b7\u53d6\u4e00\u4e2a Base \u8bbf\u95ee\u6743\u9650\u7684\u63a5\u53e3 Add a base \u00b6 \u6dfb\u52a0\u4e00\u4e2a base \u5230\u4e00\u4e2a Workspace account . add_base ( name , workspace_id = None ) \u5176\u4e2d workspace_id: \u6dfb\u52a0\u5230\u6307\u5b9a\u7684\u5de5\u4f5c\u533a\uff0c\u5982\u679c\u4e3a None \u5219\u9ed8\u8ba4\u6dfb\u52a0\u5230\u81ea\u5df1\u7684\u5de5\u4f5c\u533a \u4f8b\u5b50 \u00b6 account . add_base ( 'new-base' ) account . add_base ( 'new-base' , 35 ) Copy a base \u00b6 \u590d\u5236\u4e00\u4e2a base \u5230\u4e00\u4e2a workspace \u4e2d account . copy_base ( src_workspace_id , base_name , dst_workspace_id ) \u5176\u4e2d src_workspace_id: \u6e90\u5de5\u4f5c\u533a id dst_workspace_id: \u76ee\u6807\u5de5\u4f5c\u533a id base_name: base \u7684\u540d\u79f0 \u5373\u5c06\u540d\u4e3a base_name \u7684 base \u4ece\u6e90\u5de5\u4f5c\u533a\u590d\u5236\u5230\u76ee\u6807\u5de5\u4f5c\u533a \u4f8b\u5b50 \u00b6 account . copy_base ( 35 , 'img-file' , 74 ) Get a base \u00b6 \u83b7\u53d6\u4e00\u4e2a base \u5bf9\u8c61 # \u83b7\u53d6\u5b58\u5728\u4e8e id \u4e3a workspac_id \u7684 workspace \u4e2d\u540d\u4e3a base_name \u7684 Base \u5bf9\u8c61 # Base\u5bf9\u8c61\u5df2\u83b7\u5f97\u6388\u6743\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u8c03\u7528 base.auth() account . get_base ( workspace_id , base_name ) \u4f8b\u5b50 \u00b6 base = account . get_base ( 35 , 'img-file' )","title":"Account"},{"location":"python/account/#account","text":"Account \u7c7b\u63d0\u4f9b\u4e86\u64cd\u4f5c\u5168\u5c40 API \u7684\u63a5\u53e3\uff0c\u5305\u62ec \u5217\u51fa\u6240\u6709\u7684 Workspace \u65b0\u589e/\u590d\u5236/\u5220\u9664 Base \u83b7\u53d6\u5355\u4e2a Base \u7684\u8bbf\u95ee\u6743\u9650","title":"Account"},{"location":"python/account/#_1","text":"\u4f7f\u7528 \u90ae\u7bb1/\u5bc6\u7801 \u8fdb\u884c\u8ba4\u8bc1\uff0c\u5728\u8c03\u7528 Account \u63d0\u4f9b\u7684 API \u524d\uff0c\u9700\u8981\u5148\u8fdb\u884c\u8ba4\u8bc1","title":"\u8ba4\u8bc1"},{"location":"python/account/#workspace","text":"\u5728 SeaTable \u4e2d\uff0c\u4e00\u4e2a workspace \u662f\u4e2a\u4eba\u7684\u8868\u683c\u7684\u96c6\u5408\u6216\u8005\u4e00\u4e2a\u7fa4\u7ec4\u7684\u8868\u683c\u7684\u96c6\u5408\u3002Base \u5b58\u50a8\u5728 workspace \u4e2d\u3002SeaTable \u4f1a\u4e3a\u6bcf\u4e2a\u8d26\u53f7\u751f\u6210\u4e00\u4e2a\u4e2a\u4eba\u7684 workspace, \u6bcf\u4e2a\u7fa4\u7ec4\u4e5f\u6709\u4e00\u4e2a workspace\u3002","title":"Workspace"},{"location":"python/account/#list-workspaces","text":"\u83b7\u53d6\u60a8\u6240\u6709 workspace \u4e0e\u5176\u4e0b\u7684 base","title":"List workspaces"},{"location":"python/account/#base","text":"\u65b0\u589e/\u590d\u5236/\u5220\u9664 Base\uff0c\u83b7\u53d6\u4e00\u4e2a Base \u8bbf\u95ee\u6743\u9650\u7684\u63a5\u53e3","title":"Base"},{"location":"python/account/#add-a-base","text":"\u6dfb\u52a0\u4e00\u4e2a base \u5230\u4e00\u4e2a Workspace account . add_base ( name , workspace_id = None ) \u5176\u4e2d workspace_id: \u6dfb\u52a0\u5230\u6307\u5b9a\u7684\u5de5\u4f5c\u533a\uff0c\u5982\u679c\u4e3a None \u5219\u9ed8\u8ba4\u6dfb\u52a0\u5230\u81ea\u5df1\u7684\u5de5\u4f5c\u533a","title":"Add a base"},{"location":"python/account/#copy-a-base","text":"\u590d\u5236\u4e00\u4e2a base \u5230\u4e00\u4e2a workspace \u4e2d account . copy_base ( src_workspace_id , base_name , dst_workspace_id ) \u5176\u4e2d src_workspace_id: \u6e90\u5de5\u4f5c\u533a id dst_workspace_id: \u76ee\u6807\u5de5\u4f5c\u533a id base_name: base \u7684\u540d\u79f0 \u5373\u5c06\u540d\u4e3a base_name \u7684 base \u4ece\u6e90\u5de5\u4f5c\u533a\u590d\u5236\u5230\u76ee\u6807\u5de5\u4f5c\u533a","title":"Copy a base"},{"location":"python/account/#get-a-base","text":"\u83b7\u53d6\u4e00\u4e2a base \u5bf9\u8c61 # \u83b7\u53d6\u5b58\u5728\u4e8e id \u4e3a workspac_id \u7684 workspace \u4e2d\u540d\u4e3a base_name \u7684 Base \u5bf9\u8c61 # Base\u5bf9\u8c61\u5df2\u83b7\u5f97\u6388\u6743\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u8c03\u7528 base.auth() account . get_base ( workspace_id , base_name )","title":"Get a base"},{"location":"python/base/","text":"Base \u5bf9\u8c61 \u00b6 Base \u4ee3\u8868\u4e00\u4e2a\u8868\u683c\u3002\u4f60\u53ef\u4ee5\u7528\u4e24\u79cd\u65b9\u6cd5\u6765\u83b7\u53d6\u8bfb\u5199\u4e00\u4e2a base \u7684\u6388\u6743\u3002\u4e00\u4e2a\u662f\u4f7f\u7528\u5355\u4e2a\u8868\u683c\u7684 api token, \u8fd9\u4e2a token \u53ef\u4ee5\u5728\u7f51\u9875\u7aef\u76f4\u63a5\u751f\u6210\u3002\u5728\u4e91\u7aef\u73af\u5883\u4e0b\u4ece context.api_token \u76f4\u63a5\u8bfb\u53d6\u3002 \u8fd8\u6709\u4e00\u4e2a\u65b9\u6cd5\u662f\u4f7f\u7528\u8d26\u53f7\u540d\u548c\u5bc6\u7801\u6765\u521d\u59cb\u5316\u4e00\u4e2a Account \u5bf9\u8c61\uff0c\u7136\u540e\u8c03\u7528 Account \u7684\u63a5\u53e3\u6765\u83b7\u53d6\u4e00\u4e2a base \u5bf9\u8c61\u3002\u7b2c\u4e00\u79cd\u65b9\u6cd5\u66f4\u52a0\u5b89\u5168\u4e00\u4e9b\u3002 \u83b7\u53d6\u6388\u6743 \u00b6 \u4f7f\u7528\u8868\u683c\u7684 API Token \u6765\u83b7\u53d6\u4e00\u4e2a base \u7684\u8bbf\u95ee\u6388\u6743\u3002 \u4f8b\u5b50 \u00b6 from seatable_api import Base , context server_url = context . server_url or 'https://cloud.seatable.cn' api_token = context . api_token or 'c3c75dca2c369849455a39f4436147639cf02b2d' base = Base ( api_token , server_url ) base . auth () Metadata \u00b6 Get metadata \u00b6 \u4f8b\u5b50 \u00b6 base . get_metadata () \u8fd4\u56de\u7ed3\u679c { 'tables' : [{ '_id' : '4krH' , 'name' : '\u8054\u7cfb\u4eba' , 'is_header_locked' : False , 'columns' : [{ 'key' : '0000' , 'type' : 'text' , 'name' : '\u540d\u79f0' , 'editable' : True , 'width' : 200 , 'resizable' : True , 'draggable' : True , 'data' : None , 'permission_type' : '' , 'permitted_users' : [] }, { 'key' : 'M31F' , 'type' : 'text' , 'name' : '\u90ae\u7bb1' , 'editable' : True , 'width' : 200 , 'resizable' : True , 'draggable' : True , 'data' : None , 'permission_type' : '' , 'permitted_users' : [] }], 'views' : [{ '_id' : '0000' , 'name' : '\u9ed8\u8ba4\u89c6\u56fe' , 'type' : 'table' , 'is_locked' : False , 'filter_conjunction' : 'And' , 'filters' : [], 'sorts' : [], 'groupbys' : [], 'group_rows' : [], 'groups' : [], 'colorbys' : {}, 'hidden_columns' : [], 'rows' : [], 'formula_rows' : {}, 'link_rows' : {}, 'summaries' : {}, 'colors' : {} }] }] } Table \u00b6 add table \u00b6 \u5728 base \u4e2d\u6dfb\u52a0\u5b50\u8868 base . add_table ( table_name , lang = 'en' ) \u5176\u4e2d table_name: \u9700\u8981\u6dfb\u52a0\u7684\u5b50\u8868\u540d\u79f0 lang\uff1a\u8bed\u8a00\uff0c \u9ed8\u8ba4 en \uff0c \u76ee\u524d\u652f\u6301\u82f1\u6587 ( en )\u548c\u4e2d\u6587 ( zh-cn ) \u4f8b\u5b50 \u00b6 base . add_table ( '\u9879\u76ee\u8c03\u67e5\u8868' , lang = 'zh-cn' ) \u00b6 Base \u4e0a\u7684\u64cd\u4f5c \u00b6 Base \u5bf9\u8c61\u63d0\u4f9b\u4e86\u64cd\u4f5c\u884c\u548c\u5217\uff0c\u4e0a\u4f20\u4e0b\u8f7d\u6587\u4ef6\u7b49\u7684\u63a5\u53e3\uff0c\u8bf7\u53c2\u8003\u6587\u6863 Rows Links Columns Files","title":"Base"},{"location":"python/base/#base","text":"Base \u4ee3\u8868\u4e00\u4e2a\u8868\u683c\u3002\u4f60\u53ef\u4ee5\u7528\u4e24\u79cd\u65b9\u6cd5\u6765\u83b7\u53d6\u8bfb\u5199\u4e00\u4e2a base \u7684\u6388\u6743\u3002\u4e00\u4e2a\u662f\u4f7f\u7528\u5355\u4e2a\u8868\u683c\u7684 api token, \u8fd9\u4e2a token \u53ef\u4ee5\u5728\u7f51\u9875\u7aef\u76f4\u63a5\u751f\u6210\u3002\u5728\u4e91\u7aef\u73af\u5883\u4e0b\u4ece context.api_token \u76f4\u63a5\u8bfb\u53d6\u3002 \u8fd8\u6709\u4e00\u4e2a\u65b9\u6cd5\u662f\u4f7f\u7528\u8d26\u53f7\u540d\u548c\u5bc6\u7801\u6765\u521d\u59cb\u5316\u4e00\u4e2a Account \u5bf9\u8c61\uff0c\u7136\u540e\u8c03\u7528 Account \u7684\u63a5\u53e3\u6765\u83b7\u53d6\u4e00\u4e2a base \u5bf9\u8c61\u3002\u7b2c\u4e00\u79cd\u65b9\u6cd5\u66f4\u52a0\u5b89\u5168\u4e00\u4e9b\u3002","title":"Base \u5bf9\u8c61"},{"location":"python/base/#_1","text":"\u4f7f\u7528\u8868\u683c\u7684 API Token \u6765\u83b7\u53d6\u4e00\u4e2a base \u7684\u8bbf\u95ee\u6388\u6743\u3002","title":"\u83b7\u53d6\u6388\u6743"},{"location":"python/base/#metadata","text":"","title":"Metadata"},{"location":"python/base/#get-metadata","text":"","title":"Get metadata"},{"location":"python/base/#table","text":"","title":"Table"},{"location":"python/base/#add-table","text":"\u5728 base \u4e2d\u6dfb\u52a0\u5b50\u8868 base . add_table ( table_name , lang = 'en' ) \u5176\u4e2d table_name: \u9700\u8981\u6dfb\u52a0\u7684\u5b50\u8868\u540d\u79f0 lang\uff1a\u8bed\u8a00\uff0c \u9ed8\u8ba4 en \uff0c \u76ee\u524d\u652f\u6301\u82f1\u6587 ( en )\u548c\u4e2d\u6587 ( zh-cn )","title":"add table"},{"location":"python/base/#_5","text":"","title":""},{"location":"python/base/#base_1","text":"Base \u5bf9\u8c61\u63d0\u4f9b\u4e86\u64cd\u4f5c\u884c\u548c\u5217\uff0c\u4e0a\u4f20\u4e0b\u8f7d\u6587\u4ef6\u7b49\u7684\u63a5\u53e3\uff0c\u8bf7\u53c2\u8003\u6587\u6863 Rows Links Columns Files","title":"Base \u4e0a\u7684\u64cd\u4f5c"},{"location":"python/columns/","text":"Column \u00b6 List columns \u00b6 \u5217\u51fa\u8868/\u89c6\u56fe\u6240\u6709\u884c base . list_columns ( table_name , view_name = None ) \u4f8b\u5b50 \u00b6 base . list_columns ( 'Table1' ) base . list_columns ( 'Table1' , view_name = 'default' ) Insert column \u00b6 \u63d2\u5165/\u8ffd\u52a0\u5217 base . insert_column ( table_name , column_name , column_type , column_key = None , column_data = None ) \u5176\u4e2d column_key\uff1a\u8981\u63d2\u5165\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u5217\u7684 key\uff0c\u5982\u82e5\u7701\u7565\u5219\u9ed8\u8ba4\u8ffd\u52a0\u4e3a\u6700\u540e\u4e00\u5217 column_type\uff1a\u8bf7\u53c2\u8003 constants column_data: \u4e00\u4e2a\u5217\u7684 config \u4fe1\u606f\uff0c\u521b\u5efa\u94fe\u63a5\u5217\u65f6\u9700\u8981\u6307\u5b9a\uff0c \u5176\u4ed6\u7c7b\u578b\u9009\u62e9\u6027\u5236\u5b9a \u4f8b\u5b50 \u00b6 from seatable_api.constants import ColumnTypes base . insert_column ( 'Table1' , 'python-api' , ColumnTypes . TEXT ) base . insert_column ( 'Table1' , 'python-api' , ColumnTypes . TEXT , '0000' ) base . insert_column ( 'Table1' , 'Link1' , ColumnTypes . LINK , column_data = { 'table' : 'Table1' , 'other_table' : 'Test_User' }) Rename column \u00b6 \u91cd\u547d\u540d\u5217 base . rename_column ( table_name , column_key , new_column_name ) \u4f8b\u5b50 \u00b6 base . rename_column ( 'Table1' , 'kSiR' , 'new-python-api' ) Resize column \u00b6 \u8bbe\u7f6e\u5217\u5bbd base . resize_column ( table_name , column_key , new_column_width ) \u4f8b\u5b50 \u00b6 \u5217\u7684\u9ed8\u8ba4\u5bbd\u5ea6\u4e3a200\uff0c\u5982\u679c\u9700\u8981\u8c03\u6574\u5217\u5bbd\u6bd4\u5982\u8c03\u6574\u4e3a500\uff0c\u5219 base . resize ( 'Table1' , 'asFV' , 500 ) Freeze column \u00b6 \u51bb\u7ed3\u5217 base . freeze_column ( table_name , column_key , frozen ) frozon: True/False \u4f8b\u5b50 \u00b6 base . freeze_column ( 'Table1' , '0000' , True ) Move column \u00b6 base . move_column ( table_name , column_key , target_column_key ) \u5176\u4e2d column_key\uff1a\u8981\u79fb\u52a8\u7684\u5217\u7684 key target_column_key\uff1a \u951a\u5b9a\u5217\u7684 key\uff0c\u88ab\u79fb\u52a8\u7684\u5217\u5c06\u4f1a\u88ab\u79fb\u52a8\u5230\u8be5\u5217\u53f3\u8fb9 \u4f8b\u5b50 \u00b6 base . move_column ( 'Table1' , 'loPx' , '0000' ) \u6b64\u4f8b\u4e2d\uff0c loPx \u5217\u5c06\u4f1a\u88ab\u79fb\u52a8\u5230 0000 \u5217\u7684\u53f3\u8fb9 Modify column type \u00b6 \u8f6c\u6362\u5217\u7c7b\u578b base . modify_column_type ( table_name , column_key , new_column_type ) \u5176\u4e2d column_type\uff1a\u8bf7\u53c2\u8003 constants \u4f8b\u5b50 \u00b6 from seatable_api.constants import ColumnTypes base . modify_column_type ( 'Table1' , 'nePI' , ColumnTypes . NUMBER ) Add column options \u00b6 \u5355\u9009\uff0c\u591a\u9009\u5217\u4e13\u7528\uff0c\u6dfb\u52a0\u9009\u9879 add_column_options(table_name, column, options) \u4f8b\u5b50 \u00b6 base . add_column_options ( 'Table1' , 'My choices' , [ { \"name\" : \"ddd\" , \"color\" : \"#aaa\" , \"textColor\" : \"#000000\" }, { \"name\" : \"eee\" , \"color\" : \"#aaa\" , \"textColor\" : \"#000000\" }, { \"name\" : \"fff\" , \"color\" : \"#aaa\" , \"textColor\" : \"#000000\" }, ]) Add column cascade settings \u00b6 \u5355\u9009\u5217\u4e13\u7528\uff0c\u6dfb\u52a0\u5355\u9009\u9009\u9879\u7684\u7236\u5b50\u53ca\u8054\u5173\u7cfb\uff0c\u8fbe\u5230\u5b50\u5217\u7684\u5355\u9009\u9009\u9879\u6761\u76ee\u6839\u636e\u7236\u5217\u7684\u9009\u9879\u800c\u5b9a\u7684\u6548\u679c add_column_cascade_settings ( table_name , child_column , parent_column , cascade_settings ) \u5176\u4e2d child_column: \u5355\u9009\u5b50\u5217\u7684\u540d\u79f0 parent_column: \u5355\u9009\u7236\u5217\u7684\u540d\u79f0 cascade_settings: \u53ca\u8054\u5173\u7cfb\u8bbe\u7f6e\u6570\u636e \u4f8b\u5b50 \u00b6 base . add_column_cascade_settings ( \"Table1\" , \"single-op-col-c\" , \"single-op-col\" , { \"aaa\" : [ \"aaa-1\" , \"aaa-2\" ], # \u5982\u679c\u7236\u5217\u9009\u62e9 \u201caaa\u201d\uff0c \u5b50\u5217\u53ea\u6709 \u201caaa-1\u201d \u548c \u201caaa-2\u201d \u53ef\u9009 \"bbb\" : [ \"bbb-1\" , \"bbb-2\" ], \"ccc\" : [ \"ccc-1\" , \"ccc-2\" ] }) Delete column \u00b6 \u5220\u9664\u5217 base . delete_column ( table_name , column_key ) \u4f8b\u5b50 \u00b6 base . delete_column ( 'Table1' , 'bsKL' )","title":"Columns"},{"location":"python/columns/#column","text":"","title":"Column"},{"location":"python/columns/#list-columns","text":"\u5217\u51fa\u8868/\u89c6\u56fe\u6240\u6709\u884c base . list_columns ( table_name , view_name = None )","title":"List columns"},{"location":"python/columns/#insert-column","text":"\u63d2\u5165/\u8ffd\u52a0\u5217 base . insert_column ( table_name , column_name , column_type , column_key = None , column_data = None ) \u5176\u4e2d column_key\uff1a\u8981\u63d2\u5165\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u5217\u7684 key\uff0c\u5982\u82e5\u7701\u7565\u5219\u9ed8\u8ba4\u8ffd\u52a0\u4e3a\u6700\u540e\u4e00\u5217 column_type\uff1a\u8bf7\u53c2\u8003 constants column_data: \u4e00\u4e2a\u5217\u7684 config \u4fe1\u606f\uff0c\u521b\u5efa\u94fe\u63a5\u5217\u65f6\u9700\u8981\u6307\u5b9a\uff0c \u5176\u4ed6\u7c7b\u578b\u9009\u62e9\u6027\u5236\u5b9a","title":"Insert column"},{"location":"python/columns/#rename-column","text":"\u91cd\u547d\u540d\u5217 base . rename_column ( table_name , column_key , new_column_name )","title":"Rename column"},{"location":"python/columns/#resize-column","text":"\u8bbe\u7f6e\u5217\u5bbd base . resize_column ( table_name , column_key , new_column_width )","title":"Resize column"},{"location":"python/columns/#freeze-column","text":"\u51bb\u7ed3\u5217 base . freeze_column ( table_name , column_key , frozen ) frozon: True/False","title":"Freeze column"},{"location":"python/columns/#move-column","text":"base . move_column ( table_name , column_key , target_column_key ) \u5176\u4e2d column_key\uff1a\u8981\u79fb\u52a8\u7684\u5217\u7684 key target_column_key\uff1a \u951a\u5b9a\u5217\u7684 key\uff0c\u88ab\u79fb\u52a8\u7684\u5217\u5c06\u4f1a\u88ab\u79fb\u52a8\u5230\u8be5\u5217\u53f3\u8fb9","title":"Move column"},{"location":"python/columns/#modify-column-type","text":"\u8f6c\u6362\u5217\u7c7b\u578b base . modify_column_type ( table_name , column_key , new_column_type ) \u5176\u4e2d column_type\uff1a\u8bf7\u53c2\u8003 constants","title":"Modify column type"},{"location":"python/columns/#add-column-options","text":"\u5355\u9009\uff0c\u591a\u9009\u5217\u4e13\u7528\uff0c\u6dfb\u52a0\u9009\u9879 add_column_options(table_name, column, options)","title":"Add column options"},{"location":"python/columns/#add-column-cascade-settings","text":"\u5355\u9009\u5217\u4e13\u7528\uff0c\u6dfb\u52a0\u5355\u9009\u9009\u9879\u7684\u7236\u5b50\u53ca\u8054\u5173\u7cfb\uff0c\u8fbe\u5230\u5b50\u5217\u7684\u5355\u9009\u9009\u9879\u6761\u76ee\u6839\u636e\u7236\u5217\u7684\u9009\u9879\u800c\u5b9a\u7684\u6548\u679c add_column_cascade_settings ( table_name , child_column , parent_column , cascade_settings ) \u5176\u4e2d child_column: \u5355\u9009\u5b50\u5217\u7684\u540d\u79f0 parent_column: \u5355\u9009\u7236\u5217\u7684\u540d\u79f0 cascade_settings: \u53ca\u8054\u5173\u7cfb\u8bbe\u7f6e\u6570\u636e","title":"Add column cascade settings"},{"location":"python/columns/#delete-column","text":"\u5220\u9664\u5217 base . delete_column ( table_name , column_key )","title":"Delete column"},{"location":"python/constants/","text":"Constants \u00b6 \u5728\u811a\u672c\u4e2d\u53ef\u80fd\u4f1a\u6709\u4e00\u4e9b\u5e38\u91cf\u9700\u8981\u6211\u4eec\u4e86\u89e3\u4e0b ColumnTypes \u00b6 \u5217\u7c7b\u578b\uff0c\u5f53\u63d2\u5165/\u8ffd\u52a0\u5217\u3001\u66f4\u6539\u5217\u7c7b\u578b\u65f6\u7b49\u60c5\u51b5\u9700\u8981\u4f7f\u7528\u5230 from seatable_api.constants import ColumnTypes ColumnTypes . NUMBER # \u6570\u5b57 ColumnTypes . TEXT # \u6587\u672c ColumnTypes . LONG_TEXT # \u957f\u6587\u672c ColumnTypes . CHECKBOX # \u52fe\u9009 ColumnTypes . DATE # \u65e5\u671f\u65f6\u95f4 ColumnTypes . SINGLE_SELECT # \u5355\u9009 ColumnTypes . MULTIPLE_SELECT # \u591a\u9009 ColumnTypes . IMAGE # \u56fe\u7247 ColumnTypes . FILE # \u6587\u4ef6 ColumnTypes . COLLABORATOR # \u534f\u4f5c\u4eba ColumnTypes . LINK # \u94fe\u63a5\u5176\u4ed6\u8bb0\u5f55 ColumnTypes . FORMULA # \u516c\u5f0f ColumnTypes . CREATOR # \u521b\u5efa\u8005 ColumnTypes . CTIME # \u521b\u5efa\u65f6\u95f4 ColumnTypes . LAST_MODIFIER # \u4fee\u6539\u8005 ColumnTypes . MTIME # \u4fee\u6539\u65f6\u95f4 ColumnTypes . GEOLOCATION # \u5730\u5740 ColumnTypes . AUTO_NUMBER # \u81ea\u52a8\u5e8f\u53f7 ColumnTypes . URL # \u94fe\u63a5","title":"Constants"},{"location":"python/constants/#constants","text":"\u5728\u811a\u672c\u4e2d\u53ef\u80fd\u4f1a\u6709\u4e00\u4e9b\u5e38\u91cf\u9700\u8981\u6211\u4eec\u4e86\u89e3\u4e0b","title":"Constants"},{"location":"python/constants/#columntypes","text":"\u5217\u7c7b\u578b\uff0c\u5f53\u63d2\u5165/\u8ffd\u52a0\u5217\u3001\u66f4\u6539\u5217\u7c7b\u578b\u65f6\u7b49\u60c5\u51b5\u9700\u8981\u4f7f\u7528\u5230 from seatable_api.constants import ColumnTypes ColumnTypes . NUMBER # \u6570\u5b57 ColumnTypes . TEXT # \u6587\u672c ColumnTypes . LONG_TEXT # \u957f\u6587\u672c ColumnTypes . CHECKBOX # \u52fe\u9009 ColumnTypes . DATE # \u65e5\u671f\u65f6\u95f4 ColumnTypes . SINGLE_SELECT # \u5355\u9009 ColumnTypes . MULTIPLE_SELECT # \u591a\u9009 ColumnTypes . IMAGE # \u56fe\u7247 ColumnTypes . FILE # \u6587\u4ef6 ColumnTypes . COLLABORATOR # \u534f\u4f5c\u4eba ColumnTypes . LINK # \u94fe\u63a5\u5176\u4ed6\u8bb0\u5f55 ColumnTypes . FORMULA # \u516c\u5f0f ColumnTypes . CREATOR # \u521b\u5efa\u8005 ColumnTypes . CTIME # \u521b\u5efa\u65f6\u95f4 ColumnTypes . LAST_MODIFIER # \u4fee\u6539\u8005 ColumnTypes . MTIME # \u4fee\u6539\u65f6\u95f4 ColumnTypes . GEOLOCATION # \u5730\u5740 ColumnTypes . AUTO_NUMBER # \u81ea\u52a8\u5e8f\u53f7 ColumnTypes . URL # \u94fe\u63a5","title":"ColumnTypes"},{"location":"python/context/","text":"Context \u00b6 \u5f53\u811a\u672c\u5728\u4e91\u7aef\u8fd0\u884c\u65f6, context \u5bf9\u8c61\u63d0\u4f9b\u4e86\u4e0a\u4e0b\u6587\u73af\u5883\u3002\u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b from seatable_api import context context . server_url # \u670d\u52a1\u5668\u5730\u5740\uff0c\u7528\u4e8e\u521d\u59cb\u5316 Base context . api_token # \u8bbf\u95ee\u4e00\u4e2a base \u7528\u7684 API token context . current_table # \u7528\u6237\u624b\u5de5\u8fd0\u884c\u4e00\u4e2a\u811a\u672c\u7684\u65f6\u5019\uff0c\u5f53\u524d\u7528\u6237\u6b63\u5728\u67e5\u770b\u7684\u8868\u683c\u540d context . current_row # \u7528\u6237\u624b\u5de5\u8fd0\u884c\u4e00\u4e2a\u811a\u672c\u7684\u65f6\u5019\uff0c\u5f53\u524d\u5149\u6807\u6240\u5728\u7684\u884c","title":"Context"},{"location":"python/context/#context","text":"\u5f53\u811a\u672c\u5728\u4e91\u7aef\u8fd0\u884c\u65f6, context \u5bf9\u8c61\u63d0\u4f9b\u4e86\u4e0a\u4e0b\u6587\u73af\u5883\u3002\u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b from seatable_api import context context . server_url # \u670d\u52a1\u5668\u5730\u5740\uff0c\u7528\u4e8e\u521d\u59cb\u5316 Base context . api_token # \u8bbf\u95ee\u4e00\u4e2a base \u7528\u7684 API token context . current_table # \u7528\u6237\u624b\u5de5\u8fd0\u884c\u4e00\u4e2a\u811a\u672c\u7684\u65f6\u5019\uff0c\u5f53\u524d\u7528\u6237\u6b63\u5728\u67e5\u770b\u7684\u8868\u683c\u540d context . current_row # \u7528\u6237\u624b\u5de5\u8fd0\u884c\u4e00\u4e2a\u811a\u672c\u7684\u65f6\u5019\uff0c\u5f53\u524d\u5149\u6807\u6240\u5728\u7684\u884c","title":"Context"},{"location":"python/dateutils/","text":"\u65f6\u95f4\u64cd\u4f5c\u51fd\u6570DateUtils \u00b6 \u6211\u4eec\u5728 python \u7684 datetime \u6a21\u5757\u7684\u57fa\u7840\u4e0a\u63d0\u4f9b\u4e00\u7cfb\u5217\u51fd\u6570\u53ef\u4ee5\u5bf9\u65f6\u95f4\u5b57\u7b26\u4e32\u8fdb\u884c\u67e5\u8be2\u4ee5\u53ca\u64cd\u4f5c\u3002 \u51fd\u6570\u5f15\u5165 \u00b6 from seatable_api import dateutils date \u00b6 \u8fd4\u56de ISO \u683c\u5f0f\u5316\u7684\u65e5\u671f dateutils . date ( 2020 , 5 , 16 ) # 2020-05-16 dateadd \u00b6 \u5bf9\u65f6\u95f4\u8fdb\u884c\u52a0\u6cd5\u8fd0\u7b97\uff0c\u901a\u8fc7\u4f20\u9012\u4e0d\u540c\u7684\u5355\u4f4d\u53c2\u6570\u53ef\u4ee5\u52a0\u5e74\uff0c\u6708\uff0c\u5468\uff0c\u65e5\uff0c\u5c0f\u65f6\uff0c\u5206\u949f\uff0c\u79d2\uff0c\u9ed8\u8ba4\u4f7f\u7528\u2018\u65e5\u2019\u4f5c\u4e3a\u5355\u4f4d time_str = \"2020-6-15\" time_str_s = \"2020-6-15 15:23:21\" dateutils . dateadd ( time_str , - 2 , 'years' ) # 2018-06-15T00:00:00 dateutils . dateadd ( time_str , 3 , 'months' ) # 2020-09-15T00:00:00 dateutils . dateadd ( time_str_s , 44 , 'minutes' ) # 2020-06-15T16:07:21 dateutils . dateadd ( time_str_s , 1000 , 'days' ) # 2023-03-12T15:23:21 dateutils . dateadd ( time_str_s , 3 , 'weeks' ) # 2020-07-06T15:23:21 dateutils . dateadd ( time_str_s , - 3 , 'hours' ) # 2020-06-15T12:23:21 dateutils . dateadd ( time_str_s , 3 , 'seconds' ) # 2020-06-15T15:23:24 datediff \u00b6 \u8ba1\u7b97\u4e24\u4e2a\u65e5\u671f\u4e4b\u95f4\u76f8\u9694\u7684\u79d2\u6570\uff0c\u5929\u6570\uff0c \u6708\u6570\uff0c\u5e74\u6570\uff0c \u53c2\u6570\u53ef\u4ee5\u4e3a S, Y, M, D, YM, MD \u5176\u4e2d YM, \u5f00\u59cb\u65f6\u95f4\u4e0e\u7ed3\u675f\u65f6\u95f4\u4e4b\u95f4\u6708\u4efd\u4e4b\u5dee, \u5ffd\u7565\u65e5\u671f\u4e2d\u7684\u5929\u548c\u5e74\u4efd MD, \u5f00\u59cb\u65f6\u95f4\u4e0e\u7ed3\u675f\u65f6\u95f4\u4e4b\u95f4\u5929\u6570\u4e4b\u5dee, \u5ffd\u7565\u65e5\u671f\u4e2d\u7684\u6708\u4efd\u548c\u5e74\u4efd YD, \u5f00\u59cb\u65f6\u95f4\u4e0e\u7ed3\u675f\u65f6\u95f4\u7684\u65e5\u671f\u90e8\u5206\u4e4b\u5dee, \u5ffd\u7565\u65e5\u671f\u4e2d\u7684\u5e74\u4efd\u3002 time_start = \"2019-6-1\" time_end = \"2020-5-15\" dateutils . datediff ( start = time_start , end = time_end , unit = 'S' ) # seconds 30153600 dateutils . datediff ( start = time_start , end = time_end , unit = 'Y' ) # years 1 dateutils . datediff ( start = time_start , end = time_end , unit = 'D' ) # days 349 dateutils . datediff ( start = time_start , end = time_end , unit = 'H' ) # hours 8377 dateutils . datediff ( start = time_start , end = time_end , unit = 'M' ) # months 12 dateutils . datediff ( start = time_start , end = time_end , unit = 'YM' ) # -1 dateutils . datediff ( start = time_start , end = time_end , unit = 'MD' ) # 14 dateutils . datediff ( \"2019-2-28\" , \"2020-2-1\" , unit = 'YD' ) # -27 emonth \u00b6 \u8fd4\u56de\u67d0\u4e2a\u65e5\u671f\u7684\u524d\u4e00\u4e2a\u6708\u6216\u540e\u4e00\u4e2a\u6708\u7684\u6700\u540e\u4e00\u5929\uff0c \u53c2\u6570 direction \u53ef\u4ee5\u4e3a1\u6216-1 dateutils . emonth ( '2020-3-25' , direction =- 1 ) # 2021-02-28 dateutils . emonth ( '2021-3-25' , direction = 1 ) # 2021-04-30 year \u00b6 \u8fd4\u56de\u67d0\u4e2a\u65e5\u671f\u7684\u5e74 dateutils . year ( \"2019-1-1\" ) # 2019 month \u00b6 \u8fd4\u56de\u67d0\u4e2a\u65e5\u671f\u7684\u6708 dateutils . month ( \"2019-5-4\" ) # 5 months \u00b6 \u8fd4\u56de\u4e24\u4e2a\u65e5\u671f\u76f8\u5dee\u7684\u6708\u6570 dateutils . month ( \"2019-5-1\" , \"2020-5-4\" ) # 12 day \u00b6 \u8fd4\u67d0\u4e2a\u65e5\u671f\u7684\u5929 dateutils . day ( '2020-6-15 15:23:21' ) # 15 days \u00b6 \u8fd4\u56de\u4e24\u4e2a\u65e5\u671f\u76f8\u5dee\u7684\u5929\u6570 dateutils . days ( '2019-6-1' , '2020-5-15' ) # 349 hour \u00b6 \u8fd4\u56de\u65f6\u95f4\u7684\u5c0f\u65f6\u6570 dateutils.hour(\"2020-1-1 12:20:30\") # 12 hours \u00b6 \u8fd4\u56de\u4e24\u4e2a\u65e5\u671f\u76f8\u5dee\u7684\u5c0f\u65f6\u6570 dateutils . hours ( \"2019-6-3 20:1:12\" , \"2020-5-3 13:13:13\" ) # 8034 minute \u00b6 \u8fd4\u56de\u65f6\u95f4\u7684\u5206\u949f\u6570 dateutils . minute ( \"2020-5-3 13:13:13\" ) # 13 second \u00b6 \u8fd4\u56de\u65f6\u95f4\u7684\u79d2\u6570 dateutils . second ( \"2020-5-3 13:13:33\" ) # 33 weekday \u00b6 \u8fd4\u56de\u67d0\u4e2a\u65e5\u671f\u662f\u661f\u671f\u51e0, \u8bb0\u5468\u4e00\u4e3a0\uff0c \u5468\u65e5\u4e3a6 dateutils . weekday ( \"2019-6-3\" ) # 0 isoweekday \u00b6 \u57fa\u4e8eiso\u6807\u51c6\uff0c\u8fd4\u56de\u67d0\u4e2a\u65e5\u671f\u662f\u661f\u671f\u51e0\uff0c\u8bb0\u5468\u4e00\u4e3a1\uff0c \u5468\u65e5\u4e3a7 dateutils . isoweekday ( \"2019-6-3\" ) # 1 weeknum \u00b6 \u8fd4\u56de\u67d0\u4e2a\u65e5\u671f\u662f\u5f53\u5e74\u7684\u7b2c\u51e0\u5468\uff0c\u542b1\u67081\u65e5\u4e3a\u5468\u4e3a\u7b2c\u4e00\u5468 dateutils . weeknum ( '2012-1-2' ) # 2 isoweeknum \u00b6 \u8fd4\u56de\u67d0\u4e2a\u65e5\u671f\u5f53\u5e74\u7684 ISO \u5468\u8ba1\u6570\uff0c \u5373\u5f53\u5e74\u7b2c\u4e00\u4e2a\u5468\u56db\u5f00\u59cb\u8bb0\u4e3a\u7b2c\u4e00\u5468 dateutils . isoweeknum ( '2012-1-2' ) # 1 isomonth \u00b6 \u8fd4\u56de\u67d0\u4e2a\u65e5\u671f\u5b57\u7b26\u4e32\u7684 ISO \u683c\u5f0f\u7684\u6708\u4efd dateutils . isomonth ( \"2012-1-2\" ) # 2012-01","title":"\u65e5\u671f\u64cd\u4f5c"},{"location":"python/dateutils/#dateutils","text":"\u6211\u4eec\u5728 python \u7684 datetime \u6a21\u5757\u7684\u57fa\u7840\u4e0a\u63d0\u4f9b\u4e00\u7cfb\u5217\u51fd\u6570\u53ef\u4ee5\u5bf9\u65f6\u95f4\u5b57\u7b26\u4e32\u8fdb\u884c\u67e5\u8be2\u4ee5\u53ca\u64cd\u4f5c\u3002","title":"\u65f6\u95f4\u64cd\u4f5c\u51fd\u6570DateUtils"},{"location":"python/dateutils/#_1","text":"from seatable_api import dateutils","title":"\u51fd\u6570\u5f15\u5165"},{"location":"python/dateutils/#date","text":"\u8fd4\u56de ISO \u683c\u5f0f\u5316\u7684\u65e5\u671f dateutils . date ( 2020 , 5 , 16 ) # 2020-05-16","title":"date"},{"location":"python/dateutils/#dateadd","text":"\u5bf9\u65f6\u95f4\u8fdb\u884c\u52a0\u6cd5\u8fd0\u7b97\uff0c\u901a\u8fc7\u4f20\u9012\u4e0d\u540c\u7684\u5355\u4f4d\u53c2\u6570\u53ef\u4ee5\u52a0\u5e74\uff0c\u6708\uff0c\u5468\uff0c\u65e5\uff0c\u5c0f\u65f6\uff0c\u5206\u949f\uff0c\u79d2\uff0c\u9ed8\u8ba4\u4f7f\u7528\u2018\u65e5\u2019\u4f5c\u4e3a\u5355\u4f4d time_str = \"2020-6-15\" time_str_s = \"2020-6-15 15:23:21\" dateutils . dateadd ( time_str , - 2 , 'years' ) # 2018-06-15T00:00:00 dateutils . dateadd ( time_str , 3 , 'months' ) # 2020-09-15T00:00:00 dateutils . dateadd ( time_str_s , 44 , 'minutes' ) # 2020-06-15T16:07:21 dateutils . dateadd ( time_str_s , 1000 , 'days' ) # 2023-03-12T15:23:21 dateutils . dateadd ( time_str_s , 3 , 'weeks' ) # 2020-07-06T15:23:21 dateutils . dateadd ( time_str_s , - 3 , 'hours' ) # 2020-06-15T12:23:21 dateutils . dateadd ( time_str_s , 3 , 'seconds' ) # 2020-06-15T15:23:24","title":"dateadd"},{"location":"python/dateutils/#datediff","text":"\u8ba1\u7b97\u4e24\u4e2a\u65e5\u671f\u4e4b\u95f4\u76f8\u9694\u7684\u79d2\u6570\uff0c\u5929\u6570\uff0c \u6708\u6570\uff0c\u5e74\u6570\uff0c \u53c2\u6570\u53ef\u4ee5\u4e3a S, Y, M, D, YM, MD \u5176\u4e2d YM, \u5f00\u59cb\u65f6\u95f4\u4e0e\u7ed3\u675f\u65f6\u95f4\u4e4b\u95f4\u6708\u4efd\u4e4b\u5dee, \u5ffd\u7565\u65e5\u671f\u4e2d\u7684\u5929\u548c\u5e74\u4efd MD, \u5f00\u59cb\u65f6\u95f4\u4e0e\u7ed3\u675f\u65f6\u95f4\u4e4b\u95f4\u5929\u6570\u4e4b\u5dee, \u5ffd\u7565\u65e5\u671f\u4e2d\u7684\u6708\u4efd\u548c\u5e74\u4efd YD, \u5f00\u59cb\u65f6\u95f4\u4e0e\u7ed3\u675f\u65f6\u95f4\u7684\u65e5\u671f\u90e8\u5206\u4e4b\u5dee, \u5ffd\u7565\u65e5\u671f\u4e2d\u7684\u5e74\u4efd\u3002 time_start = \"2019-6-1\" time_end = \"2020-5-15\" dateutils . datediff ( start = time_start , end = time_end , unit = 'S' ) # seconds 30153600 dateutils . datediff ( start = time_start , end = time_end , unit = 'Y' ) # years 1 dateutils . datediff ( start = time_start , end = time_end , unit = 'D' ) # days 349 dateutils . datediff ( start = time_start , end = time_end , unit = 'H' ) # hours 8377 dateutils . datediff ( start = time_start , end = time_end , unit = 'M' ) # months 12 dateutils . datediff ( start = time_start , end = time_end , unit = 'YM' ) # -1 dateutils . datediff ( start = time_start , end = time_end , unit = 'MD' ) # 14 dateutils . datediff ( \"2019-2-28\" , \"2020-2-1\" , unit = 'YD' ) # -27","title":"datediff"},{"location":"python/dateutils/#emonth","text":"\u8fd4\u56de\u67d0\u4e2a\u65e5\u671f\u7684\u524d\u4e00\u4e2a\u6708\u6216\u540e\u4e00\u4e2a\u6708\u7684\u6700\u540e\u4e00\u5929\uff0c \u53c2\u6570 direction \u53ef\u4ee5\u4e3a1\u6216-1 dateutils . emonth ( '2020-3-25' , direction =- 1 ) # 2021-02-28 dateutils . emonth ( '2021-3-25' , direction = 1 ) # 2021-04-30","title":"emonth"},{"location":"python/dateutils/#year","text":"\u8fd4\u56de\u67d0\u4e2a\u65e5\u671f\u7684\u5e74 dateutils . year ( \"2019-1-1\" ) # 2019","title":"year"},{"location":"python/dateutils/#month","text":"\u8fd4\u56de\u67d0\u4e2a\u65e5\u671f\u7684\u6708 dateutils . month ( \"2019-5-4\" ) # 5","title":"month"},{"location":"python/dateutils/#months","text":"\u8fd4\u56de\u4e24\u4e2a\u65e5\u671f\u76f8\u5dee\u7684\u6708\u6570 dateutils . month ( \"2019-5-1\" , \"2020-5-4\" ) # 12","title":"months"},{"location":"python/dateutils/#day","text":"\u8fd4\u67d0\u4e2a\u65e5\u671f\u7684\u5929 dateutils . day ( '2020-6-15 15:23:21' ) # 15","title":"day"},{"location":"python/dateutils/#days","text":"\u8fd4\u56de\u4e24\u4e2a\u65e5\u671f\u76f8\u5dee\u7684\u5929\u6570 dateutils . days ( '2019-6-1' , '2020-5-15' ) # 349","title":"days"},{"location":"python/dateutils/#hour","text":"\u8fd4\u56de\u65f6\u95f4\u7684\u5c0f\u65f6\u6570 dateutils.hour(\"2020-1-1 12:20:30\") # 12","title":"hour"},{"location":"python/dateutils/#hours","text":"\u8fd4\u56de\u4e24\u4e2a\u65e5\u671f\u76f8\u5dee\u7684\u5c0f\u65f6\u6570 dateutils . hours ( \"2019-6-3 20:1:12\" , \"2020-5-3 13:13:13\" ) # 8034","title":"hours"},{"location":"python/dateutils/#minute","text":"\u8fd4\u56de\u65f6\u95f4\u7684\u5206\u949f\u6570 dateutils . minute ( \"2020-5-3 13:13:13\" ) # 13","title":"minute"},{"location":"python/dateutils/#second","text":"\u8fd4\u56de\u65f6\u95f4\u7684\u79d2\u6570 dateutils . second ( \"2020-5-3 13:13:33\" ) # 33","title":"second"},{"location":"python/dateutils/#weekday","text":"\u8fd4\u56de\u67d0\u4e2a\u65e5\u671f\u662f\u661f\u671f\u51e0, \u8bb0\u5468\u4e00\u4e3a0\uff0c \u5468\u65e5\u4e3a6 dateutils . weekday ( \"2019-6-3\" ) # 0","title":"weekday"},{"location":"python/dateutils/#isoweekday","text":"\u57fa\u4e8eiso\u6807\u51c6\uff0c\u8fd4\u56de\u67d0\u4e2a\u65e5\u671f\u662f\u661f\u671f\u51e0\uff0c\u8bb0\u5468\u4e00\u4e3a1\uff0c \u5468\u65e5\u4e3a7 dateutils . isoweekday ( \"2019-6-3\" ) # 1","title":"isoweekday"},{"location":"python/dateutils/#weeknum","text":"\u8fd4\u56de\u67d0\u4e2a\u65e5\u671f\u662f\u5f53\u5e74\u7684\u7b2c\u51e0\u5468\uff0c\u542b1\u67081\u65e5\u4e3a\u5468\u4e3a\u7b2c\u4e00\u5468 dateutils . weeknum ( '2012-1-2' ) # 2","title":"weeknum"},{"location":"python/dateutils/#isoweeknum","text":"\u8fd4\u56de\u67d0\u4e2a\u65e5\u671f\u5f53\u5e74\u7684 ISO \u5468\u8ba1\u6570\uff0c \u5373\u5f53\u5e74\u7b2c\u4e00\u4e2a\u5468\u56db\u5f00\u59cb\u8bb0\u4e3a\u7b2c\u4e00\u5468 dateutils . isoweeknum ( '2012-1-2' ) # 1","title":"isoweeknum"},{"location":"python/dateutils/#isomonth","text":"\u8fd4\u56de\u67d0\u4e2a\u65e5\u671f\u5b57\u7b26\u4e32\u7684 ISO \u683c\u5f0f\u7684\u6708\u4efd dateutils . isomonth ( \"2012-1-2\" ) # 2012-01","title":"isomonth"},{"location":"python/files/","text":"Files \u00b6 \u6587\u4ef6\u64cd\u4f5c\u5305\u62ec\u6587\u4ef6\u7684\u4e0b\u8f7d\u548c\u4e0a\u4f20\uff0c\u5176\u5206\u522b\u90fd\u6709\u4e24\u79cd\u65b9\u5f0f\u7684 API \u8c03\u7528\uff0c\u4e00\u79cd\u65b9\u5f0f\u662f\u4fbf\u6377\u65b9\u5f0f\uff0c\u800c\u53e6\u4e00\u79cd\u65b9\u5f0f\u662f\u5206\u6b65\u65b9\u5f0f\u5373\u5c06\u4e0b\u8f7d/\u4e0a\u4f20\u7684\u8fc7\u7a0b\uff1a 1. \u83b7\u53d6\u94fe\u63a5\uff0c 2. \u8bf7\u6c42\u8be5\u94fe\u63a5\u8fdb\u884c\u4e0b\u8f7d/\u4e0a\u4f20\uff0c \u8fdb\u884c\u62c6\u5206\uff0c\u9002\u7528\u4e8e\u590d\u6742\u7684\u573a\u666f\uff0c\u6bd4\u5982\u6587\u4ef6\u6279\u91cf\u4e0b\u8f7d\u3001\u5927\u6587\u4ef6\u4e0a\u4f20\u7b49\u3002\u4e0b\u9762\u5206\u522b\u5bf9\u4ee5\u4e0a\u4e24\u79cd\u65b9\u5f0f API \u7684\u4f7f\u7528\u65b9\u6cd5\u8fdb\u884c\u8be6\u7ec6\u8bf4\u660e\u3002 \u6587\u4ef6\u4e0b\u8f7d \u00b6 \u4fbf\u6377\u65b9\u5f0f \u00b6 \u4e0b\u8f7d\u6587\u4ef6 base . download_file ( file_url , save_path ) \u5176\u4e2d file_url: \u6587\u4ef6\u7684 URL, \u53ef\u4ee5\u4ece\u6587\u4ef6\u5355\u5143\u683c\u4e2d\u83b7\u53d6 save_path: \u6587\u4ef6\u4e0b\u8f7d\u540e\u4fdd\u5b58\u7684\u672c\u5730\u8def\u5f84 \u4f8b\u5b50\u5982\u4e0b file_url = \"https://dev.seafile.com/dtable-web/workspace/74/asset-preview/41cd05da-b29a-4428-bc31-bd66f4600817/files/2020-10/aur7e-jqc19.zip\" save_path = \"/tmp/files/custom.zip\" base . download_file ( file_url , save_path ) \u5206\u6b65\u65b9\u5f0f \u00b6 1) \u901a\u8fc7\u6587\u4ef6\u7684 URL \u83b7\u53d6\u4e0b\u8f7d\u94fe\u63a5 # \u5047\u5982\u60a8\u4eceBase\u7684\u6570\u636e\u4e2d\u83b7\u53d6\u5230\u4e00\u4e2a\u6587\u4ef6url\u4e3a # https://dev.seafile.com/dtable-web/workspace/74/asset-preview/41cd05da-b29a-4428-bc31-bd66f4600817/files/2020-10/aur7e-jqc19.zip # \u5219\u622a\u53d6\u94fe\u63a5\u540e\u534a\u90e8\u5206\u8c03\u7528api download_link = base . get_file_download_link ( 'files/2020-10/aur7e-jqc19.zip' ) 2) \u4f7f\u7528\u4e0b\u8f7d\u94fe\u63a5\u83b7\u53d6\u6587\u4ef6\u5185\u5bb9 import requests response = requests . get ( download_link ) \u6587\u4ef6\u4e0a\u4f20 \u00b6 \u4fbf\u6377\u65b9\u5f0f \u00b6 \u628a\u5185\u5b58\u4e2d\u7684\u5185\u5bb9\u4e0a\u4f20\u4e3a\u4e00\u4e2a\u6587\u4ef6 \u00b6 base . upload_bytes_file ( name , content , file_type = 'file' , replace = False ) \u5176\u4e2d name: \u4e0a\u4f20\u4e4b\u540e\u7684\u6587\u4ef6\u540d content: \u6587\u4ef6\u7684\u5185\u5bb9\uff0c\u662f\u4e00\u4e2a bytes \u5bf9\u8c61 file_type: image \u6216\u8005 file\uff0c\u82e5\u4e0d\u8bbe\u7f6e\u5219\u9ed8\u8ba4\u662f file replace: \u662f\u5426\u66ff\u6362\u540c\u540d\u6587\u4ef6\uff0c\u9ed8\u8ba4\u4e3a False \u8fd4\u56de\u5185\u5bb9\u4e3a\u6587\u4ef6\u7684\u5b57\u5178\u4fe1\u606f { 'type': str, \u6587\u4ef6\u7c7b\u578b 'size': int, \u6587\u4ef6\u5927\u5c0f 'name': str, \u6587\u4ef6\u540d 'url': str, \u6587\u4ef6url\u8def\u5f84 } \u4f8b\u5b50 1, \u4e0a\u4f20\u7f51\u7edc\u4e0a\u7684\u4e00\u4e2a\u6587\u4ef6 import requests file_url = 'http://www.baidu.com/xxx/xxx/xxx.txt' response = requests . get ( file_url ) info_dict = base . upload_bytes_file ( 'my_uploaded_file.txt' , response . content ) \u4f8b\u5b50 2, \u4e0a\u4f20\u672c\u5730\u7684\u56fe\u7247 local_img_file = '/Users/Desktop/a.png' with open ( local_img_file , 'rb' ) as f : content = f . read () info_dict = base . upload_bytes_file ( 'my_uploaded_img.png' , content , file_type = 'image' ) \u7528\u6587\u4ef6\u8def\u5f84\u4e0a\u4f20\u672c\u5730\u7684\u4e00\u4e2a\u6587\u4ef6 \u00b6 base . upload_local_file ( file_path , name = None , file_type = 'file' , replace = False ) \u5176\u4e2d file_path: \u672c\u5730\u7684\u6587\u4ef6\u8def\u5f84 name: \u4e0a\u4f20\u4e4b\u540e\u7684\u6587\u4ef6\u540d\uff0c \u82e5\u4e3a None \u5219\u9ed8\u8ba4\u7528\u672c\u5730\u6587\u4ef6\u540d \u5176\u4ed6\u53c2\u6570\u4ee5\u53ca\u8fd4\u56de\u503c\u683c\u5f0f\u540c upload_bytes_file \u4f8b\u5b50\uff1a local_file = '/Users/Desktop/a.png' info_dict = base . upload_local_file ( local_file , name = 'my_uploaded_img.png' , file_type = 'image' , replace = True ) \u66f4\u65b0\u8868\u683c \u00b6 \u4e0a\u9762\u7684\u6b65\u9aa4\u53ea\u662f\u4e0a\u4f20\u4e86\u6587\u4ef6\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u5229\u7528\u4e0a\u8ff0\u7684\u8fd4\u56de\u5b57\u5178 info_dict\uff0c \u5c06\u6587\u4ef6/\u56fe\u7247\u66f4\u65b0\u5230\u8868\u683c\u4e2d\u6307\u5b9a\u6587\u4ef6/\u56fe\u7247\u5217\u4e2d \u4ee5\u66f4\u65b0\u5230 base \u5b50\u8868\u540d\u79f0\u4e3a \u201cTable1\u201d \u7684\u5b50\u8868\u4e2d\u4e3a\u4f8b # \u66f4\u65b0\u5230\u56fe\u7247\u5355\u5143\u683c, \u5217\u540d\u4e3a img_col img_url = info_dict . get ( 'url' ) row [ 'img_col' ] = [ img_url ] base . update_row ( 'Table1' , row [ '_id' ], row ) # \u66f4\u65b0\u6587\u4ef6\u5355\u5143\u683c, \u5217\u540d\u4e3a file_col row [ 'file_col' ] = [ info_dict ] base . update_row ( 'Table1' , row [ '_id' ], row ) # \u5982\u679c row \u4e2d\u5df2\u7ecf\u6709\u56fe\u7247/\u6587\u4ef6\uff0c \u5219 row [ 'img_col' ] . append ([ img_url ]) base . update_row ( 'TableName' , row [ '_id' ], row ) row [ 'file_col' ] . append ([ info_dict ]) base . update_row ( 'Table1' , row [ '_id' ], row ) \u5206\u6b65\u65b9\u5f0f\u4e0a\u4f20\u6587\u4ef6 \u00b6 \u83b7\u53d6\u6587\u4ef6\u4e0a\u4f20\u94fe\u63a5\u4ee5\u53ca\u4e0a\u4f20\u8def\u5f84 base . get_file_upload_link () \u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\u5982 { \"parent_path\" : \"/asset/3a9d8266-78.....\" , \"upload_link\" : \"http://..../upload-api/ea44c4f4...../\" } \u5176\u4e2d upload_link: \u4e0a\u4f20\u94fe\u63a5 parent_path: \u670d\u52a1\u5668\u5206\u914d\u7684\u76f8\u5bf9\u76ee\u5f55\uff0c\u4e0a\u4f20\u6587\u4ef6\u65f6\u9700\u8981\u4f7f\u7528\u8be5\u8def\u5f84 \u4ee5\u5c06\u672c\u5730 /User/Desktop/file.txt \u6587\u4ef6\u4e0a\u4f20\u81f3\u670d\u52a1\u5668\u4e3a\u4f8b # \u83b7\u53d6\u6587\u4ef6\u4e0a\u4f20\u94fe\u63a5\u4ee5\u53ca\u670d\u52a1\u5668\u5206\u914d\u7684\u76f8\u5bf9\u76ee\u5f55 upload_link_dict = base . get_file_upload_link () parent_dir = upload_link_dict [ 'parent_path' ] upload_link = upload_link_dict [ 'upload_link' ] + '?ret-json=1' # \u5f80\u4e0a\u4f20\u94fe\u63a5\u4e2d\u4e0a\u4f20\u6587\u4ef6 upload_file_name = \"file_uploaded.txt\" # \u4e0a\u4f20\u4e4b\u540e\u7684\u6587\u4ef6\u540d replace = 1 # \u82e5\u4e0a\u4f20\u540c\u540d\u6587\u4ef6\u5219\u66ff\u6362 response = requests . post ( upload_link , data = { 'parent_dir' : parent_dir , 'replace' : 1 if replace else 0 # \u5982\u679c\u4e0a\u4f20\u8fc7\u540c\u540d\u6587\u4ef6\u662f\u5426\u8981\u66ff\u6362 }, files = { 'file' : ( upload_file_name , open ( '/User/Desktop/file.txt' , 'rb' )) # \u8981\u4e0a\u4f20\u7684\u6587\u4ef6 })","title":"Files"},{"location":"python/files/#files","text":"\u6587\u4ef6\u64cd\u4f5c\u5305\u62ec\u6587\u4ef6\u7684\u4e0b\u8f7d\u548c\u4e0a\u4f20\uff0c\u5176\u5206\u522b\u90fd\u6709\u4e24\u79cd\u65b9\u5f0f\u7684 API \u8c03\u7528\uff0c\u4e00\u79cd\u65b9\u5f0f\u662f\u4fbf\u6377\u65b9\u5f0f\uff0c\u800c\u53e6\u4e00\u79cd\u65b9\u5f0f\u662f\u5206\u6b65\u65b9\u5f0f\u5373\u5c06\u4e0b\u8f7d/\u4e0a\u4f20\u7684\u8fc7\u7a0b\uff1a 1. \u83b7\u53d6\u94fe\u63a5\uff0c 2. \u8bf7\u6c42\u8be5\u94fe\u63a5\u8fdb\u884c\u4e0b\u8f7d/\u4e0a\u4f20\uff0c \u8fdb\u884c\u62c6\u5206\uff0c\u9002\u7528\u4e8e\u590d\u6742\u7684\u573a\u666f\uff0c\u6bd4\u5982\u6587\u4ef6\u6279\u91cf\u4e0b\u8f7d\u3001\u5927\u6587\u4ef6\u4e0a\u4f20\u7b49\u3002\u4e0b\u9762\u5206\u522b\u5bf9\u4ee5\u4e0a\u4e24\u79cd\u65b9\u5f0f API \u7684\u4f7f\u7528\u65b9\u6cd5\u8fdb\u884c\u8be6\u7ec6\u8bf4\u660e\u3002","title":"Files"},{"location":"python/files/#_1","text":"","title":"\u6587\u4ef6\u4e0b\u8f7d"},{"location":"python/files/#_2","text":"\u4e0b\u8f7d\u6587\u4ef6 base . download_file ( file_url , save_path ) \u5176\u4e2d file_url: \u6587\u4ef6\u7684 URL, \u53ef\u4ee5\u4ece\u6587\u4ef6\u5355\u5143\u683c\u4e2d\u83b7\u53d6 save_path: \u6587\u4ef6\u4e0b\u8f7d\u540e\u4fdd\u5b58\u7684\u672c\u5730\u8def\u5f84 \u4f8b\u5b50\u5982\u4e0b file_url = \"https://dev.seafile.com/dtable-web/workspace/74/asset-preview/41cd05da-b29a-4428-bc31-bd66f4600817/files/2020-10/aur7e-jqc19.zip\" save_path = \"/tmp/files/custom.zip\" base . download_file ( file_url , save_path )","title":"\u4fbf\u6377\u65b9\u5f0f"},{"location":"python/files/#_3","text":"1) \u901a\u8fc7\u6587\u4ef6\u7684 URL \u83b7\u53d6\u4e0b\u8f7d\u94fe\u63a5 # \u5047\u5982\u60a8\u4eceBase\u7684\u6570\u636e\u4e2d\u83b7\u53d6\u5230\u4e00\u4e2a\u6587\u4ef6url\u4e3a # https://dev.seafile.com/dtable-web/workspace/74/asset-preview/41cd05da-b29a-4428-bc31-bd66f4600817/files/2020-10/aur7e-jqc19.zip # \u5219\u622a\u53d6\u94fe\u63a5\u540e\u534a\u90e8\u5206\u8c03\u7528api download_link = base . get_file_download_link ( 'files/2020-10/aur7e-jqc19.zip' ) 2) \u4f7f\u7528\u4e0b\u8f7d\u94fe\u63a5\u83b7\u53d6\u6587\u4ef6\u5185\u5bb9 import requests response = requests . get ( download_link )","title":"\u5206\u6b65\u65b9\u5f0f"},{"location":"python/files/#_4","text":"","title":"\u6587\u4ef6\u4e0a\u4f20"},{"location":"python/files/#_5","text":"","title":"\u4fbf\u6377\u65b9\u5f0f"},{"location":"python/files/#_6","text":"base . upload_bytes_file ( name , content , file_type = 'file' , replace = False ) \u5176\u4e2d name: \u4e0a\u4f20\u4e4b\u540e\u7684\u6587\u4ef6\u540d content: \u6587\u4ef6\u7684\u5185\u5bb9\uff0c\u662f\u4e00\u4e2a bytes \u5bf9\u8c61 file_type: image \u6216\u8005 file\uff0c\u82e5\u4e0d\u8bbe\u7f6e\u5219\u9ed8\u8ba4\u662f file replace: \u662f\u5426\u66ff\u6362\u540c\u540d\u6587\u4ef6\uff0c\u9ed8\u8ba4\u4e3a False \u8fd4\u56de\u5185\u5bb9\u4e3a\u6587\u4ef6\u7684\u5b57\u5178\u4fe1\u606f { 'type': str, \u6587\u4ef6\u7c7b\u578b 'size': int, \u6587\u4ef6\u5927\u5c0f 'name': str, \u6587\u4ef6\u540d 'url': str, \u6587\u4ef6url\u8def\u5f84 } \u4f8b\u5b50 1, \u4e0a\u4f20\u7f51\u7edc\u4e0a\u7684\u4e00\u4e2a\u6587\u4ef6 import requests file_url = 'http://www.baidu.com/xxx/xxx/xxx.txt' response = requests . get ( file_url ) info_dict = base . upload_bytes_file ( 'my_uploaded_file.txt' , response . content ) \u4f8b\u5b50 2, \u4e0a\u4f20\u672c\u5730\u7684\u56fe\u7247 local_img_file = '/Users/Desktop/a.png' with open ( local_img_file , 'rb' ) as f : content = f . read () info_dict = base . upload_bytes_file ( 'my_uploaded_img.png' , content , file_type = 'image' )","title":"\u628a\u5185\u5b58\u4e2d\u7684\u5185\u5bb9\u4e0a\u4f20\u4e3a\u4e00\u4e2a\u6587\u4ef6"},{"location":"python/files/#_7","text":"base . upload_local_file ( file_path , name = None , file_type = 'file' , replace = False ) \u5176\u4e2d file_path: \u672c\u5730\u7684\u6587\u4ef6\u8def\u5f84 name: \u4e0a\u4f20\u4e4b\u540e\u7684\u6587\u4ef6\u540d\uff0c \u82e5\u4e3a None \u5219\u9ed8\u8ba4\u7528\u672c\u5730\u6587\u4ef6\u540d \u5176\u4ed6\u53c2\u6570\u4ee5\u53ca\u8fd4\u56de\u503c\u683c\u5f0f\u540c upload_bytes_file \u4f8b\u5b50\uff1a local_file = '/Users/Desktop/a.png' info_dict = base . upload_local_file ( local_file , name = 'my_uploaded_img.png' , file_type = 'image' , replace = True )","title":"\u7528\u6587\u4ef6\u8def\u5f84\u4e0a\u4f20\u672c\u5730\u7684\u4e00\u4e2a\u6587\u4ef6"},{"location":"python/files/#_8","text":"\u4e0a\u9762\u7684\u6b65\u9aa4\u53ea\u662f\u4e0a\u4f20\u4e86\u6587\u4ef6\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u5229\u7528\u4e0a\u8ff0\u7684\u8fd4\u56de\u5b57\u5178 info_dict\uff0c \u5c06\u6587\u4ef6/\u56fe\u7247\u66f4\u65b0\u5230\u8868\u683c\u4e2d\u6307\u5b9a\u6587\u4ef6/\u56fe\u7247\u5217\u4e2d \u4ee5\u66f4\u65b0\u5230 base \u5b50\u8868\u540d\u79f0\u4e3a \u201cTable1\u201d \u7684\u5b50\u8868\u4e2d\u4e3a\u4f8b # \u66f4\u65b0\u5230\u56fe\u7247\u5355\u5143\u683c, \u5217\u540d\u4e3a img_col img_url = info_dict . get ( 'url' ) row [ 'img_col' ] = [ img_url ] base . update_row ( 'Table1' , row [ '_id' ], row ) # \u66f4\u65b0\u6587\u4ef6\u5355\u5143\u683c, \u5217\u540d\u4e3a file_col row [ 'file_col' ] = [ info_dict ] base . update_row ( 'Table1' , row [ '_id' ], row ) # \u5982\u679c row \u4e2d\u5df2\u7ecf\u6709\u56fe\u7247/\u6587\u4ef6\uff0c \u5219 row [ 'img_col' ] . append ([ img_url ]) base . update_row ( 'TableName' , row [ '_id' ], row ) row [ 'file_col' ] . append ([ info_dict ]) base . update_row ( 'Table1' , row [ '_id' ], row )","title":"\u66f4\u65b0\u8868\u683c"},{"location":"python/files/#_9","text":"\u83b7\u53d6\u6587\u4ef6\u4e0a\u4f20\u94fe\u63a5\u4ee5\u53ca\u4e0a\u4f20\u8def\u5f84 base . get_file_upload_link () \u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\u5982 { \"parent_path\" : \"/asset/3a9d8266-78.....\" , \"upload_link\" : \"http://..../upload-api/ea44c4f4...../\" } \u5176\u4e2d upload_link: \u4e0a\u4f20\u94fe\u63a5 parent_path: \u670d\u52a1\u5668\u5206\u914d\u7684\u76f8\u5bf9\u76ee\u5f55\uff0c\u4e0a\u4f20\u6587\u4ef6\u65f6\u9700\u8981\u4f7f\u7528\u8be5\u8def\u5f84 \u4ee5\u5c06\u672c\u5730 /User/Desktop/file.txt \u6587\u4ef6\u4e0a\u4f20\u81f3\u670d\u52a1\u5668\u4e3a\u4f8b # \u83b7\u53d6\u6587\u4ef6\u4e0a\u4f20\u94fe\u63a5\u4ee5\u53ca\u670d\u52a1\u5668\u5206\u914d\u7684\u76f8\u5bf9\u76ee\u5f55 upload_link_dict = base . get_file_upload_link () parent_dir = upload_link_dict [ 'parent_path' ] upload_link = upload_link_dict [ 'upload_link' ] + '?ret-json=1' # \u5f80\u4e0a\u4f20\u94fe\u63a5\u4e2d\u4e0a\u4f20\u6587\u4ef6 upload_file_name = \"file_uploaded.txt\" # \u4e0a\u4f20\u4e4b\u540e\u7684\u6587\u4ef6\u540d replace = 1 # \u82e5\u4e0a\u4f20\u540c\u540d\u6587\u4ef6\u5219\u66ff\u6362 response = requests . post ( upload_link , data = { 'parent_dir' : parent_dir , 'replace' : 1 if replace else 0 # \u5982\u679c\u4e0a\u4f20\u8fc7\u540c\u540d\u6587\u4ef6\u662f\u5426\u8981\u66ff\u6362 }, files = { 'file' : ( upload_file_name , open ( '/User/Desktop/file.txt' , 'rb' )) # \u8981\u4e0a\u4f20\u7684\u6587\u4ef6 })","title":"\u5206\u6b65\u65b9\u5f0f\u4e0a\u4f20\u6587\u4ef6"},{"location":"python/libs/","text":"\u4e91\u7aef\u73af\u5883\u4e0b\u652f\u6301\u7684\u5e93\u5217\u8868 \u00b6 \u5728\u4e91\u7aef\u73af\u5883\u4e0b\uff0cPython \u811a\u672c\u5b9e\u9645\u4e0a\u662f\u5728\u4e00\u4e2a Docker \u5bb9\u5668\u73af\u5883\u4e0b\u8fd0\u884c\u3002\u5bb9\u5668\u73af\u5883\u9ed8\u8ba4\u5b89\u88c5\u4e86\u4e00\u4e9b Python \u5e93\uff0c\u8fd9\u4e9b\u5e93\u53ef\u4ee5\u5728\u811a\u672c\u4e2d\u5bfc\u5165\u3002\u5982\u679c\u4f60\u9700\u8981\u7528\u5230\u5176\u4ed6\u7684\u5e93\uff0c\u9700\u8981\u548c\u6211\u4eec\u8054\u7cfb\uff0c\u6216\u8005\u4f60\u7684\u811a\u672c\u53ea\u80fd\u5728\u4f60\u7684\u672c\u5730\u8fd0\u884c\u3002 Python 3 \u6807\u51c6\u5e93 \u00b6 \u4e91\u7aef\u73af\u5883\u73b0\u5728\u4f7f\u7528\u7684\u662f Python 3.7, \u652f\u6301\u5bfc\u5165 Python \u6807\u51c6\u5e93\u4e2d\u7684\u6a21\u5757\u3002 \u7b2c\u4e09\u65b9\u5e93 \u00b6 \u5982\u4e0b\u6a21\u5757\u53ef\u4f9b\u4f7f\u7528 SeaTable API \u5e93, seatable-api \u65e5\u671f/\u65f6\u95f4\u8fd0\u7b97\u7684\u5de5\u5177\u5e93, dateutils http \u8bf7\u6c42\u5e93, requests OpenSSL \u5e93, pyOpenSSL","title":"\u4e91\u7aef\u73af\u5883\u4e0b\u652f\u6301\u7684\u5e93"},{"location":"python/libs/#_1","text":"\u5728\u4e91\u7aef\u73af\u5883\u4e0b\uff0cPython \u811a\u672c\u5b9e\u9645\u4e0a\u662f\u5728\u4e00\u4e2a Docker \u5bb9\u5668\u73af\u5883\u4e0b\u8fd0\u884c\u3002\u5bb9\u5668\u73af\u5883\u9ed8\u8ba4\u5b89\u88c5\u4e86\u4e00\u4e9b Python \u5e93\uff0c\u8fd9\u4e9b\u5e93\u53ef\u4ee5\u5728\u811a\u672c\u4e2d\u5bfc\u5165\u3002\u5982\u679c\u4f60\u9700\u8981\u7528\u5230\u5176\u4ed6\u7684\u5e93\uff0c\u9700\u8981\u548c\u6211\u4eec\u8054\u7cfb\uff0c\u6216\u8005\u4f60\u7684\u811a\u672c\u53ea\u80fd\u5728\u4f60\u7684\u672c\u5730\u8fd0\u884c\u3002","title":"\u4e91\u7aef\u73af\u5883\u4e0b\u652f\u6301\u7684\u5e93\u5217\u8868"},{"location":"python/libs/#python-3","text":"\u4e91\u7aef\u73af\u5883\u73b0\u5728\u4f7f\u7528\u7684\u662f Python 3.7, \u652f\u6301\u5bfc\u5165 Python \u6807\u51c6\u5e93\u4e2d\u7684\u6a21\u5757\u3002","title":"Python 3 \u6807\u51c6\u5e93"},{"location":"python/libs/#_2","text":"\u5982\u4e0b\u6a21\u5757\u53ef\u4f9b\u4f7f\u7528 SeaTable API \u5e93, seatable-api \u65e5\u671f/\u65f6\u95f4\u8fd0\u7b97\u7684\u5de5\u5177\u5e93, dateutils http \u8bf7\u6c42\u5e93, requests OpenSSL \u5e93, pyOpenSSL","title":"\u7b2c\u4e09\u65b9\u5e93"},{"location":"python/links/","text":"Links \u00b6 Add link \u00b6 \u6dfb\u52a0\u94fe\u63a5\uff0c\u94fe\u63a5\u5176\u4ed6\u8868\u8bb0\u5f55 base . add_link ( link_id , table_name , other_table_name , row_id , other_row_id ) \u5176\u4e2d link_id: \u94fe\u63a5\u5217 data \u5c5e\u6027\u4e0b\u7684 link_id (\u4f60\u53ef\u4ee5\u83b7\u53d6 base \u7684 metadata\uff0c\u627e\u5230\u5bf9\u5e94\u7684\u5217\uff0c\u7136\u540e\u627e\u4e00\u4e0b data \u5b57\u6bb5\u4e0b\u7684 link_id \u5b57\u6bb5) table_name: \u94fe\u63a5\u8868\u7684\u540d\u5b57 other_table_name: \u88ab\u94fe\u63a5\u8868\u7684\u540d\u5b57 row_id: \u94fe\u63a5\u884c id other_row_id: \u88ab\u94fe\u63a5\u884c\u7684 id \u4f8b\u5b50 \u00b6 base . add_link ( '5WeC' , 'real-img-files' , 'contact' , 'CGtoJB1oQM60RiKT-c5J-g' , 'PALm2wPKTCy-jdJNv_UWaQ' ) Update link \u00b6 \u66f4\u65b0\u94fe\u63a5\u4fe1\u606f update_link(self, link_id, table_id, other_table_id, row_id, other_rows_ids) \u5176\u4e2d link_id: \u94fe\u63a5\u5217 data \u5c5e\u6027\u4e0b\u7684 link_id table_id: \u94fe\u63a5\u8868\u7684 id other_table_id: \u88ab\u94fe\u63a5\u8868\u7684 id row_id: \u94fe\u63a5\u884c id other_rows_ids: \u88ab\u94fe\u63a5\u884c\u7684 id \u5217\u8868 \u4f8b\u5b50 \u00b6 base . update_link ( link_id = 'r4IJ' , table_id = '0000' , other_table_id = 'kFoO' , row_id = 'BXhEm9ucTNu3FjupIk7Xug' , other_rows_ids = [ 'exkb56fAT66j8R0w6wD9Qg' , 'DjHjwmlRRB6WgU9uPnrWeA' ] ) Batch update links \u00b6 \u6279\u91cf\u66f4\u65b0\u94fe\u63a5\u4fe1\u606f base.batch_update_links(link_id, table_id, other_table_id, row_id_list, other_rows_ids_map) \u4f8b\u5b50 \u00b6 link_id = \"WaW5\" table_id = \"0000\" other_table_id = \"jtsf\" row_id_list = [ \"fRLglslWQYSGmkU7o6KyHw\" , \"eSQe9OpPQxih8A9zPXdMVA\" , \"FseN8ygVTzq1CHDqI4NjjQ\" ] other_rows_ids_map = { \"FseN8ygVTzq1CHDqI4NjjQ\" :[ \"OcCE8aX8T7a4dvJr-qNh3g\" , \"JckTyhN0TeS8yvH8D3EN7g\" ], \"eSQe9OpPQxih8A9zPXdMVA\" :[ \"cWHbzQiTR8uHHzH_gVSKIg\" , \"X56gE7BrRF-i61YlE4oTcw\" ], \"fRLglslWQYSGmkU7o6KyHw\" :[ \"MdfUQiWcTL--uMlrGtqqgw\" , \"E7Sh3FboSPmfBlDsrj_Fhg\" , \"UcZ7w9wDT-uVq4Ohtwgy9w\" ] } base . batch_update_links ( link_id , table_id , other_table_id , row_id_list , other_rows_ids_map ) Remove link \u00b6 \u79fb\u9664\u67d0\u4e2a\u94fe\u63a5 base . remove_link ( link_id , table_name , other_table_name , row_id , other_row_id ) \u4f8b\u5b50 \u00b6 base . remove_link ( '5WeC' , 'real-img-files' , 'contact' , 'CGtoJB1oQM60RiKT-c5J-g' , 'PALm2wPKTCy-jdJNv_UWaQ' ) Get link id \u00b6 \u901a\u8fc7\u5217\u540d\u6765\u83b7\u53d6\u94fe\u63a5\u7684id base . get_column_link_id ( table_name , column_name , view_name = None ) \u4f8b\u5b50 \u00b6 base . get_column_link_id ( 'Table1' , '\u8bb0\u5f55' ) # \u8fd4\u56de\u94fe\u63a5\u7684id\uff0c\u5982\u2018aHL2\u2019","title":"Links"},{"location":"python/links/#links","text":"","title":"Links"},{"location":"python/links/#add-link","text":"\u6dfb\u52a0\u94fe\u63a5\uff0c\u94fe\u63a5\u5176\u4ed6\u8868\u8bb0\u5f55 base . add_link ( link_id , table_name , other_table_name , row_id , other_row_id ) \u5176\u4e2d link_id: \u94fe\u63a5\u5217 data \u5c5e\u6027\u4e0b\u7684 link_id (\u4f60\u53ef\u4ee5\u83b7\u53d6 base \u7684 metadata\uff0c\u627e\u5230\u5bf9\u5e94\u7684\u5217\uff0c\u7136\u540e\u627e\u4e00\u4e0b data \u5b57\u6bb5\u4e0b\u7684 link_id \u5b57\u6bb5) table_name: \u94fe\u63a5\u8868\u7684\u540d\u5b57 other_table_name: \u88ab\u94fe\u63a5\u8868\u7684\u540d\u5b57 row_id: \u94fe\u63a5\u884c id other_row_id: \u88ab\u94fe\u63a5\u884c\u7684 id","title":"Add link"},{"location":"python/links/#update-link","text":"\u66f4\u65b0\u94fe\u63a5\u4fe1\u606f update_link(self, link_id, table_id, other_table_id, row_id, other_rows_ids) \u5176\u4e2d link_id: \u94fe\u63a5\u5217 data \u5c5e\u6027\u4e0b\u7684 link_id table_id: \u94fe\u63a5\u8868\u7684 id other_table_id: \u88ab\u94fe\u63a5\u8868\u7684 id row_id: \u94fe\u63a5\u884c id other_rows_ids: \u88ab\u94fe\u63a5\u884c\u7684 id \u5217\u8868","title":"Update link"},{"location":"python/links/#batch-update-links","text":"\u6279\u91cf\u66f4\u65b0\u94fe\u63a5\u4fe1\u606f base.batch_update_links(link_id, table_id, other_table_id, row_id_list, other_rows_ids_map)","title":"Batch update links"},{"location":"python/links/#remove-link","text":"\u79fb\u9664\u67d0\u4e2a\u94fe\u63a5 base . remove_link ( link_id , table_name , other_table_name , row_id , other_row_id )","title":"Remove link"},{"location":"python/links/#get-link-id","text":"\u901a\u8fc7\u5217\u540d\u6765\u83b7\u53d6\u94fe\u63a5\u7684id base . get_column_link_id ( table_name , column_name , view_name = None )","title":"Get link id"},{"location":"python/message/","text":"Message \u00b6 \u5fae\u4fe1\u53d1\u9001 \u00b6 base . send_wechat_msg ( account_name , msg ) \u5176\u4e2d account_name\uff1a \u7b2c\u4e09\u65b9\u8d26\u6237\u540d\u79f0 msg\uff1a \u6d88\u606f\u4e3b\u4f53 \u4f8b\u5b50 base . send_wechat_msg ( \"My wechat group\" , \"\u60a8\u597d\uff0c \u6211\u662f\u7ba1\u7406\u5458\uff0c \u8bf7\u591a\u5173\u7167\uff01\" ) \u90ae\u4ef6\u53d1\u9001 \u00b6 base . send_email ( account_name , msg , ** kwargs ) \u5176\u4e2d account_name: \u7b2c\u4e09\u65b9\u8d26\u6237\u540d\u79f0 msg\uff1a\u6d88\u606f\u4e3b\u4f53 kwargs: \u5176\u4ed6\u53c2\u6570\uff1a send_to (\u5fc5\u586b)\uff1a\u63a5\u6536\u65b9\u7684\u90ae\u4ef6\uff0c\u53ef\u4ee5\u662f\u5217\u8868\u5305\u542b\u591a\u4e2a\u90ae\u4ef6\u3002 subject (\u5fc5\u586b)\uff1a \u90ae\u4ef6\u4e3b\u9898 from\uff1a\u53d1\u4ef6\u4eba, \u5982\u679c\u672a\u8bbe\u7f6e\uff0c\u9ed8\u8ba4\u90ae\u7bb1\u670d\u52a1\u5668\u7684 host_user copy_to: \u6284\u9001\u65b9\u90ae\u4ef6\uff0c \u53ef\u4ee5\u662f\u5217\u8868\u5305\u542b\u591a\u4e2a\u90ae\u4ef6 reply_to: \u56de\u590d\u90ae\u4ef6 quit_after_send: True \u6216\u8005 False\uff0c \u9ed8\u8ba4\u662f False\u3002 \u53d1\u9001\u5b8c\u6210\u4e4b\u540e\u662f\u5426\u5173\u95ed\u4e0e\u670d\u52a1\u5668\u7684\u94fe\u63a5\u3002 \u4f8b\u5b50 base . send_email ( \"My email account\" , \"\u60a8\u597d\uff0c\u8bf7\u67e5\u6536\u90ae\u4ef6\" , subject = \"Test\" , send_to = [ '350178982@qq.com' , \"r350178982@126.com\" ], copy_to = 'jiwei_ran@sina.com' )","title":"Message"},{"location":"python/message/#message","text":"","title":"Message"},{"location":"python/message/#_1","text":"base . send_wechat_msg ( account_name , msg ) \u5176\u4e2d account_name\uff1a \u7b2c\u4e09\u65b9\u8d26\u6237\u540d\u79f0 msg\uff1a \u6d88\u606f\u4e3b\u4f53 \u4f8b\u5b50 base . send_wechat_msg ( \"My wechat group\" , \"\u60a8\u597d\uff0c \u6211\u662f\u7ba1\u7406\u5458\uff0c \u8bf7\u591a\u5173\u7167\uff01\" )","title":"\u5fae\u4fe1\u53d1\u9001"},{"location":"python/message/#_2","text":"base . send_email ( account_name , msg , ** kwargs ) \u5176\u4e2d account_name: \u7b2c\u4e09\u65b9\u8d26\u6237\u540d\u79f0 msg\uff1a\u6d88\u606f\u4e3b\u4f53 kwargs: \u5176\u4ed6\u53c2\u6570\uff1a send_to (\u5fc5\u586b)\uff1a\u63a5\u6536\u65b9\u7684\u90ae\u4ef6\uff0c\u53ef\u4ee5\u662f\u5217\u8868\u5305\u542b\u591a\u4e2a\u90ae\u4ef6\u3002 subject (\u5fc5\u586b)\uff1a \u90ae\u4ef6\u4e3b\u9898 from\uff1a\u53d1\u4ef6\u4eba, \u5982\u679c\u672a\u8bbe\u7f6e\uff0c\u9ed8\u8ba4\u90ae\u7bb1\u670d\u52a1\u5668\u7684 host_user copy_to: \u6284\u9001\u65b9\u90ae\u4ef6\uff0c \u53ef\u4ee5\u662f\u5217\u8868\u5305\u542b\u591a\u4e2a\u90ae\u4ef6 reply_to: \u56de\u590d\u90ae\u4ef6 quit_after_send: True \u6216\u8005 False\uff0c \u9ed8\u8ba4\u662f False\u3002 \u53d1\u9001\u5b8c\u6210\u4e4b\u540e\u662f\u5426\u5173\u95ed\u4e0e\u670d\u52a1\u5668\u7684\u94fe\u63a5\u3002 \u4f8b\u5b50 base . send_email ( \"My email account\" , \"\u60a8\u597d\uff0c\u8bf7\u67e5\u6536\u90ae\u4ef6\" , subject = \"Test\" , send_to = [ '350178982@qq.com' , \"r350178982@126.com\" ], copy_to = 'jiwei_ran@sina.com' )","title":"\u90ae\u4ef6\u53d1\u9001"},{"location":"python/query/","text":"Query with SQL \u00b6 Query \u00b6 \u4f7f\u7528 sql \u8bed\u53e5\u67e5\u8be2\u4e00\u4e2a base base . query ( sql ) \u5176\u4e2d sql: \u8981\u6267\u884c\u7684 SQL \u8bed\u53e5 \u6ce8\u610f: \u9ed8\u8ba4\u8fd4\u56de\u6700\u591a 100 \u6761\u7ed3\u679c\uff0c\u5982\u679c\u9700\u8981\u66f4\u591a\u7ed3\u679c\uff0c\u8bf7\u5728 sql \u8bed\u53e5\u4e2d\u52a0\u5165 limit \u53c2\u6570 \u53ef\u80fd\u7684\u5f02\u5e38\u5305\u62ec ValueError: sql can not be empty ConnectionError: network error Exception: no such table Exception: no such column Exception: columns in group by should match columns in select \u4f8b\u5b50 \u00b6 \u57fa\u7840\u67e5\u8be2 \u00b6 base . query ( 'select name, price, year from Bill' ) \u7ed3\u679c [ { '_id' : 'PzBiZklNTGiGJS-4c0_VLw' , 'name' : 'Bob' , 'price' : 300 , 'year' : 2019 }, { '_id' : 'Ep7odyv1QC2vDQR2raMvSA' , 'name' : 'Bob' , 'price' : 300 , 'year' : 2021 }, { '_id' : 'f1x3X_8uTtSDUe9D60VlYQ' , 'name' : 'Tom' , 'price' : 100 , 'year' : 2019 }, { '_id' : 'NxeaB5pDRFKOItUs_Ugxug' , 'name' : 'Tom' , 'price' : 100 , 'year' : 2020 }, { '_id' : 'W0BrjGQpSES9nfSytvXgMA' , 'name' : 'Tom' , 'price' : 200 , 'year' : 2021 }, { '_id' : 'EvwCWtX3RmKYKHQO9w2kLg' , 'name' : 'Jane' , 'price' : 200 , 'year' : 2020 }, { '_id' : 'BTiIGSTgR06UhPLhejFctA' , 'name' : 'Jane' , 'price' : 200 , 'year' : 2021 } ] WHERE \u00b6 base . query ( 'select name, price from Bill where year = 2021 ' ) \u7ed3\u679c [ { '_id' : 'Ep7odyv1QC2vDQR2raMvSA' , 'name' : 'Bob' , 'price' : 300 }, { '_id' : 'W0BrjGQpSES9nfSytvXgMA' , 'name' : 'Tom' , 'price' : 200 }, { '_id' : 'BTiIGSTgR06UhPLhejFctA' , 'name' : 'Jane' , 'price' : 200 } ] ORDER BY \u00b6 base . query ( 'select name, price, year from Bill order by year' ) \u7ed3\u679c [ { '_id' : 'PzBiZklNTGiGJS-4c0_VLw' , 'name' : 'Bob' , 'price' : 300 , 'year' : 2019 }, { '_id' : 'f1x3X_8uTtSDUe9D60VlYQ' , 'name' : 'Tom' , 'price' : 100 , 'year' : 2019 }, { '_id' : 'NxeaB5pDRFKOItUs_Ugxug' , 'name' : 'Tom' , 'price' : 100 , 'year' : 2020 }, { '_id' : 'EvwCWtX3RmKYKHQO9w2kLg' , 'name' : 'Jane' , 'price' : 200 , 'year' : 2020 }, { '_id' : 'Ep7odyv1QC2vDQR2raMvSA' , 'name' : 'Bob' , 'price' : 300 , 'year' : 2021 }, { '_id' : 'W0BrjGQpSES9nfSytvXgMA' , 'name' : 'Tom' , 'price' : 200 , 'year' : 2021 }, { '_id' : 'BTiIGSTgR06UhPLhejFctA' , 'name' : 'Jane' , 'price' : 200 , 'year' : 2021 } ] GROUP BY \u00b6 base . query ( 'select name, sum(price) from Bill group by name' ) \u7ed3\u679c [ { 'SUM(price)' : 600 , 'name' : 'Bob' }, { 'SUM(price)' : 400 , 'name' : 'Tom' }, { 'SUM(price)' : 400 , 'name' : 'Jane' } ] DISTINCT \u00b6 base . query ( 'select distinct name from Bill' ) \u7ed3\u679c [ { '_id' : 'PzBiZklNTGiGJS-4c0_VLw' , 'name' : 'Bob' }, { '_id' : 'f1x3X_8uTtSDUe9D60VlYQ' , 'name' : 'Tom' }, { '_id' : 'EvwCWtX3RmKYKHQO9w2kLg' , 'name' : 'Jane' } ]","title":"Query with SQL"},{"location":"python/query/#query-with-sql","text":"","title":"Query with SQL"},{"location":"python/query/#query","text":"\u4f7f\u7528 sql \u8bed\u53e5\u67e5\u8be2\u4e00\u4e2a base base . query ( sql ) \u5176\u4e2d sql: \u8981\u6267\u884c\u7684 SQL \u8bed\u53e5 \u6ce8\u610f: \u9ed8\u8ba4\u8fd4\u56de\u6700\u591a 100 \u6761\u7ed3\u679c\uff0c\u5982\u679c\u9700\u8981\u66f4\u591a\u7ed3\u679c\uff0c\u8bf7\u5728 sql \u8bed\u53e5\u4e2d\u52a0\u5165 limit \u53c2\u6570 \u53ef\u80fd\u7684\u5f02\u5e38\u5305\u62ec ValueError: sql can not be empty ConnectionError: network error Exception: no such table Exception: no such column Exception: columns in group by should match columns in select","title":"Query"},{"location":"python/query/#_1","text":"","title":"\u4f8b\u5b50"},{"location":"python/query/#_2","text":"base . query ( 'select name, price, year from Bill' ) \u7ed3\u679c [ { '_id' : 'PzBiZklNTGiGJS-4c0_VLw' , 'name' : 'Bob' , 'price' : 300 , 'year' : 2019 }, { '_id' : 'Ep7odyv1QC2vDQR2raMvSA' , 'name' : 'Bob' , 'price' : 300 , 'year' : 2021 }, { '_id' : 'f1x3X_8uTtSDUe9D60VlYQ' , 'name' : 'Tom' , 'price' : 100 , 'year' : 2019 }, { '_id' : 'NxeaB5pDRFKOItUs_Ugxug' , 'name' : 'Tom' , 'price' : 100 , 'year' : 2020 }, { '_id' : 'W0BrjGQpSES9nfSytvXgMA' , 'name' : 'Tom' , 'price' : 200 , 'year' : 2021 }, { '_id' : 'EvwCWtX3RmKYKHQO9w2kLg' , 'name' : 'Jane' , 'price' : 200 , 'year' : 2020 }, { '_id' : 'BTiIGSTgR06UhPLhejFctA' , 'name' : 'Jane' , 'price' : 200 , 'year' : 2021 } ]","title":"\u57fa\u7840\u67e5\u8be2"},{"location":"python/query/#where","text":"base . query ( 'select name, price from Bill where year = 2021 ' ) \u7ed3\u679c [ { '_id' : 'Ep7odyv1QC2vDQR2raMvSA' , 'name' : 'Bob' , 'price' : 300 }, { '_id' : 'W0BrjGQpSES9nfSytvXgMA' , 'name' : 'Tom' , 'price' : 200 }, { '_id' : 'BTiIGSTgR06UhPLhejFctA' , 'name' : 'Jane' , 'price' : 200 } ]","title":"WHERE"},{"location":"python/query/#order-by","text":"base . query ( 'select name, price, year from Bill order by year' ) \u7ed3\u679c [ { '_id' : 'PzBiZklNTGiGJS-4c0_VLw' , 'name' : 'Bob' , 'price' : 300 , 'year' : 2019 }, { '_id' : 'f1x3X_8uTtSDUe9D60VlYQ' , 'name' : 'Tom' , 'price' : 100 , 'year' : 2019 }, { '_id' : 'NxeaB5pDRFKOItUs_Ugxug' , 'name' : 'Tom' , 'price' : 100 , 'year' : 2020 }, { '_id' : 'EvwCWtX3RmKYKHQO9w2kLg' , 'name' : 'Jane' , 'price' : 200 , 'year' : 2020 }, { '_id' : 'Ep7odyv1QC2vDQR2raMvSA' , 'name' : 'Bob' , 'price' : 300 , 'year' : 2021 }, { '_id' : 'W0BrjGQpSES9nfSytvXgMA' , 'name' : 'Tom' , 'price' : 200 , 'year' : 2021 }, { '_id' : 'BTiIGSTgR06UhPLhejFctA' , 'name' : 'Jane' , 'price' : 200 , 'year' : 2021 } ]","title":"ORDER BY"},{"location":"python/query/#group-by","text":"base . query ( 'select name, sum(price) from Bill group by name' ) \u7ed3\u679c [ { 'SUM(price)' : 600 , 'name' : 'Bob' }, { 'SUM(price)' : 400 , 'name' : 'Tom' }, { 'SUM(price)' : 400 , 'name' : 'Jane' } ]","title":"GROUP BY"},{"location":"python/query/#distinct","text":"base . query ( 'select distinct name from Bill' ) \u7ed3\u679c [ { '_id' : 'PzBiZklNTGiGJS-4c0_VLw' , 'name' : 'Bob' }, { '_id' : 'f1x3X_8uTtSDUe9D60VlYQ' , 'name' : 'Tom' }, { '_id' : 'EvwCWtX3RmKYKHQO9w2kLg' , 'name' : 'Jane' } ]","title":"DISTINCT"},{"location":"python/rows/","text":"Row \u00b6 List rows \u00b6 \u83b7\u53d6\u8868\u683c\u7684\u6240\u6709\u884c base . list_rows ( table_name , view_name = None , order_by = None , desc = False , start = None , limit = None ) \u5176\u4e2d order_by: \u6839\u636e\u67d0\u5217\u540d\u8fdb\u884c\u6392\u5e8f desc\uff1a \u662f\u5426\u964d\u5e8f\uff0c\u9ed8\u8ba4\u4e3a\u5347\u5e8f start: \u7d22\u5f15\u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c \u884c\u53f7 limit: \u6570\u636e\u7684\u663e\u793a\u6570\u91cf \u4f8b\u5b50 \u00b6 rows = base . list_rows ( 'Table1' ) rows = base . list_rows ( 'Table1' , view_name = 'default' , order_by = '\u5e74\u9f84' , desc = True , start = 5 , limit = 20 ) Get row \u00b6 \u83b7\u53d6\u8868\u683c\u7684\u67d0\u4e00\u884c base . get_row ( table_name , row_id ) \u4f8b\u5b50 \u00b6 row = base . get_row ( 'Table1' , 'U_eTV7mDSmSd-K2P535Wzw' ) Append row \u00b6 \u8ffd\u52a0\u884c base . append_row ( table_name , row_data ) \u4f8b\u5b50 \u00b6 row_data = { \"Name\" : \"I am new Row\" } base . append_row ( 'Table1' , row_data ) Insert row \u00b6 \u63d2\u5165\u884c base . insert_row ( table_name , row_data , anchor_row_id ) \u5176\u4e2d anchor_row_id: \u951a\u5b9a\u7684\u884c\u7684 id\uff0c\u5c06\u4f1a\u628a\u65b0\u884c\u63d2\u5165\u5230\u8fd9\u884c\u4e0b\u65b9 \u4f8b\u5b50 \u00b6 row_data = { \"Name\" : \"I am new Row\" } base . insert_row ( 'Table1' , row_data , 'U_eTV7mDSmSd-K2P535Wzw' ) Batch append rows \u00b6 \u6279\u91cf\u8ffd\u52a0\u884c base . batch_append_rows ( table_name , rows_data ) \u4f8b\u5b50 \u00b6 rows_data = [{ 'Name' : 'test batch' , 'content' : 'Yes' }, { 'Name' : 'test batch' , 'content' : 'Yes' }, { 'Name' : 'test batch' , 'content' : 'Yes' }] base . batch_append_rows ( 'Table6' , rows_data ) Update row \u00b6 \u66f4\u65b0\u4e00\u884c base . update_row ( table_name , row_id , row_data ) \u4f8b\u5b50 \u00b6 row_data = { \"dcXS\" : \"123\" } base . update_row ( 'Table1' , 'U_eTV7mDSmSd-K2P535Wzw' , row_data ) Batch update rows \u00b6 \u6279\u91cf\u66f4\u65b0\u884c batch_update_rows(table_name, rows_data) \u4f8b\u5b50 \u00b6 updates_data = [ { \"row_id\" : \"fMmCFyoxT4GN5Y2Powbl0Q\" , \"row\" : { \"Name\" : \"Ranjiwei\" , \"age\" : \"36\" } }, { \"row_id\" : \"cF5JTE99Tae-VVx0BGT-3A\" , \"row\" : { \"Name\" : \"Huitailang\" , \"age\" : \"33\" } }, { \"row_id\" : \"WP-8rb5PSUaM-tZRmTOCPA\" , \"row\" : { \"Name\" : \"Yufeng\" , \"age\" : \"22\" } } ] base . batch_update_rows ( 'Table1' , rows_data = updates_data ) Delete row \u00b6 \u5220\u9664\u4e00\u884c base . delete_row ( table_name , row_id ) \u4f8b\u5b50 \u00b6 base . delete_row ( 'Table1' , 'U_eTV7mDSmSd-K2P535Wzw' ) Batch delete rows \u00b6 \u6279\u91cf\u5220\u9664\u884c base . batch_delete_rows ( table_name , row_ids ) \u4f8b\u5b50 \u00b6 del_rows = rows [: 3 ] row_ids = [ row [ '_id' ] for row in del_rows ] base . batch_delete_rows ( 'Table1' , row_ids ) Filter rows \u00b6 \u6700\u65b0\u7684\u7248\u672c\u8bf7\u7528 SQL Query \u51fd\u6570\u63d0\u4f9b\u7684\u67e5\u8be2\u529f\u80fd\u3002","title":"Rows"},{"location":"python/rows/#row","text":"","title":"Row"},{"location":"python/rows/#list-rows","text":"\u83b7\u53d6\u8868\u683c\u7684\u6240\u6709\u884c base . list_rows ( table_name , view_name = None , order_by = None , desc = False , start = None , limit = None ) \u5176\u4e2d order_by: \u6839\u636e\u67d0\u5217\u540d\u8fdb\u884c\u6392\u5e8f desc\uff1a \u662f\u5426\u964d\u5e8f\uff0c\u9ed8\u8ba4\u4e3a\u5347\u5e8f start: \u7d22\u5f15\u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c \u884c\u53f7 limit: \u6570\u636e\u7684\u663e\u793a\u6570\u91cf","title":"List rows"},{"location":"python/rows/#get-row","text":"\u83b7\u53d6\u8868\u683c\u7684\u67d0\u4e00\u884c base . get_row ( table_name , row_id )","title":"Get row"},{"location":"python/rows/#append-row","text":"\u8ffd\u52a0\u884c base . append_row ( table_name , row_data )","title":"Append row"},{"location":"python/rows/#insert-row","text":"\u63d2\u5165\u884c base . insert_row ( table_name , row_data , anchor_row_id ) \u5176\u4e2d anchor_row_id: \u951a\u5b9a\u7684\u884c\u7684 id\uff0c\u5c06\u4f1a\u628a\u65b0\u884c\u63d2\u5165\u5230\u8fd9\u884c\u4e0b\u65b9","title":"Insert row"},{"location":"python/rows/#batch-append-rows","text":"\u6279\u91cf\u8ffd\u52a0\u884c base . batch_append_rows ( table_name , rows_data )","title":"Batch append rows"},{"location":"python/rows/#update-row","text":"\u66f4\u65b0\u4e00\u884c base . update_row ( table_name , row_id , row_data )","title":"Update row"},{"location":"python/rows/#batch-update-rows","text":"\u6279\u91cf\u66f4\u65b0\u884c batch_update_rows(table_name, rows_data)","title":"Batch update rows"},{"location":"python/rows/#delete-row","text":"\u5220\u9664\u4e00\u884c base . delete_row ( table_name , row_id )","title":"Delete row"},{"location":"python/rows/#batch-delete-rows","text":"\u6279\u91cf\u5220\u9664\u884c base . batch_delete_rows ( table_name , row_ids )","title":"Batch delete rows"},{"location":"python/rows/#filter-rows","text":"\u6700\u65b0\u7684\u7248\u672c\u8bf7\u7528 SQL Query \u51fd\u6570\u63d0\u4f9b\u7684\u67e5\u8be2\u529f\u80fd\u3002","title":"Filter rows"},{"location":"sql/function/","text":"SQL \u51fd\u6570\u53c2\u8003 \u00b6 \u60a8\u53ef\u4ee5\u5728SQL\u67e5\u8be2\u4e2d\u4f7f\u7528\u51fd\u6570\u3002 SQL \u51fd\u6570 \u00b6 \u4f7f\u7528\u51fd\u6570\uff0c\u60a8\u53ef\u4ee5\u8f6c\u6362\u3001\u8ba1\u7b97\u3001\u7ec4\u5408\u6216\u5408\u5e76\u5f53\u524d\u8868\u4e2d\u5176\u4ed6\u5217\u7684\u503c\u3002\u51fd\u6570\u4e4b\u95f4\u53ef\u4ee5\u76f8\u4e92\u5f15\u7528\u3002 SQL \u652f\u6301\u7684\u51fd\u6570\u4e0e SeaTable \u652f\u6301\u7684\u516c\u5f0f\u5927\u81f4\u76f8\u540c\u3002 \u51fd\u6570\u7684\u57fa\u672c\u8bed\u6cd5\u5982\u4e0b\uff1a FunctionName(parameters...) \u53c2\u6570\u53ef\u4ee5\u662f\u6570\u5b57\u3001\u5b57\u7b26\u4e32\u3001\u5e38\u91cf\u3001\u5217\u540d\u6216\u8005\u5176\u4ed6\u51fd\u6570\u3002\u88ab\u5f15\u7528\u7684\u5217\u540d\u79f0\u4e0d\u80fd\u662f\u522b\u540d\u3002\u5982\u679c\u5217\u540d\u5305\u542b\"-\",\u60a8\u53ef\u4ee5\u4f7f\u7528\"`\"\u5c06\u5217\u540d\u62ec\u8d77\u6765\u3002 \u5f53\u524dSQL\u67e5\u8be2\u63d0\u4f9b\u4e0b\u5217\u51fd\u6570\uff1a \u64cd\u4f5c\u7b26 \u6570\u5b66\u51fd\u6570 \u6587\u672c\u51fd\u6570 \u65e5\u671f\u51fd\u6570 \u903b\u8f91\u51fd\u6570 \u7edf\u8ba1\u51fd\u6570 \u5728\u8fd9\u7bc7\u6587\u6863\u4e2d\uff0c\u6211\u4eec\u4f1a\u63d0\u4f9b\u6240\u6709\u51fd\u6570\u7684\u5b8c\u6574\u4ecb\u7ecd\uff0c\u5e76\u63d0\u4f9b\u76f8\u5e94\u7684\u4f8b\u5b50\u3002\u5982\u679c\u60a8\u60f3\u67e5\u627e\u7279\u5b9a\u7684\u51fd\u6570\uff0c\u53ef\u4ee5\u901a\u8fc7Ctrl+F\u5728\u5f53\u524d\u9875\u9762\u8fdb\u884c\u67e5\u627e\u3002 \u51fd\u6570\u53ca\u4f8b\u5b50 \u00b6 \u60a8\u53ef\u4ee5\u5728SQL\u67e5\u8be2\u4e2d\u4f7f\u7528\u4e0b\u5217\u5e38\u91cf\uff1a \u64cd\u4f5c\u7b26 \u63cf\u8ff0 \u8f93\u5165 \u7ed3\u679c e \u8fd4\u56de\u81ea\u7136\u5e38\u6570 e=2.71828... e+1 3.71828183 pi \u8fd4\u56de\u5706\u5468\u7387pi Pi. pi 3.14159265 true() \u8fd4\u56de\u903b\u8f91\u503c 'true'. true() true false() \u8fd4\u56de\u903b\u8f91\u503c 'false'. false() false \u64cd\u4f5c\u7b26 \u00b6 \u64cd\u4f5c\u7b26\u51fd\u6570\u7684\u53c2\u6570\u7c7b\u578b\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u6216\u8005\u6570\u5b57\u3002\u5bf9\u4e8e\u9700\u8981\u6570\u5b57\u7c7b\u578b\u7684\u53c2\u6570\uff0c\u5982\u679c\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4f1a\u81ea\u52a8\u5c1d\u8bd5\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\uff1b\u53cd\u4e4b\u4ea6\u7136\u3002 \u64cd\u4f5c\u7b26 \u63cf\u8ff0 \u8f93\u5165 \u7ed3\u679c add(num1,num2) \u8ba1\u7b97\u4e24\u4e2a\u503c\u7684\u548c\u3002 add(1,2) 3 subtract(num1,num2) \u8ba1\u7b97\u4e24\u4e2a\u503c\u7684\u5dee\u3002 subtract(5,4) 1 multiply(num1,num2) \u8ba1\u7b97\u4e24\u4e2a\u503c\u7684\u4e58\u79ef\u3002 multiply(3,4) 12 divide(num1,num2) \u8ba1\u7b97\u4e24\u4e2a\u6570\u76f8\u9664\u3002 divide(3,2) 1.5 mod(num1,num2) \u8ba1\u7b97\u4e24\u4e2a\u6570\u7684\u4f59\u6570\u3002 mod(15,7) 1 power(num1,num2) \u8fd4\u56de\u67d0\u6570\u7684\u4e58\u5e42\u3002 power(3,2) 9 greater(num1,num2) \u5224\u65ad\u4e00\u4e2a\u6570\u662f\u5426\u5927\u4e8e\u53e6\u4e00\u4e2a\u6570\u3002 greater(2,3) false lessthan(num1,num2) \u5224\u65ad\u4e00\u4e2a\u6570\u662f\u5426\u5c0f\u4e8e\u53e6\u4e00\u4e2a\u6570\u3002 lessthan(2,3) true greatereq(num1,num2) \u5224\u65ad\u4e00\u4e2a\u6570\u662f\u5426\u5927\u4e8e\u7b49\u4e8e\u53e6\u4e00\u4e2a\u6570\u3002 greatereq(2,3) false lessthaneq(num1,num2) \u5224\u65ad\u4e00\u4e2a\u6570\u662f\u5426\u5c0f\u4e8e\u7b49\u4e8e\u53e6\u4e00\u4e2a\u6570\u3002 lessthaneq(2,3) false equal(num1,num2) \u5224\u65ad\u4e00\u4e2a\u6570\u662f\u5426\u7b49\u4e8e\u53e6\u4e00\u4e2a\u6570\u3002 equal(`Old price`, `New price`) false unequal \u5224\u65ad\u4e00\u4e2a\u6570\u662f\u5426\u4e0d\u7b49\u4e8e\u53e6\u4e00\u4e2a\u6570\u3002 unequal(`Old price`, `New price`) true concatenate(string1, string2, ...) \u5c06\u591a\u4e2a\u6587\u672c\u503c\u8fde\u63a5\u4e3a\u5355\u4e2a\u6587\u672c\u503c\u3002 concatenate(`Supplier`, \" has the product \", `Product`) Microsoft has the product Windows \u6570\u5b66\u51fd\u6570 \u00b6 \u64cd\u4f5c\u7b26\u51fd\u6570\u7684\u53c2\u6570\u7c7b\u578b\u5fc5\u987b\u662f\u6570\u5b57\u3002\u5982\u679c\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4f1a\u81ea\u52a8\u5c1d\u8bd5\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\u3002 \u64cd\u4f5c\u7b26 \u63cf\u8ff0 \u8f93\u5165 \u7ed3\u679c abs(number) \u8fd4\u56de\u4e00\u4e2a\u6570\u7684\u7edd\u5bf9\u503c\u3002 abs(-2) 2 ceiling(number, significance) \u5c06\u6570\u5b57\u5411\u4e0a\u820d\u5165\u5230\u6700\u63a5\u8fd1\u7684\u6574\u6570\u6216\u6700\u63a5\u8fd1\u7684\u6307\u5b9a\u57fa\u6570\u7684\u500d\u6570\u3002(\u5982\u679c\u4efb\u4f55\u4e00\u4e2a\u53c2\u6570\u662f\u975e\u6570\u503c\u578b\uff0c\u5219 CEILING \u8fd4\u56de\u7a7a\u3002 \u4e0d\u8bba\u53c2\u6570 number \u7684\u7b26\u53f7\u5982\u4f55\uff0c\u6570\u503c\u90fd\u662f\u6cbf\u7edd\u5bf9\u503c\u589e\u5927\u7684\u65b9\u5411\u5411\u4e0a\u820d\u5165\u3002 \u5982\u679c number \u6b63\u597d\u662f significance \u7684\u500d\u6570\uff0c\u5219\u4e0d\u8fdb\u884c\u820d\u5165\u3002 \u5982\u679c number \u548c significance \u90fd\u4e3a\u8d1f\uff0c\u5219\u5bf9\u503c\u6309\u8fdc\u79bb 0 \u7684\u65b9\u5411\u8fdb\u884c\u5411\u4e0b\u820d\u5165\u3002) ceiling(2.14) 3 \u5982\u679c number \u4e3a\u8d1f\uff0csignificance \u4e3a\u6b63\uff0c\u5219\u5bf9\u503c\u6309\u671d\u5411 0 \u7684\u65b9\u5411\u8fdb\u884c\u5411\u4e0a\u820d\u5165\uff0c ceiling(-2.14, 4) 0 even(number) \u5c06\u6b63\u6570\u5411\u4e0a\u820d\u5165\u5230\u6700\u8fd1\u7684\u5076\u6570\uff0c\u8d1f\u6570\u5411\u4e0b\u820d\u5165\u5230\u6700\u8fd1\u7684\u5076\u6570\u3002 even(2.14) 4 exp(number) \u8fd4\u56de e \u7684 n \u6b21\u65b9\u3002 expr(1) 2.71828... floor(number, significance) \u5c06\u6570\u5b57\u5411\u4e0b\u820d\u5165\u5230\u6700\u63a5\u8fd1\u7684\u6574\u6570\u6216\u6700\u63a5\u8fd1\u7684\u6307\u5b9a\u57fa\u6570\u7684\u500d\u6570\u3002(\u5982\u679c\u4efb\u4e00\u53c2\u6570\u4e3a\u975e\u6570\u503c\u578b\uff0c\u5219 FLOOR \u8fd4\u56de \u7a7a \u3002 \u5982\u679c number \u4e3a\u6b63\u503c\u4e14\u6307\u5b9a\u7684\u57fa\u6570\u4e3a\u8d1f\uff0c\u5219 FLOOR \u8fd4\u56de \u7a7a \u3002 \u5982\u679c number \u7684\u7b26\u53f7\u4e3a\u6b63\uff0c\u5219\u6570\u503c\u5411\u4e0b\u820d\u5165\uff0c\u5e76\u671d\u96f6\u8c03\u6574\u3002 \u5982\u679c number \u7684\u7b26\u53f7\u4e3a\u8d1f\uff0c\u5219\u6570\u503c\u6cbf\u7edd\u5bf9\u503c\u51cf\u5c0f\u7684\u65b9\u5411\u5411\u4e0b\u820d\u5165\u3002\uff09 floor(2.86) 2 \u5982\u679c number \u7684\u7b26\u53f7\u4e3a\u8d1f\uff0c\u5219\u6570\u503c\u6cbf\u7edd\u5bf9\u503c\u51cf\u5c0f\u7684\u65b9\u5411\u5411\u4e0b\u820d\u5165\u3002 \u5982\u679c number \u6b63\u597d\u662f significance \u7684\u500d\u6570\uff0c\u5219\u4e0d\u8fdb\u884c\u820d\u5165\u3002 floor(-3.14, 5) -5 int(number) \u5c06\u6570\u503c\u5411\u4e0b\u53d6\u6574\u4e3a\u6700\u63a5\u8fd1\u7684\u6574\u6570\u3002 int(-3.14) -4 lg(number) \u8fd4\u56de\u7ed9\u5b9a\u6570\u503c\u4ee5 10 \u4e3a\u5e95\u7684\u5bf9\u6570\u3002 lg(100) 2 log(number, base) \u6839\u636e\u7ed9\u5b9a\u5e95\u6570\u8fd4\u56de\u6570\u5b57\u7684\u5bf9\u6570\u3002 log(81, 3) 4 \u5982\u679c\u5e95\u6570\u6ca1\u6709\u6307\u5b9a\uff0c\u9ed8\u8ba4\u4ee510\u4f5c\u4e3a\u5e95\u6570\u3002 log(1000) 3 odd(number) \u5c06\u6b63(\u8d1f)\u6570\u5411\u4e0a(\u4e0b)\u820d\u5165\u5230\u6700\u63a5\u8fd1\u7684\u5947\u6570\u3002 odd(-2.14) -1 round(number, digits) \u6309\u6307\u5b9a\u7684\u4f4d\u6570\u5bf9\u6570\u503c\u8fdb\u884c\u56db\u820d\u4e94\u5165\u3002\u5982\u679c num_digits \u7b49\u4e8e 0\uff0c\u5219\u5c06\u6570\u5b57\u56db\u820d\u4e94\u5165\u5230\u6700\u63a5\u8fd1\u7684\u6574\u6570\u3002 round(3.14) 3 \u5982\u679c num_digits \u5927\u4e8e 0\uff08\u96f6\uff09\uff0c\u5219\u5c06\u6570\u5b57\u56db\u820d\u4e94\u5165\u5230\u6307\u5b9a\u7684\u5c0f\u6570\u4f4d round(3.14, 1) 3.1 \u5982\u679c num_digits \u5c0f\u4e8e 0\uff0c\u5219\u5728\u5c0f\u6570\u70b9\u5de6\u4fa7\u524d\u51e0\u4f4d\u8fdb\u884c\u56db\u820d\u4e94\u5165\u3002 round(3.14, -3) 0 rounddown(number, digits) \u5411\u4e0b\u820d\u5165\u6570\u5b57\u3002\uff08\u5982\u679c num_digits \u5927\u4e8e 0\uff08\u96f6\uff09\uff0c\u5219\u5c06\u6570\u5b57\u5411\u4e0b\u820d\u5165\u5230\u6307\u5b9a\u7684\u5c0f\u6570\u4f4d\u3002 \u5982\u679c num_digits \u7b49\u4e8e 0\uff0c\u5219\u5c06\u6570\u5b57\u5411\u4e0b\u820d\u5165\u5230\u6700\u63a5\u8fd1\u7684\u6574\u6570\u3002 \u5982\u679c num_digits \u5c0f\u4e8e 0\uff0c\u5219\u5728\u5c0f\u6570\u70b9\u5de6\u4fa7\u524d\u51e0\u4f4d\u8fdb\u884c\u5411\u4e0b\u820d\u5165\u3002\uff09 rounddown(3.12, 1) 3.1 roundup(number, digits) \u5411\u4e0a\u820d\u5165\u6570\u5b57\u3002\uff08\u5982\u679c num_digits \u5927\u4e8e 0\uff08\u96f6\uff09\uff0c\u5219\u5c06\u6570\u5b57\u5411\u4e0a\u820d\u5165\u5230\u6307\u5b9a\u7684\u5c0f\u6570\u4f4d\u3002 \u5982\u679c num_digits \u7b49\u4e8e 0\uff0c\u5219\u5c06\u6570\u5b57\u5411\u4e0a\u820d\u5165\u5230\u6700\u63a5\u8fd1\u7684\u6574\u6570\u3002 \u5982\u679c num_digits \u5c0f\u4e8e 0\uff0c\u5219\u5728\u5c0f\u6570\u70b9\u5de6\u4fa7\u524d\u51e0\u4f4d\u8fdb\u884c\u5411\u4e0a\u820d\u5165\u3002\uff09 roundup(-3.15) -4 sign(number) \u8fd4\u56de\u6570\u5b57\u7684\u6b63\u8d1f\u53f7: \u4e3a\u6b63\u65f6\uff0c\u8fd4\u56de 1\uff1b\u4e3a\u96f6\u65f6\uff0c\u8fd4\u56de 0\uff1b\u4e3a\u8d1f\u65f6\uff0c\u8fd4\u56de -1\u3002 sign(-2) -1 sqrt(number) \u8fd4\u56de\u67d0\u6570\u7684\u5e73\u65b9\u6839\u3002 sqrt(81) 9 \u6587\u672c\u51fd\u6570 \u00b6 \u64cd\u4f5c\u7b26 \u63cf\u8ff0 \u8f93\u5165 \u7ed3\u679c exact(string1, string2) \u8fd4\u56de\u4e24\u4e2a\u6570\u5b57\u7b26\u4e32\u662f\u5426\u76f8\u7b49\u3002 exact('SeaTable', 'Seatable') false find(findString, sourceString, startPosition) \u83b7\u53d6\u5728\u4e00\u4e2a\u5b57\u7b26\u4e32\u5728\u53e6\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u7684\u7d22\u5f15\u3002\u5982\u679c\u627e\u4e0d\u5230\uff0c\u90a3\u4e48\u8fd4\u56de 0\u3002(\u533a\u5206\u5927\u5c0f\u5199)\u3002 find('Sea', 'seaTable', 1) 0 left(string, count) Returns the specified number (count) of characters at the beginning of a string. left('SeaTable', 3) Sea len(string) \u4ece\u4e00\u4e2a\u6587\u672c\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5f00\u59cb\u8fd4\u56de\u6307\u5b9a\u4e2a\u6570\u7684\u5b57\u7b26\u3002 len('SeaTable') 8 lower(string) \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5c0f\u5199\u3002 lower('German) german mid(string, startPosition, count) \u4ece\u6587\u672c\u5b57\u7b26\u4e32\u4e2d\u6307\u5b9a\u7684\u8d77\u59cb\u4f4d\u7f6e\u8d77\u8fd4\u56de\u6307\u5b9a\u957f\u5ea6\u7684\u5b57\u7b26\u3002 mid('SeaTable is the best', 1, 8) SeaTable replace(sourceString, startPosition, count, newString) \u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u7684\u90e8\u5206\u5b57\u7b26\u7528\u53e6\u4e00\u4e2a\u5b57\u7b26\u4e32\u66ff\u6362\u3002 replace('SeaTable is the best.', 1, 8, 'Seafile') Seafile is the best. rept(string, number) \u5c06\u5b57\u7b26\u4e32\u91cd\u590d nunber \u6b21\u3002 rept('Sea ', 3) SeaSeaSea right(string, count) \u4ece\u4e00\u4e2a\u6587\u672c\u5b57\u7b26\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u5f00\u59cb\u8fd4\u56de\u6307\u5b9a\u4e2a\u6570\u7684\u5b57\u7b26\u3002 right('SeaTable', 5) Table search(findString, sourceString, startPosition) \u8fd4\u56de\u4e00\u4e2a\u6307\u5b9a\u5b57\u7b26\u6216\u6587\u672c\u5b57\u7b26\u4e32\u5728\u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u4ece\u5de6\u5230\u53f3\u67e5\u627e(\u5ffd\u7565\u5927\u5c0f\u5199)\u3002 search('Sea', 'seaTable', 1) 1 substitute(sourceString, oldString, newString, index) \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u90e8\u5206\u5b57\u7b26\u4e32\u4ee5\u65b0\u5b57\u7b26\u4e32\u66ff\u6362\u3002 substitute('SeaTableTable', 'Table', 'file', 1) SeafileTable T(value) \u68c0\u6d4b\u7ed9\u5b9a\u503c\u662f\u5426\u4e3a\u6587\u672c\uff0c\u5982\u679c\u662f\u6587\u672c\u6309\u539f\u6837\u8fd4\u56de\uff0c\u5982\u679c\u4e0d\u662f\u6587\u672c\u5219\u8fd4\u56de\u7a7a\u6587\u672c\u3002 T('123') 123 text(number, format) \u6839\u636e\u6307\u5b9a\u7684\u6570\u503c\u683c\u5f0f\u5c06\u6570\u5b57\u8f6c\u6210\u6587\u672c\u3002\u683c\u5f0f\u53c2\u6570 format_text \u53ef\u4ee5\u4e3a number, percent, yuan, dollar, euro \u4e2d\u7684\u4e00\u4e2a\u3002 text(150, 'euro') \u20ac150 trim(string) \u79fb\u9664\u5b57\u7b26\u4e32\u4e24\u7aef\u7684\u7a7a\u683c\u3002 trim(' SeaTable ') SeaTable upper(string) \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5927\u5199\u3002 upper('German) GERMAN value(string) \u5c06\u4e00\u4e2a\u4ee3\u8868\u6570\u503c\u7684\u6587\u672c\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u503c\u3002 value('123') 123 \u65e5\u671f\u51fd\u6570 \u00b6 \u65e5\u671f\u51fd\u6570\u7684\u8f93\u5165\u53c2\u6570\u5fc5\u987b\u662f\u65f6\u95f4\u6216\u8005\u65e5\u671f\u7c7b\u578b\u3002\u8f93\u5165\u5e38\u91cf\u65f6\uff0c\u4ee5\u5b57\u7b26\u4e32\u8868\u793a\uff0c\u683c\u5f0f\u53ef\u4ee5\u662f \"2021-09-01 12:00:01\" \u6216\u8005 \"2021-09-01\"\u3002\u5f53\u5728 select \u8bed\u53e5\u4e2d\u8fd4\u56de\u65e5\u671f\u516c\u5f0f\u7ed3\u679c\u65f6\uff0c\u5982\u679c\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u662f\u65f6\u95f4\u6216\u8005\u65e5\u671f\uff0c\u90a3\u4e48\u4f1a\u88ab\u8f6c\u6362\u4e3a RFC3339 \u683c\u5f0f\u7684\u5b57\u7b26\u4e32 \uff0c\u6bd4\u5982 \"2021-09-03T00:00:00+08:00\"\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u516c\u5f0f\u8fd4\u56de\u7c7b\u578b\u4e3a\u65f6\u95f4\u6216\u8005\u65e5\u671f\uff0c\u90a3\u4e48\u8fd4\u56de\u7684\u7ed3\u679c\u4e0d\u80fd\u4f5c\u4e3a\u53c2\u6570\u4f20\u7ed9\u6570\u5b66\u51fd\u6570\u3001\u5b57\u7b26\u4e32\u51fd\u6570\u3002 \u64cd\u4f5c\u7b26 \u63cf\u8ff0 \u8f93\u5165 \u7ed3\u679c date(year, month, day) \u4ece\u8f93\u5165\u7684\u5e74\u3001\u6708\u548c\u65e5\u8fd4\u56de\u56fd\u9645\u683c\u5f0f (ISO) \u7684\u65e5\u671f\u3002 date(2021, 1, 3) 2021-01-03T00:00:00+08:00 dateAdd(date, count, unit) \u589e\u52a0\u65f6\u95f4\u3002\u6700\u540e\u4e00\u4e2a\u53c2\u6570 unit \u53ef\u4ee5\u4e3a years, months, weeks, days, hours, minutes, seconds \u4e2d\u7684\u4e00\u4e2a\u3002 dateAdd('2020-02-03', 2, 'days') 2020-02-05T00:00:00+08:00 datedif(startDate, endDate, unit) \u8ba1\u7b97\u4e24\u4e2a\u65e5\u671f\u4e4b\u95f4\u76f8\u9694\u7684\u79d2\u6570\u3001\u5929\u6570\u3001\u6708\u6570\u6216\u5e74\u6570\u3002\u53c2\u6570 unit \u53ef\u4ee5\u4e3a S, Y, M, D, YD, YM, MD. \u4e2d\u7684\u4e00\u4e2a\u3002 dateDif('2018-01-01', '2020-01-01') 2 unit\u53c2\u6570\u662f\u53ef\u9009\u7684: S (\u79d2\u6570), D (\u5929\u6570), M (\u6708\u6570), Y (\u5e74\u6570), YD (\u5929\u6570\uff0c\u5ffd\u7565\u5e74\u4efd), YM (\u6708\u4efd\uff0c\u5ffd\u7565\u5e74\u4efd\u548c\u5929\u6570), MD (\u5929\u6570\uff0c\u5ffd\u7565\u5e74\u4efd\u548c\u6708\u4efd). dateDif('2019-10-11', '2020-12-12', 'M') 14 day(date) \u8fd4\u56de\u4e00\u4e2a\u6708\u4e2d\u7684\u7b2c\u51e0\u5929\u7684\u6570\u503c\uff0c\u4ecb\u4e8e 1 \u5230 31 \u4e4b\u95f4 day('2020-01-03') 3 eomonth(startDate, months) \u8fd4\u56de\u4e00\u4e2a\u65e5\u671f\uff0c\u8868\u793a\u6307\u5b9a\u65e5\u671f\u4e4b\u524d\u6216\u4e4b\u540e\u7684\u51e0\u4e2a\u6708\u7684\u6700\u540e\u4e00\u5929\u3002 eomonth('2020-01-01', 1) 2020-02-29T00:00:00+08:00 \u5982\u679c\u7ed9\u5b9a\u7684\u6570\u5b57\uff08months\uff09\u4e3a\u8d1f\u6570\uff0c\u5219\u8868\u793a\u4e4b\u524d\u7684\u51e0\u4e2a\u6708\u7684\u6700\u540e\u4e00\u5929\u3002 eomonth('2020-01-01', -1) 2019-12-31T00:00:00+08:00 hour(date) \u8fd4\u56de\u5c0f\u65f6\u6570\u503c\uff0c\u662f\u4e00\u4e2a 0 (12:00 A.M.) \u5230 23 (11:00 P.M.) \u4e4b\u95f4\u7684\u6574\u6570\u3002 hour('2020-02-14 13:14:52) 13 \u5982\u679c\u4e0d\u5305\u542b\u5c0f\u65f6\uff0c\u5219\u8fd4\u56de0\u3002 hour('2020-02-14) 0 hours(startDate, endDate) \u8fd4\u56de\u4e24\u4e2a\u65e5\u671f\u4e4b\u95f4\u7684\u5c0f\u65f6\u6570\u3002 hours('2020-02-14 13:14', '2020-02-14 15:14') 2 \u5982\u679c\u65e5\u671f\u4e2d\u4e0d\u5305\u542b\u5c0f\u65f6\uff0c\u5219\u8ba4\u4e3a\u662f\u5728\u8be5\u5929\u76840\u65f6\u3002 hours('2020-02-14', '2020-02-14 15:14') 15 minute(date) \u8fd4\u56de\u5206\u949f\u6570\u503c\uff0c\u662f\u4e00\u4e2a 0 \u5230 59 \u4e4b\u95f4\u7684\u6574\u6570\u3002 minute('2020-02-14 13:14:52 14 \u5982\u679c\u65e5\u671f\u4e2d\u4e0d\u5305\u542b\u5206\u949f\uff0c\u5219\u8fd4\u56de0\u3002 minute('2020-02-14) 0 month(date) \u8fd4\u56de\u6708\u4efd\u503c\uff0c\u662f\u4e00\u4e2a 1 (\u4e00\u6708)\u5230 12 (\u5341\u4e8c\u6708)\u4e4b\u95f4\u7684\u6570\u5b57\u3002 month('2020-02-14 13:14:52) 2 months(startDate, endDate) \u8fd4\u56de\u4e24\u4e2a\u65e5\u671f\u4e4b\u95f4\u7684\u6708\u6570\u3002 months('2020-02-01 13:14', '2020-03-31 15:54') 1 \u5982\u679c\u65e5\u671f\u4e0d\u5305\u542b\u6708\u4efd\uff0c\u5219\u9ed8\u8ba4\u4e3a1\u6708\u3002 months('2020', '2021') 12 networkdays(startDate, endDate, holiday1, holiday2, ...) \u8fd4\u56de\u4e24\u4e2a\u65e5\u671f\u4e4b\u95f4\u7684\u5b8c\u6574\u5de5\u4f5c\u65e5\u6570\u3002 networkdays('2020-01-01', '2020-01-07','2020-01-01') 4 now() \u83b7\u53d6\u73b0\u5728\u7684\u65f6\u95f4\u3002 now() 2020-09-07T12:59:00+08:00 second(date) \u8fd4\u56de\u79d2\u6570\u503c\uff0c\u662f\u4e00\u4e2a 0 \u5230 59 \u4e4b\u95f4\u7684\u6574\u6570\u3002 second('2020-02-14 13:14:52') 52 today() \u83b7\u53d6\u4eca\u5929\u7684\u65e5\u671f\u3002 today() 2020-09-07T00:00:00+08:00 weekday(date, weekStart) \u8fd4\u56de\u4ee3\u8868\u4e00\u5468\u4e2d\u7684\u7b2c\u51e0\u5929\u7684\u6570\u503c\uff0c\u662f\u4e00\u4e2a 1 \u5230 7 \u4e4b\u95f4\u7684\u6574\u6570\u3002 weekday('2020-01-01', 'Monday') 3 weeknum(date, return_type) \u8fd4\u56de\u7279\u5b9a\u65e5\u671f\u7684\u5468\u7f16\u53f7\uff0c\u5305\u542b1\u67081\u65e5\u7684\u661f\u671f\u662f\u5f53\u5e74\u7684\u7b2c\u4e00\u5468\uff0c\u5e76\u7f16\u53f7\u4e3a\u7b2c 1 \u5468\u3002 weeknum('2020-01-12', 11) 2 year(date) \u8fd4\u56de\u65e5\u671f\u7684\u5e74\u4efd\u503c\uff0c\u4e00\u4e2a 1900-9999 \u4e4b\u95f4\u7684\u6570\u5b57\u3002 year('2020-01-01') 2020 startofweek(date, weekStart) \u8fd4\u56de\u65e5\u671f\u6240\u5728\u5468\u7684\u7b2c\u4e00\u5929\uff0cweekStart \u9ed8\u8ba4\u662f sunday\uff0c\u4e5f\u53ef\u4ee5\u8bbe\u7f6e\u4e3a monday\u3002 startofweek('2021-04-28') 2021-4-25T00:00:00+08:00 quarter(date) \u8fd4\u56de\u65e5\u671f\u6240\u5728\u5b63\u5ea6\uff0c\u8fd4\u56de\u503c\u4e3a 1, 2, 3, 4\u3002 quarter('2021-01-01') 1 isodate(date) \u8fd4\u56de\u65e5\u671f\u7684 ISO \u5b57\u7b26\u4e32\u8868\u793a\uff0c\u6bd4\u5982 \"2021-05-11\"\u3002 isodate('2021-01-01 11:00:00') 2021-01-01 isomonth(date) \u8fd4\u56de\u5e74\u6708\u7684 ISO \u5b57\u7b26\u4e32\u8868\u793a\uff0c\u6bd4\u5982 \"2020-05\"\u3002 isomonth('2021-01-01 11:00:00') 2021-01 \u903b\u8f91\u51fd\u6570 \u00b6 \u64cd\u4f5c\u7b26 \u63cf\u8ff0 \u8f93\u5165 \u7ed3\u679c and(logical1, logical2, ...) \u68c0\u67e5\u662f\u5426\u6240\u6709\u53c2\u6570\u5747\u4e3a TRUE\uff0c\u5982\u679c\u6240\u6709\u53c2\u6570\u503c\u5747\u4e3a TRUE\uff0c\u5219\u8fd4\u56de TRUE\u3002 and(1, '', 2) false if(logical, value1, value2) \u5224\u65ad\u662f\u5426\u6ee1\u8db3\u67d0\u4e2a\u6761\u4ef6\uff0c\u5982\u679c\u6ee1\u8db3\u8fd4\u56de\u4e00\u4e2a\u503c\uff0c\u5982\u679c\u4e0d\u6ee1\u8db3\u5219\u8fd4\u56de\u53e6\u4e00\u4e2a\u503c\u3002 if(1>2, 3, 4) 4 ifs(logical1, value1, logical2, value2, ...) \u68c0\u67e5\u662f\u5426\u6ee1\u8db3\u4e00\u4e2a\u6216\u591a\u4e2a\u6761\u4ef6\u5e76\u8fd4\u56de\u4e0e\u7b2c\u4e00\u4e2a TRUE \u6761\u4ef6\u5bf9\u5e94\u7684\u503c ifs( 1>2, 3, 5>4, 9) 9 not(boolean) \u5bf9\u53c2\u6570\u7684\u903b\u8f91\u503c\u6c42\u53cd: \u53c2\u6570\u4e3a TRUE \u65f6\u8fd4\u56de FALSE\uff1b\u53c2\u6570\u4e3a FALSE \u65f6\u8fd4\u56de TRUE\u3002 not(and(1, '', 2)) true or(logical1, logical2, ...) \u5982\u679c\u4efb\u4e00\u53c2\u6570\u503c\u4e3a TRUE\uff0c\u5373\u8fd4\u56de TRUE\uff1b\u53ea\u6709\u5f53\u6240\u6709\u53c2\u6570\u503c\u5747\u4e3a FALSE \u65f6\u624d\u8fd4\u56de FALSE\u3002 or(1,'',2) true switch(logical, matcher1, value1, matcher2, value2, ..., default) \u6839\u636e\u503c\u5217\u8868\u6c42\u503c\u8868\u8fbe\u5f0f\u5e76\u8fd4\u56de\u4e0e\u7b2c\u4e00\u4e2a\u5339\u914d\u503c\u5bf9\u5e94\u7684\u7ed3\u679c\u3002\u5982\u679c\u6ca1\u6709\u5339\u914d\u9879\uff0c\u5219\u8fd4\u56de\u53ef\u9009\u9ed8\u8ba4\u503c\u3002 switch(`grades`, 1, 'very good', 2, 'good', 3, 'satisfactory', 4, 'passed', 'failed') very good xor(logical1, logical2, ...) \u8fd4\u56de\u6240\u6709\u53c2\u6570\u7684\u903b\u8f91\u201c\u5f02\u6216\u201d\u503c\u3002 xor(1, 0, 2\\<1) false \u7edf\u8ba1\u51fd\u6570 \u00b6 \u64cd\u4f5c\u7b26 \u63cf\u8ff0 \u8f93\u5165 \u7ed3\u679c average(number1, number2, ...) \u8fd4\u56de\u4e00\u7ec4\u6570\u7684\u5e73\u5747\u503c\u3002 average(1, 2, 3, 4, 5) 3 counta(textORnumber1, textORnumber2, ...) Counts the number of non-e\u8ba1\u7b97\u4e00\u7ec4\u503c\u4e2d\u975e\u7a7a\u503c\u7684\u4e2a\u6570\u3002\u975e\u7a7a\u503c\u5305\u62ec\u6570\u5b57\u548c\u5b57\u7b26\u4e32\u3002 counta(1, '', 2, '3') 3 countall(textORnumber1, textORnumber2, ...) \u8ba1\u7b97\u4e00\u7ec4\u503c\u7684\u4e2a\u6570 (\u5305\u62ec\u7a7a\u503c)\u3002 countall(1, '', 2, '3') 4 countblank(textORnumber1, textORnumber2, ...) countblank(textOrNumber1, [textOrNumber2, ...]) countall(1, '', 2, '3') 1","title":"SQL \u51fd\u6570\u53c2\u8003"},{"location":"sql/function/#sql","text":"\u60a8\u53ef\u4ee5\u5728SQL\u67e5\u8be2\u4e2d\u4f7f\u7528\u51fd\u6570\u3002","title":"SQL \u51fd\u6570\u53c2\u8003"},{"location":"sql/function/#sql_1","text":"\u4f7f\u7528\u51fd\u6570\uff0c\u60a8\u53ef\u4ee5\u8f6c\u6362\u3001\u8ba1\u7b97\u3001\u7ec4\u5408\u6216\u5408\u5e76\u5f53\u524d\u8868\u4e2d\u5176\u4ed6\u5217\u7684\u503c\u3002\u51fd\u6570\u4e4b\u95f4\u53ef\u4ee5\u76f8\u4e92\u5f15\u7528\u3002 SQL \u652f\u6301\u7684\u51fd\u6570\u4e0e SeaTable \u652f\u6301\u7684\u516c\u5f0f\u5927\u81f4\u76f8\u540c\u3002 \u51fd\u6570\u7684\u57fa\u672c\u8bed\u6cd5\u5982\u4e0b\uff1a FunctionName(parameters...) \u53c2\u6570\u53ef\u4ee5\u662f\u6570\u5b57\u3001\u5b57\u7b26\u4e32\u3001\u5e38\u91cf\u3001\u5217\u540d\u6216\u8005\u5176\u4ed6\u51fd\u6570\u3002\u88ab\u5f15\u7528\u7684\u5217\u540d\u79f0\u4e0d\u80fd\u662f\u522b\u540d\u3002\u5982\u679c\u5217\u540d\u5305\u542b\"-\",\u60a8\u53ef\u4ee5\u4f7f\u7528\"`\"\u5c06\u5217\u540d\u62ec\u8d77\u6765\u3002 \u5f53\u524dSQL\u67e5\u8be2\u63d0\u4f9b\u4e0b\u5217\u51fd\u6570\uff1a \u64cd\u4f5c\u7b26 \u6570\u5b66\u51fd\u6570 \u6587\u672c\u51fd\u6570 \u65e5\u671f\u51fd\u6570 \u903b\u8f91\u51fd\u6570 \u7edf\u8ba1\u51fd\u6570 \u5728\u8fd9\u7bc7\u6587\u6863\u4e2d\uff0c\u6211\u4eec\u4f1a\u63d0\u4f9b\u6240\u6709\u51fd\u6570\u7684\u5b8c\u6574\u4ecb\u7ecd\uff0c\u5e76\u63d0\u4f9b\u76f8\u5e94\u7684\u4f8b\u5b50\u3002\u5982\u679c\u60a8\u60f3\u67e5\u627e\u7279\u5b9a\u7684\u51fd\u6570\uff0c\u53ef\u4ee5\u901a\u8fc7Ctrl+F\u5728\u5f53\u524d\u9875\u9762\u8fdb\u884c\u67e5\u627e\u3002","title":"SQL \u51fd\u6570"},{"location":"sql/function/#_1","text":"\u60a8\u53ef\u4ee5\u5728SQL\u67e5\u8be2\u4e2d\u4f7f\u7528\u4e0b\u5217\u5e38\u91cf\uff1a \u64cd\u4f5c\u7b26 \u63cf\u8ff0 \u8f93\u5165 \u7ed3\u679c e \u8fd4\u56de\u81ea\u7136\u5e38\u6570 e=2.71828... e+1 3.71828183 pi \u8fd4\u56de\u5706\u5468\u7387pi Pi. pi 3.14159265 true() \u8fd4\u56de\u903b\u8f91\u503c 'true'. true() true false() \u8fd4\u56de\u903b\u8f91\u503c 'false'. false() false","title":"\u51fd\u6570\u53ca\u4f8b\u5b50"},{"location":"sql/function/#_2","text":"\u64cd\u4f5c\u7b26\u51fd\u6570\u7684\u53c2\u6570\u7c7b\u578b\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u6216\u8005\u6570\u5b57\u3002\u5bf9\u4e8e\u9700\u8981\u6570\u5b57\u7c7b\u578b\u7684\u53c2\u6570\uff0c\u5982\u679c\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4f1a\u81ea\u52a8\u5c1d\u8bd5\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\uff1b\u53cd\u4e4b\u4ea6\u7136\u3002 \u64cd\u4f5c\u7b26 \u63cf\u8ff0 \u8f93\u5165 \u7ed3\u679c add(num1,num2) \u8ba1\u7b97\u4e24\u4e2a\u503c\u7684\u548c\u3002 add(1,2) 3 subtract(num1,num2) \u8ba1\u7b97\u4e24\u4e2a\u503c\u7684\u5dee\u3002 subtract(5,4) 1 multiply(num1,num2) \u8ba1\u7b97\u4e24\u4e2a\u503c\u7684\u4e58\u79ef\u3002 multiply(3,4) 12 divide(num1,num2) \u8ba1\u7b97\u4e24\u4e2a\u6570\u76f8\u9664\u3002 divide(3,2) 1.5 mod(num1,num2) \u8ba1\u7b97\u4e24\u4e2a\u6570\u7684\u4f59\u6570\u3002 mod(15,7) 1 power(num1,num2) \u8fd4\u56de\u67d0\u6570\u7684\u4e58\u5e42\u3002 power(3,2) 9 greater(num1,num2) \u5224\u65ad\u4e00\u4e2a\u6570\u662f\u5426\u5927\u4e8e\u53e6\u4e00\u4e2a\u6570\u3002 greater(2,3) false lessthan(num1,num2) \u5224\u65ad\u4e00\u4e2a\u6570\u662f\u5426\u5c0f\u4e8e\u53e6\u4e00\u4e2a\u6570\u3002 lessthan(2,3) true greatereq(num1,num2) \u5224\u65ad\u4e00\u4e2a\u6570\u662f\u5426\u5927\u4e8e\u7b49\u4e8e\u53e6\u4e00\u4e2a\u6570\u3002 greatereq(2,3) false lessthaneq(num1,num2) \u5224\u65ad\u4e00\u4e2a\u6570\u662f\u5426\u5c0f\u4e8e\u7b49\u4e8e\u53e6\u4e00\u4e2a\u6570\u3002 lessthaneq(2,3) false equal(num1,num2) \u5224\u65ad\u4e00\u4e2a\u6570\u662f\u5426\u7b49\u4e8e\u53e6\u4e00\u4e2a\u6570\u3002 equal(`Old price`, `New price`) false unequal \u5224\u65ad\u4e00\u4e2a\u6570\u662f\u5426\u4e0d\u7b49\u4e8e\u53e6\u4e00\u4e2a\u6570\u3002 unequal(`Old price`, `New price`) true concatenate(string1, string2, ...) \u5c06\u591a\u4e2a\u6587\u672c\u503c\u8fde\u63a5\u4e3a\u5355\u4e2a\u6587\u672c\u503c\u3002 concatenate(`Supplier`, \" has the product \", `Product`) Microsoft has the product Windows","title":"\u64cd\u4f5c\u7b26"},{"location":"sql/function/#_3","text":"\u64cd\u4f5c\u7b26\u51fd\u6570\u7684\u53c2\u6570\u7c7b\u578b\u5fc5\u987b\u662f\u6570\u5b57\u3002\u5982\u679c\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4f1a\u81ea\u52a8\u5c1d\u8bd5\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\u3002 \u64cd\u4f5c\u7b26 \u63cf\u8ff0 \u8f93\u5165 \u7ed3\u679c abs(number) \u8fd4\u56de\u4e00\u4e2a\u6570\u7684\u7edd\u5bf9\u503c\u3002 abs(-2) 2 ceiling(number, significance) \u5c06\u6570\u5b57\u5411\u4e0a\u820d\u5165\u5230\u6700\u63a5\u8fd1\u7684\u6574\u6570\u6216\u6700\u63a5\u8fd1\u7684\u6307\u5b9a\u57fa\u6570\u7684\u500d\u6570\u3002(\u5982\u679c\u4efb\u4f55\u4e00\u4e2a\u53c2\u6570\u662f\u975e\u6570\u503c\u578b\uff0c\u5219 CEILING \u8fd4\u56de\u7a7a\u3002 \u4e0d\u8bba\u53c2\u6570 number \u7684\u7b26\u53f7\u5982\u4f55\uff0c\u6570\u503c\u90fd\u662f\u6cbf\u7edd\u5bf9\u503c\u589e\u5927\u7684\u65b9\u5411\u5411\u4e0a\u820d\u5165\u3002 \u5982\u679c number \u6b63\u597d\u662f significance \u7684\u500d\u6570\uff0c\u5219\u4e0d\u8fdb\u884c\u820d\u5165\u3002 \u5982\u679c number \u548c significance \u90fd\u4e3a\u8d1f\uff0c\u5219\u5bf9\u503c\u6309\u8fdc\u79bb 0 \u7684\u65b9\u5411\u8fdb\u884c\u5411\u4e0b\u820d\u5165\u3002) ceiling(2.14) 3 \u5982\u679c number \u4e3a\u8d1f\uff0csignificance \u4e3a\u6b63\uff0c\u5219\u5bf9\u503c\u6309\u671d\u5411 0 \u7684\u65b9\u5411\u8fdb\u884c\u5411\u4e0a\u820d\u5165\uff0c ceiling(-2.14, 4) 0 even(number) \u5c06\u6b63\u6570\u5411\u4e0a\u820d\u5165\u5230\u6700\u8fd1\u7684\u5076\u6570\uff0c\u8d1f\u6570\u5411\u4e0b\u820d\u5165\u5230\u6700\u8fd1\u7684\u5076\u6570\u3002 even(2.14) 4 exp(number) \u8fd4\u56de e \u7684 n \u6b21\u65b9\u3002 expr(1) 2.71828... floor(number, significance) \u5c06\u6570\u5b57\u5411\u4e0b\u820d\u5165\u5230\u6700\u63a5\u8fd1\u7684\u6574\u6570\u6216\u6700\u63a5\u8fd1\u7684\u6307\u5b9a\u57fa\u6570\u7684\u500d\u6570\u3002(\u5982\u679c\u4efb\u4e00\u53c2\u6570\u4e3a\u975e\u6570\u503c\u578b\uff0c\u5219 FLOOR \u8fd4\u56de \u7a7a \u3002 \u5982\u679c number \u4e3a\u6b63\u503c\u4e14\u6307\u5b9a\u7684\u57fa\u6570\u4e3a\u8d1f\uff0c\u5219 FLOOR \u8fd4\u56de \u7a7a \u3002 \u5982\u679c number \u7684\u7b26\u53f7\u4e3a\u6b63\uff0c\u5219\u6570\u503c\u5411\u4e0b\u820d\u5165\uff0c\u5e76\u671d\u96f6\u8c03\u6574\u3002 \u5982\u679c number \u7684\u7b26\u53f7\u4e3a\u8d1f\uff0c\u5219\u6570\u503c\u6cbf\u7edd\u5bf9\u503c\u51cf\u5c0f\u7684\u65b9\u5411\u5411\u4e0b\u820d\u5165\u3002\uff09 floor(2.86) 2 \u5982\u679c number \u7684\u7b26\u53f7\u4e3a\u8d1f\uff0c\u5219\u6570\u503c\u6cbf\u7edd\u5bf9\u503c\u51cf\u5c0f\u7684\u65b9\u5411\u5411\u4e0b\u820d\u5165\u3002 \u5982\u679c number \u6b63\u597d\u662f significance \u7684\u500d\u6570\uff0c\u5219\u4e0d\u8fdb\u884c\u820d\u5165\u3002 floor(-3.14, 5) -5 int(number) \u5c06\u6570\u503c\u5411\u4e0b\u53d6\u6574\u4e3a\u6700\u63a5\u8fd1\u7684\u6574\u6570\u3002 int(-3.14) -4 lg(number) \u8fd4\u56de\u7ed9\u5b9a\u6570\u503c\u4ee5 10 \u4e3a\u5e95\u7684\u5bf9\u6570\u3002 lg(100) 2 log(number, base) \u6839\u636e\u7ed9\u5b9a\u5e95\u6570\u8fd4\u56de\u6570\u5b57\u7684\u5bf9\u6570\u3002 log(81, 3) 4 \u5982\u679c\u5e95\u6570\u6ca1\u6709\u6307\u5b9a\uff0c\u9ed8\u8ba4\u4ee510\u4f5c\u4e3a\u5e95\u6570\u3002 log(1000) 3 odd(number) \u5c06\u6b63(\u8d1f)\u6570\u5411\u4e0a(\u4e0b)\u820d\u5165\u5230\u6700\u63a5\u8fd1\u7684\u5947\u6570\u3002 odd(-2.14) -1 round(number, digits) \u6309\u6307\u5b9a\u7684\u4f4d\u6570\u5bf9\u6570\u503c\u8fdb\u884c\u56db\u820d\u4e94\u5165\u3002\u5982\u679c num_digits \u7b49\u4e8e 0\uff0c\u5219\u5c06\u6570\u5b57\u56db\u820d\u4e94\u5165\u5230\u6700\u63a5\u8fd1\u7684\u6574\u6570\u3002 round(3.14) 3 \u5982\u679c num_digits \u5927\u4e8e 0\uff08\u96f6\uff09\uff0c\u5219\u5c06\u6570\u5b57\u56db\u820d\u4e94\u5165\u5230\u6307\u5b9a\u7684\u5c0f\u6570\u4f4d round(3.14, 1) 3.1 \u5982\u679c num_digits \u5c0f\u4e8e 0\uff0c\u5219\u5728\u5c0f\u6570\u70b9\u5de6\u4fa7\u524d\u51e0\u4f4d\u8fdb\u884c\u56db\u820d\u4e94\u5165\u3002 round(3.14, -3) 0 rounddown(number, digits) \u5411\u4e0b\u820d\u5165\u6570\u5b57\u3002\uff08\u5982\u679c num_digits \u5927\u4e8e 0\uff08\u96f6\uff09\uff0c\u5219\u5c06\u6570\u5b57\u5411\u4e0b\u820d\u5165\u5230\u6307\u5b9a\u7684\u5c0f\u6570\u4f4d\u3002 \u5982\u679c num_digits \u7b49\u4e8e 0\uff0c\u5219\u5c06\u6570\u5b57\u5411\u4e0b\u820d\u5165\u5230\u6700\u63a5\u8fd1\u7684\u6574\u6570\u3002 \u5982\u679c num_digits \u5c0f\u4e8e 0\uff0c\u5219\u5728\u5c0f\u6570\u70b9\u5de6\u4fa7\u524d\u51e0\u4f4d\u8fdb\u884c\u5411\u4e0b\u820d\u5165\u3002\uff09 rounddown(3.12, 1) 3.1 roundup(number, digits) \u5411\u4e0a\u820d\u5165\u6570\u5b57\u3002\uff08\u5982\u679c num_digits \u5927\u4e8e 0\uff08\u96f6\uff09\uff0c\u5219\u5c06\u6570\u5b57\u5411\u4e0a\u820d\u5165\u5230\u6307\u5b9a\u7684\u5c0f\u6570\u4f4d\u3002 \u5982\u679c num_digits \u7b49\u4e8e 0\uff0c\u5219\u5c06\u6570\u5b57\u5411\u4e0a\u820d\u5165\u5230\u6700\u63a5\u8fd1\u7684\u6574\u6570\u3002 \u5982\u679c num_digits \u5c0f\u4e8e 0\uff0c\u5219\u5728\u5c0f\u6570\u70b9\u5de6\u4fa7\u524d\u51e0\u4f4d\u8fdb\u884c\u5411\u4e0a\u820d\u5165\u3002\uff09 roundup(-3.15) -4 sign(number) \u8fd4\u56de\u6570\u5b57\u7684\u6b63\u8d1f\u53f7: \u4e3a\u6b63\u65f6\uff0c\u8fd4\u56de 1\uff1b\u4e3a\u96f6\u65f6\uff0c\u8fd4\u56de 0\uff1b\u4e3a\u8d1f\u65f6\uff0c\u8fd4\u56de -1\u3002 sign(-2) -1 sqrt(number) \u8fd4\u56de\u67d0\u6570\u7684\u5e73\u65b9\u6839\u3002 sqrt(81) 9","title":"\u6570\u5b66\u51fd\u6570"},{"location":"sql/function/#_4","text":"\u64cd\u4f5c\u7b26 \u63cf\u8ff0 \u8f93\u5165 \u7ed3\u679c exact(string1, string2) \u8fd4\u56de\u4e24\u4e2a\u6570\u5b57\u7b26\u4e32\u662f\u5426\u76f8\u7b49\u3002 exact('SeaTable', 'Seatable') false find(findString, sourceString, startPosition) \u83b7\u53d6\u5728\u4e00\u4e2a\u5b57\u7b26\u4e32\u5728\u53e6\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u7684\u7d22\u5f15\u3002\u5982\u679c\u627e\u4e0d\u5230\uff0c\u90a3\u4e48\u8fd4\u56de 0\u3002(\u533a\u5206\u5927\u5c0f\u5199)\u3002 find('Sea', 'seaTable', 1) 0 left(string, count) Returns the specified number (count) of characters at the beginning of a string. left('SeaTable', 3) Sea len(string) \u4ece\u4e00\u4e2a\u6587\u672c\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5f00\u59cb\u8fd4\u56de\u6307\u5b9a\u4e2a\u6570\u7684\u5b57\u7b26\u3002 len('SeaTable') 8 lower(string) \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5c0f\u5199\u3002 lower('German) german mid(string, startPosition, count) \u4ece\u6587\u672c\u5b57\u7b26\u4e32\u4e2d\u6307\u5b9a\u7684\u8d77\u59cb\u4f4d\u7f6e\u8d77\u8fd4\u56de\u6307\u5b9a\u957f\u5ea6\u7684\u5b57\u7b26\u3002 mid('SeaTable is the best', 1, 8) SeaTable replace(sourceString, startPosition, count, newString) \u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u7684\u90e8\u5206\u5b57\u7b26\u7528\u53e6\u4e00\u4e2a\u5b57\u7b26\u4e32\u66ff\u6362\u3002 replace('SeaTable is the best.', 1, 8, 'Seafile') Seafile is the best. rept(string, number) \u5c06\u5b57\u7b26\u4e32\u91cd\u590d nunber \u6b21\u3002 rept('Sea ', 3) SeaSeaSea right(string, count) \u4ece\u4e00\u4e2a\u6587\u672c\u5b57\u7b26\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u5f00\u59cb\u8fd4\u56de\u6307\u5b9a\u4e2a\u6570\u7684\u5b57\u7b26\u3002 right('SeaTable', 5) Table search(findString, sourceString, startPosition) \u8fd4\u56de\u4e00\u4e2a\u6307\u5b9a\u5b57\u7b26\u6216\u6587\u672c\u5b57\u7b26\u4e32\u5728\u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u4ece\u5de6\u5230\u53f3\u67e5\u627e(\u5ffd\u7565\u5927\u5c0f\u5199)\u3002 search('Sea', 'seaTable', 1) 1 substitute(sourceString, oldString, newString, index) \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u90e8\u5206\u5b57\u7b26\u4e32\u4ee5\u65b0\u5b57\u7b26\u4e32\u66ff\u6362\u3002 substitute('SeaTableTable', 'Table', 'file', 1) SeafileTable T(value) \u68c0\u6d4b\u7ed9\u5b9a\u503c\u662f\u5426\u4e3a\u6587\u672c\uff0c\u5982\u679c\u662f\u6587\u672c\u6309\u539f\u6837\u8fd4\u56de\uff0c\u5982\u679c\u4e0d\u662f\u6587\u672c\u5219\u8fd4\u56de\u7a7a\u6587\u672c\u3002 T('123') 123 text(number, format) \u6839\u636e\u6307\u5b9a\u7684\u6570\u503c\u683c\u5f0f\u5c06\u6570\u5b57\u8f6c\u6210\u6587\u672c\u3002\u683c\u5f0f\u53c2\u6570 format_text \u53ef\u4ee5\u4e3a number, percent, yuan, dollar, euro \u4e2d\u7684\u4e00\u4e2a\u3002 text(150, 'euro') \u20ac150 trim(string) \u79fb\u9664\u5b57\u7b26\u4e32\u4e24\u7aef\u7684\u7a7a\u683c\u3002 trim(' SeaTable ') SeaTable upper(string) \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5927\u5199\u3002 upper('German) GERMAN value(string) \u5c06\u4e00\u4e2a\u4ee3\u8868\u6570\u503c\u7684\u6587\u672c\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u503c\u3002 value('123') 123","title":"\u6587\u672c\u51fd\u6570"},{"location":"sql/function/#_5","text":"\u65e5\u671f\u51fd\u6570\u7684\u8f93\u5165\u53c2\u6570\u5fc5\u987b\u662f\u65f6\u95f4\u6216\u8005\u65e5\u671f\u7c7b\u578b\u3002\u8f93\u5165\u5e38\u91cf\u65f6\uff0c\u4ee5\u5b57\u7b26\u4e32\u8868\u793a\uff0c\u683c\u5f0f\u53ef\u4ee5\u662f \"2021-09-01 12:00:01\" \u6216\u8005 \"2021-09-01\"\u3002\u5f53\u5728 select \u8bed\u53e5\u4e2d\u8fd4\u56de\u65e5\u671f\u516c\u5f0f\u7ed3\u679c\u65f6\uff0c\u5982\u679c\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u662f\u65f6\u95f4\u6216\u8005\u65e5\u671f\uff0c\u90a3\u4e48\u4f1a\u88ab\u8f6c\u6362\u4e3a RFC3339 \u683c\u5f0f\u7684\u5b57\u7b26\u4e32 \uff0c\u6bd4\u5982 \"2021-09-03T00:00:00+08:00\"\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u516c\u5f0f\u8fd4\u56de\u7c7b\u578b\u4e3a\u65f6\u95f4\u6216\u8005\u65e5\u671f\uff0c\u90a3\u4e48\u8fd4\u56de\u7684\u7ed3\u679c\u4e0d\u80fd\u4f5c\u4e3a\u53c2\u6570\u4f20\u7ed9\u6570\u5b66\u51fd\u6570\u3001\u5b57\u7b26\u4e32\u51fd\u6570\u3002 \u64cd\u4f5c\u7b26 \u63cf\u8ff0 \u8f93\u5165 \u7ed3\u679c date(year, month, day) \u4ece\u8f93\u5165\u7684\u5e74\u3001\u6708\u548c\u65e5\u8fd4\u56de\u56fd\u9645\u683c\u5f0f (ISO) \u7684\u65e5\u671f\u3002 date(2021, 1, 3) 2021-01-03T00:00:00+08:00 dateAdd(date, count, unit) \u589e\u52a0\u65f6\u95f4\u3002\u6700\u540e\u4e00\u4e2a\u53c2\u6570 unit \u53ef\u4ee5\u4e3a years, months, weeks, days, hours, minutes, seconds \u4e2d\u7684\u4e00\u4e2a\u3002 dateAdd('2020-02-03', 2, 'days') 2020-02-05T00:00:00+08:00 datedif(startDate, endDate, unit) \u8ba1\u7b97\u4e24\u4e2a\u65e5\u671f\u4e4b\u95f4\u76f8\u9694\u7684\u79d2\u6570\u3001\u5929\u6570\u3001\u6708\u6570\u6216\u5e74\u6570\u3002\u53c2\u6570 unit \u53ef\u4ee5\u4e3a S, Y, M, D, YD, YM, MD. \u4e2d\u7684\u4e00\u4e2a\u3002 dateDif('2018-01-01', '2020-01-01') 2 unit\u53c2\u6570\u662f\u53ef\u9009\u7684: S (\u79d2\u6570), D (\u5929\u6570), M (\u6708\u6570), Y (\u5e74\u6570), YD (\u5929\u6570\uff0c\u5ffd\u7565\u5e74\u4efd), YM (\u6708\u4efd\uff0c\u5ffd\u7565\u5e74\u4efd\u548c\u5929\u6570), MD (\u5929\u6570\uff0c\u5ffd\u7565\u5e74\u4efd\u548c\u6708\u4efd). dateDif('2019-10-11', '2020-12-12', 'M') 14 day(date) \u8fd4\u56de\u4e00\u4e2a\u6708\u4e2d\u7684\u7b2c\u51e0\u5929\u7684\u6570\u503c\uff0c\u4ecb\u4e8e 1 \u5230 31 \u4e4b\u95f4 day('2020-01-03') 3 eomonth(startDate, months) \u8fd4\u56de\u4e00\u4e2a\u65e5\u671f\uff0c\u8868\u793a\u6307\u5b9a\u65e5\u671f\u4e4b\u524d\u6216\u4e4b\u540e\u7684\u51e0\u4e2a\u6708\u7684\u6700\u540e\u4e00\u5929\u3002 eomonth('2020-01-01', 1) 2020-02-29T00:00:00+08:00 \u5982\u679c\u7ed9\u5b9a\u7684\u6570\u5b57\uff08months\uff09\u4e3a\u8d1f\u6570\uff0c\u5219\u8868\u793a\u4e4b\u524d\u7684\u51e0\u4e2a\u6708\u7684\u6700\u540e\u4e00\u5929\u3002 eomonth('2020-01-01', -1) 2019-12-31T00:00:00+08:00 hour(date) \u8fd4\u56de\u5c0f\u65f6\u6570\u503c\uff0c\u662f\u4e00\u4e2a 0 (12:00 A.M.) \u5230 23 (11:00 P.M.) \u4e4b\u95f4\u7684\u6574\u6570\u3002 hour('2020-02-14 13:14:52) 13 \u5982\u679c\u4e0d\u5305\u542b\u5c0f\u65f6\uff0c\u5219\u8fd4\u56de0\u3002 hour('2020-02-14) 0 hours(startDate, endDate) \u8fd4\u56de\u4e24\u4e2a\u65e5\u671f\u4e4b\u95f4\u7684\u5c0f\u65f6\u6570\u3002 hours('2020-02-14 13:14', '2020-02-14 15:14') 2 \u5982\u679c\u65e5\u671f\u4e2d\u4e0d\u5305\u542b\u5c0f\u65f6\uff0c\u5219\u8ba4\u4e3a\u662f\u5728\u8be5\u5929\u76840\u65f6\u3002 hours('2020-02-14', '2020-02-14 15:14') 15 minute(date) \u8fd4\u56de\u5206\u949f\u6570\u503c\uff0c\u662f\u4e00\u4e2a 0 \u5230 59 \u4e4b\u95f4\u7684\u6574\u6570\u3002 minute('2020-02-14 13:14:52 14 \u5982\u679c\u65e5\u671f\u4e2d\u4e0d\u5305\u542b\u5206\u949f\uff0c\u5219\u8fd4\u56de0\u3002 minute('2020-02-14) 0 month(date) \u8fd4\u56de\u6708\u4efd\u503c\uff0c\u662f\u4e00\u4e2a 1 (\u4e00\u6708)\u5230 12 (\u5341\u4e8c\u6708)\u4e4b\u95f4\u7684\u6570\u5b57\u3002 month('2020-02-14 13:14:52) 2 months(startDate, endDate) \u8fd4\u56de\u4e24\u4e2a\u65e5\u671f\u4e4b\u95f4\u7684\u6708\u6570\u3002 months('2020-02-01 13:14', '2020-03-31 15:54') 1 \u5982\u679c\u65e5\u671f\u4e0d\u5305\u542b\u6708\u4efd\uff0c\u5219\u9ed8\u8ba4\u4e3a1\u6708\u3002 months('2020', '2021') 12 networkdays(startDate, endDate, holiday1, holiday2, ...) \u8fd4\u56de\u4e24\u4e2a\u65e5\u671f\u4e4b\u95f4\u7684\u5b8c\u6574\u5de5\u4f5c\u65e5\u6570\u3002 networkdays('2020-01-01', '2020-01-07','2020-01-01') 4 now() \u83b7\u53d6\u73b0\u5728\u7684\u65f6\u95f4\u3002 now() 2020-09-07T12:59:00+08:00 second(date) \u8fd4\u56de\u79d2\u6570\u503c\uff0c\u662f\u4e00\u4e2a 0 \u5230 59 \u4e4b\u95f4\u7684\u6574\u6570\u3002 second('2020-02-14 13:14:52') 52 today() \u83b7\u53d6\u4eca\u5929\u7684\u65e5\u671f\u3002 today() 2020-09-07T00:00:00+08:00 weekday(date, weekStart) \u8fd4\u56de\u4ee3\u8868\u4e00\u5468\u4e2d\u7684\u7b2c\u51e0\u5929\u7684\u6570\u503c\uff0c\u662f\u4e00\u4e2a 1 \u5230 7 \u4e4b\u95f4\u7684\u6574\u6570\u3002 weekday('2020-01-01', 'Monday') 3 weeknum(date, return_type) \u8fd4\u56de\u7279\u5b9a\u65e5\u671f\u7684\u5468\u7f16\u53f7\uff0c\u5305\u542b1\u67081\u65e5\u7684\u661f\u671f\u662f\u5f53\u5e74\u7684\u7b2c\u4e00\u5468\uff0c\u5e76\u7f16\u53f7\u4e3a\u7b2c 1 \u5468\u3002 weeknum('2020-01-12', 11) 2 year(date) \u8fd4\u56de\u65e5\u671f\u7684\u5e74\u4efd\u503c\uff0c\u4e00\u4e2a 1900-9999 \u4e4b\u95f4\u7684\u6570\u5b57\u3002 year('2020-01-01') 2020 startofweek(date, weekStart) \u8fd4\u56de\u65e5\u671f\u6240\u5728\u5468\u7684\u7b2c\u4e00\u5929\uff0cweekStart \u9ed8\u8ba4\u662f sunday\uff0c\u4e5f\u53ef\u4ee5\u8bbe\u7f6e\u4e3a monday\u3002 startofweek('2021-04-28') 2021-4-25T00:00:00+08:00 quarter(date) \u8fd4\u56de\u65e5\u671f\u6240\u5728\u5b63\u5ea6\uff0c\u8fd4\u56de\u503c\u4e3a 1, 2, 3, 4\u3002 quarter('2021-01-01') 1 isodate(date) \u8fd4\u56de\u65e5\u671f\u7684 ISO \u5b57\u7b26\u4e32\u8868\u793a\uff0c\u6bd4\u5982 \"2021-05-11\"\u3002 isodate('2021-01-01 11:00:00') 2021-01-01 isomonth(date) \u8fd4\u56de\u5e74\u6708\u7684 ISO \u5b57\u7b26\u4e32\u8868\u793a\uff0c\u6bd4\u5982 \"2020-05\"\u3002 isomonth('2021-01-01 11:00:00') 2021-01","title":"\u65e5\u671f\u51fd\u6570"},{"location":"sql/function/#_6","text":"\u64cd\u4f5c\u7b26 \u63cf\u8ff0 \u8f93\u5165 \u7ed3\u679c and(logical1, logical2, ...) \u68c0\u67e5\u662f\u5426\u6240\u6709\u53c2\u6570\u5747\u4e3a TRUE\uff0c\u5982\u679c\u6240\u6709\u53c2\u6570\u503c\u5747\u4e3a TRUE\uff0c\u5219\u8fd4\u56de TRUE\u3002 and(1, '', 2) false if(logical, value1, value2) \u5224\u65ad\u662f\u5426\u6ee1\u8db3\u67d0\u4e2a\u6761\u4ef6\uff0c\u5982\u679c\u6ee1\u8db3\u8fd4\u56de\u4e00\u4e2a\u503c\uff0c\u5982\u679c\u4e0d\u6ee1\u8db3\u5219\u8fd4\u56de\u53e6\u4e00\u4e2a\u503c\u3002 if(1>2, 3, 4) 4 ifs(logical1, value1, logical2, value2, ...) \u68c0\u67e5\u662f\u5426\u6ee1\u8db3\u4e00\u4e2a\u6216\u591a\u4e2a\u6761\u4ef6\u5e76\u8fd4\u56de\u4e0e\u7b2c\u4e00\u4e2a TRUE \u6761\u4ef6\u5bf9\u5e94\u7684\u503c ifs( 1>2, 3, 5>4, 9) 9 not(boolean) \u5bf9\u53c2\u6570\u7684\u903b\u8f91\u503c\u6c42\u53cd: \u53c2\u6570\u4e3a TRUE \u65f6\u8fd4\u56de FALSE\uff1b\u53c2\u6570\u4e3a FALSE \u65f6\u8fd4\u56de TRUE\u3002 not(and(1, '', 2)) true or(logical1, logical2, ...) \u5982\u679c\u4efb\u4e00\u53c2\u6570\u503c\u4e3a TRUE\uff0c\u5373\u8fd4\u56de TRUE\uff1b\u53ea\u6709\u5f53\u6240\u6709\u53c2\u6570\u503c\u5747\u4e3a FALSE \u65f6\u624d\u8fd4\u56de FALSE\u3002 or(1,'',2) true switch(logical, matcher1, value1, matcher2, value2, ..., default) \u6839\u636e\u503c\u5217\u8868\u6c42\u503c\u8868\u8fbe\u5f0f\u5e76\u8fd4\u56de\u4e0e\u7b2c\u4e00\u4e2a\u5339\u914d\u503c\u5bf9\u5e94\u7684\u7ed3\u679c\u3002\u5982\u679c\u6ca1\u6709\u5339\u914d\u9879\uff0c\u5219\u8fd4\u56de\u53ef\u9009\u9ed8\u8ba4\u503c\u3002 switch(`grades`, 1, 'very good', 2, 'good', 3, 'satisfactory', 4, 'passed', 'failed') very good xor(logical1, logical2, ...) \u8fd4\u56de\u6240\u6709\u53c2\u6570\u7684\u903b\u8f91\u201c\u5f02\u6216\u201d\u503c\u3002 xor(1, 0, 2\\<1) false","title":"\u903b\u8f91\u51fd\u6570"},{"location":"sql/function/#_7","text":"\u64cd\u4f5c\u7b26 \u63cf\u8ff0 \u8f93\u5165 \u7ed3\u679c average(number1, number2, ...) \u8fd4\u56de\u4e00\u7ec4\u6570\u7684\u5e73\u5747\u503c\u3002 average(1, 2, 3, 4, 5) 3 counta(textORnumber1, textORnumber2, ...) Counts the number of non-e\u8ba1\u7b97\u4e00\u7ec4\u503c\u4e2d\u975e\u7a7a\u503c\u7684\u4e2a\u6570\u3002\u975e\u7a7a\u503c\u5305\u62ec\u6570\u5b57\u548c\u5b57\u7b26\u4e32\u3002 counta(1, '', 2, '3') 3 countall(textORnumber1, textORnumber2, ...) \u8ba1\u7b97\u4e00\u7ec4\u503c\u7684\u4e2a\u6570 (\u5305\u62ec\u7a7a\u503c)\u3002 countall(1, '', 2, '3') 4 countblank(textORnumber1, textORnumber2, ...) countblank(textOrNumber1, [textOrNumber2, ...]) countall(1, '', 2, '3') 1","title":"\u7edf\u8ba1\u51fd\u6570"},{"location":"sql/sql/","text":"SQL \u652f\u6301 \u00b6 SeaTable \u4e2d\u6570\u636e\u67e5\u8be2\u652f\u6301 SQL \u8bed\u53e5\u3002\u4f7f\u7528 SQL \u8bed\u53e5\u4f1a\u68c0\u7d22\u5b8c\u6574\u7684\u6570\u636e\u96c6\uff0c\u4e5f\u5c31\u662f\u5305\u62ec\u5f52\u6863\u548c\u975e\u5f52\u6863\u7684\u6570\u636e\u3002 \u8bed\u6cd5 \u00b6 \u76ee\u524d\u53ea\u652f\u6301\u57fa\u672c\u7684 select \u8bed\u53e5\uff0c\u8bed\u6cd5\u5982\u4e0b\uff1a SELECT [ DISTINCT ] fields FROM table_name [ WhereClause ] [ GroupByClause ] [ HavingClause ] [ OrderByClause ] [ Limit Option ] \u8bf4\u660e\uff1a \u6682\u4e0d\u652f\u6301\u591a\u4e2a\u5b50\u8868\u67e5\u8be2\u7684 JOIN \u8bed\u53e5; where \u8bed\u53e5\u4e2d\u652f\u6301\u5927\u90e8\u5206\u7684\u8868\u8fbe\u5f0f (\u7b97\u6570\u8868\u8fbe\u5f0f\uff0c \u6bd4\u8f83\u8868\u8fbe\u5f0f\u7b49), \u5173\u952e\u5b57\u5305\u62ec\uff1a [NOT] LIKE , IN , BETWEEN ... AND ... , AND , OR , NOT , IS [NOT] TRUE , IS [NOT] NULL . \u5176\u4e2d\uff1a \u7b97\u672f\u8868\u8fbe\u5f0f\u53ea\u652f\u6301\u6570\u5b57. LIKE \u8bed\u53e5\u53ea\u652f\u6301\u5b57\u7b26\u4e32. \u652f\u6301\u4f7f\u7528 ILIKE \u5173\u952e\u5b57\u66ff\u4ee3 LIKE \uff0c\u4ece\u800c\u5728\u5339\u914d\u4e2d\u4e0d\u533a\u5206\u5927\u5c0f\u5199. BETWEEN ... AND ... \u8bed\u53e5\u53ea\u652f\u6301\u6570\u5b57\u4e0e\u65f6\u95f4. \u5176\u4e2d\u65f6\u95f4\u5e38\u6570\u5e94\u8be5\u662f ISO \u683c\u5f0f\u7684\u5b57\u7b26\u4e32 (\u5982: \"2020-09-08 00:11:23\"); GROUP BY \u8bed\u6cd5\u6bd4\u8f83\u4e25\u683c. \u9664\u4e86\u805a\u5408\u51fd\u6570\u7684\u5173\u952e\u5b57( COUNT , SUM , MAX , MIN , AVG ) \u4ee5\u53ca\u516c\u5f0f\u7684\u5173\u952e\u5b57(\u7ec6\u8282\u8bf7\u67e5\u770b\u672c\u6587\u6863\u7684\u6269\u5c55\u8bed\u6cd5)\u4e4b\u5916\uff0c\u6240\u9009\u5b57\u6bb5\u4e5f\u5fc5\u987b\u540c\u6837\u4e5f\u8981\u51fa\u73b0\u5728 group by \u7684\u8bed\u53e5\u4e2d; HAVING \u8fc7\u6ee4\u7ecf group by \u805a\u5408\u540e\u7684\u884c\u3002\u53ea\u6709 group by \u8bed\u53e5\u4e2d\u7684\u5b57\u6bb5\u6216\u8005\u805a\u5408\u51fd\u6570\u80fd\u88ab having \u8bed\u53e5\u5f15\u7528\uff0c\u5176\u5b83\u8bed\u6cd5\u548c where \u8bed\u53e5\u76f8\u540c\uff1b \"order by\" \u8bed\u53e5\u8868\u793a\u6839\u636e\u67d0\u5b57\u6bb5\u6392\u5e8f\uff0c \u8be5\u5b57\u6bb5\u5fc5\u987b\u51fa\u73b0\u5728 select \u8868\u8fbe\u5f0f\u4e2d\u3002\u6bd4\u5982\uff1a select a from table order by b \u662f\u65e0\u6548\u8bed\u53e5; \u800c select a from table order by a \u6216\u8005 select abs(a), b from table order by abs(a) \u5219\u53ef\u4ee5\u8fd0\u884c\uff1b Limit \u8bed\u53e5\u548c MySQL \u683c\u5f0f\u4e00\u6837\uff0c\u8bed\u6cd5\u662f OFFSET ... LIMIT ... \u3002 \u67e5\u8be2\u7ed3\u679c\u662f\u4ee5 JSON \u7684\u683c\u5f0f\u8fdb\u884c\u8fd4\u56de. \u5176\u4e2d key \u5b57\u6bb5\u662f\u5217\u7684\u552f\u4e00\u6807\u793a\uff0c \u800c\u4e0d\u662f\u5217\u540d\u3002 \u6570\u636e\u7c7b\u578b \u00b6 \u4ee5\u4e0b\u8868\u683c\u5217\u51fa\u4e86 SeaTable \u8868\u683c\u4e2d\u7684\u6570\u636e\u4e0e SQL \u8bed\u53e5\u5b57\u6bb5\u4e2d\u6570\u636e\u7c7b\u578b\u7684\u5bf9\u5e94\u60c5\u51b5 SeaTable \u6570\u636e\u7c7b\u578b SQL \u5b57\u6bb5\u7c7b\u578b \u6587\u672c String \u957f\u6587\u672c String \u6570\u5b57 Float \u5355\u9009 String. \u5728 where \u8868\u8fbe\u5f0f\u4e2d\uff0c \u9700\u8981\u4f7f\u7528\u9009\u9879\u7684\u540d\u79f0\uff0c\u5982\uff1a where single_select = \"New York\" \u3002\u67e5\u8be2\u7ed3\u679c\u9ed8\u8ba4\u8fd4\u56de\u7684\u662f\u9009\u9879\u7684 key \uff0c\u5982\u9700\u8fd4\u56de\u9009\u9879\u7684\u540d\u79f0\uff0c\u5219\u5e94\u628a\u67e5\u8be2\u8bf7\u6c42\u4e2d\u7684 convert_key \u53c2\u6570\u8bbe\u7f6e\u4e3a TRUE \u591a\u9009 \u5305\u542b string \u7684\u5217\u8868. \u5728 where \u8868\u8fbe\u5f0f\u4e2d\uff0c \u9700\u8981\u4f7f\u7528\u9009\u9879\u7684\u540d\u79f0\uff0c\u5982\uff1a where single_select = \"New York\" \u3002\u67e5\u8be2\u7ed3\u679c\u9ed8\u8ba4\u8fd4\u56de\u7684\u662f\u9009\u9879\u7684 key \uff0c\u5982\u9700\u8fd4\u56de\u9009\u9879\u7684\u540d\u79f0\uff0c\u5219\u5e94\u628a\u67e5\u8be2\u8bf7\u6c42\u4e2d\u7684 convert_key \u53c2\u6570\u8bbe\u7f6e\u4e3a TRUE \u52fe\u9009 Bool \u65e5\u671f Datetime. ISO \u683c\u5f0f\u7684\u65f6\u95f4\u5b57\u7b26\u4e32 \u5982: \"2006-1-2\" or \"2006-1-2 15:04:05\". \u5730\u7406\u4f4d\u7f6e \u67e5\u8be2\u7ed3\u679c\u4ee5json\u7684\u683c\u5f0f\u8fdb\u884c\u8fd4\u56de \u56fe\u7247 \u5305\u542b\u56fe\u7247\u7684 URL \u7684\u5217\u8868 \u6587\u4ef6 \u4e0d\u80fd\u7528\u4e8e where \u8bed\u53e5\uff0c \u67e5\u8be2\u7ed3\u679c\u5c06\u4ee5 JSON \u7684\u683c\u5f0f\u8fdb\u884c\u8fd4\u56de\u3002 \u534f\u4f5c\u4eba \u5305\u542b\u7528\u6237 ID \u7684\u5217\u8868, \u683c\u5f0f\u5982 5758ecdce3e741ad81293a304b6d3388@auth.local, \u5982\u679c\u7528\u5230\u7528\u6237\u540d\u79f0\uff0c\u9700\u8981\u901a\u8fc7 SeaTable \u7684\u76f8\u5173 API \u8fdb\u884c\u8f6c\u6362\u3002 \u94fe\u63a5\u5176\u4ed6\u8bb0\u5f55 \u5305\u542b\u94fe\u63a5\u884c\u7684\u5217\u8868\u3002\u81ea 2.4 \u7248\u672c\u8d77\uff0c\u53ef\u4ee5\u5728 WHERE \u5b50\u53e5\u4e2d\u914d\u5408 = \u3001 IN \u3001 HAS ANY OF \u3001 HAS ALL OF \u3001 HAS NONE OF \u3001 IS EXACTLY \u6216 IS NULL \u64cd\u4f5c\u7b26\u4f7f\u7528\u3002\u94fe\u63a5\u884c\u7684\u663e\u793a\u5217\u7684\u503c\u5c06\u88ab\u7528\u4ee5\u8ba1\u7b97\uff0c\u5e76\u5728\u7ed3\u679c\u4e2d\u8fd4\u56de\u3002\u8fd4\u56de\u7684\u7ed3\u679c\u4e2d\u6700\u591a\u5305\u542b 10 \u4e2a\u94fe\u63a5\u884c\uff0c\u4f9d\u7167\u521b\u5efa\u65f6\u95f4\u7684\u5148\u540e\u6765\u6392\u5e8f\u3002\u5982\u679c\u94fe\u63a5\u884c\u7684\u663e\u793a\u5217\u7684\u503c\u7c7b\u578b\u662f String \uff0c\u90a3\u4e48\u989d\u5916\u652f\u6301 LIKE \u3001 ILIKE \u5173\u952e\u5b57\u3002 \u516c\u5f0f \u6570\u636e\u7c7b\u578b\u6839\u636e\u901a\u8fc7\u8be5\u516c\u5f0f\u8ba1\u7b97\u5f97\u5230\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u800c\u5b9a \u521b\u5efa\u8005 \u7528\u6237 ID, string \u521b\u5efa\u65f6\u95f4 Datetime \u4fee\u6539\u8005 \u7528\u6237 ID, string \u4fee\u6539\u65f6\u95f4 Datetime \u81ea\u52a8\u5e8f\u53f7 String URL String \u90ae\u7bb1 String \u65f6\u957f Float \u6b64\u5916\uff0c \u5728 where \u8bed\u53e5\u4e2d\uff0c \u5982\u679c\u4e00\u4e2a\u5217\u4e2d\u7684\u6570\u636e\u662f\u5217\u8868\u7c7b\u578b\u5448\u73b0(\u5982\u534f\u4f5c\u4eba\uff0c\u591a\u9009\u5217\u7b49)\uff0c \u5e76\u4e14\u8be5\u5217\u4e0e\u4e00\u4e2a\u5b57\u7b26\u4e32\u505a\u6bd4\u8f83\u65f6\uff0c \u5982\u679c\u8be5\u5b57\u7b26\u4e32\u5728\u8be5\u5217\u8868\u4e2d\u65f6\uff0c \u5219\u4f1a\u5224\u65ad\u4e3a true \u5e76\u4e14\u8fd4\u56de\u7ed3\u679c\u3002 \u5982\uff1a SELECT * FROM tb3 where multi_select ='select 1' and multi_select='select 2' , \u5982\u679c\u5217 multi-select \u4e2d\u540c\u65f6\u5305\u542b \u2019select 1\u2019 \u548c \u2018select 2\u2019\uff0c \u5219\u6ee1\u8db3\u67e5\u8be2\u6761\u4ef6\u5e76\u8fd4\u56de\u3002 \u8865\u5145\u8bf4\u660e\uff1a \u65f6\u957f\u7c7b\u578b\u7684\u6570\u636e\u6362\u7b97\u6210\u79d2\u8fd4\u56de\uff0c\u5982\u6570\u636e\u662f3:43\uff0c\u6362\u7b97\u6210\u79d2\u4e3a3 * 3600 + 43 * 60 = 13380 \u5730\u7406\u4f4d\u7f6e\u7c7b\u578b\u7684\u6570\u636e\u6839\u636e\u8bbe\u7f6e\u7684\u683c\u5f0f\u4e0d\u540c\u8fd4\u56de\u7ed3\u679c\u6709\u5dee\u5f02\uff0c \u5982\u8bbe\u7f6e\u7ecf\u7eac\u5ea6\uff0c \u8fd4\u56de\u7ecf\u7eac\u5ea6\u7684\u6570\u5b57\uff0c \u8bbe\u7f6e\u7701\u5e02\u7b49\uff0c\u8fd4\u56de\u7701\uff0c \u5e02\uff0c\u5176\u4ed6\u7ec6\u8282\u4fe1\u606f\u7b49 \u6587\u4ef6\u7c7b\u578b\u7684\u6570\u636e\u8fd4\u56de\u5305\u542b\u540d\u79f0\uff0c\u7c7b\u578b\uff0curl\u7b49\u4fe1\u606f\u7684\u5217\u8868 \u6269\u5c55\u8bed\u6cd5 \u00b6 SQL \u67e5\u8be2\u4e2d\u4f7f\u7528\u516c\u5f0f \u00b6 SeaTable \u4e2d\u7684\u4e00\u4e9b\u516c\u5f0f\u4e5f\u53ef\u4ee5\u7528\u4e8e SQL \u67e5\u8be2\u5f53\u4e2d\uff0c \u4ee5\u4e0b\u6709\u51e0\u70b9\u8bf4\u660e\uff1a \u94fe\u63a5\u516c\u5f0f\u6682\u4e0d\u652f\u6301\uff0c \u5982 {link.age}, \u8fd9\u79cd\u67e5\u8be2\u65e0\u6548; \u67e5\u8be2\u7684\u5217\u540d\u4e0d\u652f\u6301\u4f7f\u7528\u5927\u62ec\u53f7(\u201c{}\u201d)\u6765\u4fee\u9970\uff0c \u5982\uff1a select abs({column}) from talbe; \u5c5e\u4e8e\u65e0\u6548\u67e5\u8be2\uff0c \u5e94\u8be5\u5199\u6210\uff1a select abs(column) from table; \uff0c\u6b64\u89c4\u5219\u540c SQL \u8bed\u6cd5\u4e00\u81f4; \u5982\u679c\u5b57\u6bb5\u540d\u79f0\u4e2d\u5305\u542b\u7a7a\u683c\u6216\u8fde\u63a5\u7b26\u201c-\u201d\uff0c \u53ef\u662f\u4f7f\u7528\u5de6\u5f15\u53f7(\"``\")\u6765\u8fdb\u884c\u4fee\u9970\uff0c \u5982: select abs `column-a` from table; \u4e0d\u652f\u6301\u7ed9\u5b50\u6bb5\u8d77\u522b\u540d\uff0c \u5982\uff1a select abs(t.column) from table as t; \u4e3a\u65e0\u6548\u67e5\u8be2\uff1b \u516c\u5f0f\u53ef\u4ee5\u7528\u5728 group by \u4ee5\u53ca order by \u8868\u8fbe\u8bed\u53e5\u5f53\u4e2d; \u989d\u5916\u652f\u6301\u7684\u516c\u5f0f\u51fd\u6570: STARTOFWEEK(date, weekStart) : \u8fd4\u56de\u5305\u542b \u201cdate\u201d \u7684\u661f\u671f\u7684\u7b2c\u4e00\u5929\u7684\u65e5\u671f\uff0c \u201cweekstart\u201d \u53ef\u9009 \u201csunday\u201d \u6216\u8005 \u201cmonday\u201d \u6765\u4f5c\u4e3a\u4e00\u5468\u7684\u7b2c\u4e00\u5929 Quarter(date) : \u8fd4\u56de\u7b2c\u51e0\u4e2a\u5b63\u5ea6\uff0c\u5305\u62ec1\uff0c2\uff0c3\uff0c4. ISODate(date) : \u8fd4\u56de ISO \u683c\u5f0f\u7684\u65e5\u671f\uff0c \u5982: \"2020-09-08\" ISOMonth(date) : \u8fd4\u56de ISO \u683c\u5f0f\u7684\u6708\u4efd\uff0c \u5982: \"2020-07\" \u4ee5\u4e0a\u7684\u516c\u5f0f\u53ef\u4ee5\u7528\u4e8e group by \u5206\u7ec4\uff0c \u6309\u661f\u671f\uff0c \u6708\uff0c\u5b63\u5ea6\uff0c \u65e5\u671f\u7b49\uff0c \u5982\uff1a select sum(sale) from SalesRecord group by ISODate(SalesTime) , \u8fd4\u56de\u6bcf\u5929\u7684\u603b\u9500\u91cf\u3002 \u66f4\u591a\u652f\u6301\u7684\u516c\u5f0f\u51fd\u6570\u8bf7\u53c2\u8003 SQL\u51fd\u6570\u53c2\u8003 \u67e5\u8be2\u5b57\u7b26\u4e32\u5217\u8868 \u00b6 \u534f\u4f5c\u4eba\u4ee5\u53ca\u591a\u9009\u7c7b\u578b\u4ee5\u5b57\u7b26\u4e32\u5217\u8868\u7684\u65b9\u5f0f\u8fdb\u884c\u5448\u73b0\uff0c SeaTable \u4ece UI \u5c42\u9762\u4e0a\u5bf9\u8fd9\u8fc7\u6ee4\u4e24\u79cd\u7c7b\u578b\u7684\u6570\u636e\u4f7f\u7528\u7279\u522b\u7684\u51fd\u6570\u5448\u73b0\uff0c \u5305\u62ec HAS ANY OF , HAS ALL OF , HAS NONE OF , IS EXACTLY . \u8fd9\u4e9b\u5173\u952e\u5b57\u540c\u6837\u4e5f\u9002\u7528\u4e8e SQL \u67e5\u8be2\u8bed\u6cd5\u4e2d\u3002\u6bd4\u5982\uff1a\u540d\u4e3a \u201ccity\u201d \u7684\u5217\u5c5e\u4e8e\u591a\u9009\u7c7b\u578b\uff0c \u6211\u4eec\u60f3\u67e5\u8be2\u51fa\u6240\u6709\u5305\u542b \u201cNew York\u201d \u548c \u201cParis\u201d \u7684\u884c\uff0c \u53ef\u4ee5\u505a\u5982\u4e0b\u67e5\u8be2\uff1a select * from table where city has any of (\"New York\", \"Paris\"); , \u5176\u4e2d\uff0c\u7528\u62ec\u53f7\u4fee\u9970\u7684\u57ce\u5e02\u5217\u8868\uff0c\u76f8\u5f53\u4e8e\u8bed\u6cd5\u4e2d\u7684 IN .","title":"SQL \u8bed\u6cd5\u53c2\u8003"},{"location":"sql/sql/#sql","text":"SeaTable \u4e2d\u6570\u636e\u67e5\u8be2\u652f\u6301 SQL \u8bed\u53e5\u3002\u4f7f\u7528 SQL \u8bed\u53e5\u4f1a\u68c0\u7d22\u5b8c\u6574\u7684\u6570\u636e\u96c6\uff0c\u4e5f\u5c31\u662f\u5305\u62ec\u5f52\u6863\u548c\u975e\u5f52\u6863\u7684\u6570\u636e\u3002","title":"SQL \u652f\u6301"},{"location":"sql/sql/#_1","text":"\u76ee\u524d\u53ea\u652f\u6301\u57fa\u672c\u7684 select \u8bed\u53e5\uff0c\u8bed\u6cd5\u5982\u4e0b\uff1a SELECT [ DISTINCT ] fields FROM table_name [ WhereClause ] [ GroupByClause ] [ HavingClause ] [ OrderByClause ] [ Limit Option ] \u8bf4\u660e\uff1a \u6682\u4e0d\u652f\u6301\u591a\u4e2a\u5b50\u8868\u67e5\u8be2\u7684 JOIN \u8bed\u53e5; where \u8bed\u53e5\u4e2d\u652f\u6301\u5927\u90e8\u5206\u7684\u8868\u8fbe\u5f0f (\u7b97\u6570\u8868\u8fbe\u5f0f\uff0c \u6bd4\u8f83\u8868\u8fbe\u5f0f\u7b49), \u5173\u952e\u5b57\u5305\u62ec\uff1a [NOT] LIKE , IN , BETWEEN ... AND ... , AND , OR , NOT , IS [NOT] TRUE , IS [NOT] NULL . \u5176\u4e2d\uff1a \u7b97\u672f\u8868\u8fbe\u5f0f\u53ea\u652f\u6301\u6570\u5b57. LIKE \u8bed\u53e5\u53ea\u652f\u6301\u5b57\u7b26\u4e32. \u652f\u6301\u4f7f\u7528 ILIKE \u5173\u952e\u5b57\u66ff\u4ee3 LIKE \uff0c\u4ece\u800c\u5728\u5339\u914d\u4e2d\u4e0d\u533a\u5206\u5927\u5c0f\u5199. BETWEEN ... AND ... \u8bed\u53e5\u53ea\u652f\u6301\u6570\u5b57\u4e0e\u65f6\u95f4. \u5176\u4e2d\u65f6\u95f4\u5e38\u6570\u5e94\u8be5\u662f ISO \u683c\u5f0f\u7684\u5b57\u7b26\u4e32 (\u5982: \"2020-09-08 00:11:23\"); GROUP BY \u8bed\u6cd5\u6bd4\u8f83\u4e25\u683c. \u9664\u4e86\u805a\u5408\u51fd\u6570\u7684\u5173\u952e\u5b57( COUNT , SUM , MAX , MIN , AVG ) \u4ee5\u53ca\u516c\u5f0f\u7684\u5173\u952e\u5b57(\u7ec6\u8282\u8bf7\u67e5\u770b\u672c\u6587\u6863\u7684\u6269\u5c55\u8bed\u6cd5)\u4e4b\u5916\uff0c\u6240\u9009\u5b57\u6bb5\u4e5f\u5fc5\u987b\u540c\u6837\u4e5f\u8981\u51fa\u73b0\u5728 group by \u7684\u8bed\u53e5\u4e2d; HAVING \u8fc7\u6ee4\u7ecf group by \u805a\u5408\u540e\u7684\u884c\u3002\u53ea\u6709 group by \u8bed\u53e5\u4e2d\u7684\u5b57\u6bb5\u6216\u8005\u805a\u5408\u51fd\u6570\u80fd\u88ab having \u8bed\u53e5\u5f15\u7528\uff0c\u5176\u5b83\u8bed\u6cd5\u548c where \u8bed\u53e5\u76f8\u540c\uff1b \"order by\" \u8bed\u53e5\u8868\u793a\u6839\u636e\u67d0\u5b57\u6bb5\u6392\u5e8f\uff0c \u8be5\u5b57\u6bb5\u5fc5\u987b\u51fa\u73b0\u5728 select \u8868\u8fbe\u5f0f\u4e2d\u3002\u6bd4\u5982\uff1a select a from table order by b \u662f\u65e0\u6548\u8bed\u53e5; \u800c select a from table order by a \u6216\u8005 select abs(a), b from table order by abs(a) \u5219\u53ef\u4ee5\u8fd0\u884c\uff1b Limit \u8bed\u53e5\u548c MySQL \u683c\u5f0f\u4e00\u6837\uff0c\u8bed\u6cd5\u662f OFFSET ... LIMIT ... \u3002 \u67e5\u8be2\u7ed3\u679c\u662f\u4ee5 JSON \u7684\u683c\u5f0f\u8fdb\u884c\u8fd4\u56de. \u5176\u4e2d key \u5b57\u6bb5\u662f\u5217\u7684\u552f\u4e00\u6807\u793a\uff0c \u800c\u4e0d\u662f\u5217\u540d\u3002","title":"\u8bed\u6cd5"},{"location":"sql/sql/#_2","text":"\u4ee5\u4e0b\u8868\u683c\u5217\u51fa\u4e86 SeaTable \u8868\u683c\u4e2d\u7684\u6570\u636e\u4e0e SQL \u8bed\u53e5\u5b57\u6bb5\u4e2d\u6570\u636e\u7c7b\u578b\u7684\u5bf9\u5e94\u60c5\u51b5 SeaTable \u6570\u636e\u7c7b\u578b SQL \u5b57\u6bb5\u7c7b\u578b \u6587\u672c String \u957f\u6587\u672c String \u6570\u5b57 Float \u5355\u9009 String. \u5728 where \u8868\u8fbe\u5f0f\u4e2d\uff0c \u9700\u8981\u4f7f\u7528\u9009\u9879\u7684\u540d\u79f0\uff0c\u5982\uff1a where single_select = \"New York\" \u3002\u67e5\u8be2\u7ed3\u679c\u9ed8\u8ba4\u8fd4\u56de\u7684\u662f\u9009\u9879\u7684 key \uff0c\u5982\u9700\u8fd4\u56de\u9009\u9879\u7684\u540d\u79f0\uff0c\u5219\u5e94\u628a\u67e5\u8be2\u8bf7\u6c42\u4e2d\u7684 convert_key \u53c2\u6570\u8bbe\u7f6e\u4e3a TRUE \u591a\u9009 \u5305\u542b string \u7684\u5217\u8868. \u5728 where \u8868\u8fbe\u5f0f\u4e2d\uff0c \u9700\u8981\u4f7f\u7528\u9009\u9879\u7684\u540d\u79f0\uff0c\u5982\uff1a where single_select = \"New York\" \u3002\u67e5\u8be2\u7ed3\u679c\u9ed8\u8ba4\u8fd4\u56de\u7684\u662f\u9009\u9879\u7684 key \uff0c\u5982\u9700\u8fd4\u56de\u9009\u9879\u7684\u540d\u79f0\uff0c\u5219\u5e94\u628a\u67e5\u8be2\u8bf7\u6c42\u4e2d\u7684 convert_key \u53c2\u6570\u8bbe\u7f6e\u4e3a TRUE \u52fe\u9009 Bool \u65e5\u671f Datetime. ISO \u683c\u5f0f\u7684\u65f6\u95f4\u5b57\u7b26\u4e32 \u5982: \"2006-1-2\" or \"2006-1-2 15:04:05\". \u5730\u7406\u4f4d\u7f6e \u67e5\u8be2\u7ed3\u679c\u4ee5json\u7684\u683c\u5f0f\u8fdb\u884c\u8fd4\u56de \u56fe\u7247 \u5305\u542b\u56fe\u7247\u7684 URL \u7684\u5217\u8868 \u6587\u4ef6 \u4e0d\u80fd\u7528\u4e8e where \u8bed\u53e5\uff0c \u67e5\u8be2\u7ed3\u679c\u5c06\u4ee5 JSON \u7684\u683c\u5f0f\u8fdb\u884c\u8fd4\u56de\u3002 \u534f\u4f5c\u4eba \u5305\u542b\u7528\u6237 ID \u7684\u5217\u8868, \u683c\u5f0f\u5982 5758ecdce3e741ad81293a304b6d3388@auth.local, \u5982\u679c\u7528\u5230\u7528\u6237\u540d\u79f0\uff0c\u9700\u8981\u901a\u8fc7 SeaTable \u7684\u76f8\u5173 API \u8fdb\u884c\u8f6c\u6362\u3002 \u94fe\u63a5\u5176\u4ed6\u8bb0\u5f55 \u5305\u542b\u94fe\u63a5\u884c\u7684\u5217\u8868\u3002\u81ea 2.4 \u7248\u672c\u8d77\uff0c\u53ef\u4ee5\u5728 WHERE \u5b50\u53e5\u4e2d\u914d\u5408 = \u3001 IN \u3001 HAS ANY OF \u3001 HAS ALL OF \u3001 HAS NONE OF \u3001 IS EXACTLY \u6216 IS NULL \u64cd\u4f5c\u7b26\u4f7f\u7528\u3002\u94fe\u63a5\u884c\u7684\u663e\u793a\u5217\u7684\u503c\u5c06\u88ab\u7528\u4ee5\u8ba1\u7b97\uff0c\u5e76\u5728\u7ed3\u679c\u4e2d\u8fd4\u56de\u3002\u8fd4\u56de\u7684\u7ed3\u679c\u4e2d\u6700\u591a\u5305\u542b 10 \u4e2a\u94fe\u63a5\u884c\uff0c\u4f9d\u7167\u521b\u5efa\u65f6\u95f4\u7684\u5148\u540e\u6765\u6392\u5e8f\u3002\u5982\u679c\u94fe\u63a5\u884c\u7684\u663e\u793a\u5217\u7684\u503c\u7c7b\u578b\u662f String \uff0c\u90a3\u4e48\u989d\u5916\u652f\u6301 LIKE \u3001 ILIKE \u5173\u952e\u5b57\u3002 \u516c\u5f0f \u6570\u636e\u7c7b\u578b\u6839\u636e\u901a\u8fc7\u8be5\u516c\u5f0f\u8ba1\u7b97\u5f97\u5230\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u800c\u5b9a \u521b\u5efa\u8005 \u7528\u6237 ID, string \u521b\u5efa\u65f6\u95f4 Datetime \u4fee\u6539\u8005 \u7528\u6237 ID, string \u4fee\u6539\u65f6\u95f4 Datetime \u81ea\u52a8\u5e8f\u53f7 String URL String \u90ae\u7bb1 String \u65f6\u957f Float \u6b64\u5916\uff0c \u5728 where \u8bed\u53e5\u4e2d\uff0c \u5982\u679c\u4e00\u4e2a\u5217\u4e2d\u7684\u6570\u636e\u662f\u5217\u8868\u7c7b\u578b\u5448\u73b0(\u5982\u534f\u4f5c\u4eba\uff0c\u591a\u9009\u5217\u7b49)\uff0c \u5e76\u4e14\u8be5\u5217\u4e0e\u4e00\u4e2a\u5b57\u7b26\u4e32\u505a\u6bd4\u8f83\u65f6\uff0c \u5982\u679c\u8be5\u5b57\u7b26\u4e32\u5728\u8be5\u5217\u8868\u4e2d\u65f6\uff0c \u5219\u4f1a\u5224\u65ad\u4e3a true \u5e76\u4e14\u8fd4\u56de\u7ed3\u679c\u3002 \u5982\uff1a SELECT * FROM tb3 where multi_select ='select 1' and multi_select='select 2' , \u5982\u679c\u5217 multi-select \u4e2d\u540c\u65f6\u5305\u542b \u2019select 1\u2019 \u548c \u2018select 2\u2019\uff0c \u5219\u6ee1\u8db3\u67e5\u8be2\u6761\u4ef6\u5e76\u8fd4\u56de\u3002 \u8865\u5145\u8bf4\u660e\uff1a \u65f6\u957f\u7c7b\u578b\u7684\u6570\u636e\u6362\u7b97\u6210\u79d2\u8fd4\u56de\uff0c\u5982\u6570\u636e\u662f3:43\uff0c\u6362\u7b97\u6210\u79d2\u4e3a3 * 3600 + 43 * 60 = 13380 \u5730\u7406\u4f4d\u7f6e\u7c7b\u578b\u7684\u6570\u636e\u6839\u636e\u8bbe\u7f6e\u7684\u683c\u5f0f\u4e0d\u540c\u8fd4\u56de\u7ed3\u679c\u6709\u5dee\u5f02\uff0c \u5982\u8bbe\u7f6e\u7ecf\u7eac\u5ea6\uff0c \u8fd4\u56de\u7ecf\u7eac\u5ea6\u7684\u6570\u5b57\uff0c \u8bbe\u7f6e\u7701\u5e02\u7b49\uff0c\u8fd4\u56de\u7701\uff0c \u5e02\uff0c\u5176\u4ed6\u7ec6\u8282\u4fe1\u606f\u7b49 \u6587\u4ef6\u7c7b\u578b\u7684\u6570\u636e\u8fd4\u56de\u5305\u542b\u540d\u79f0\uff0c\u7c7b\u578b\uff0curl\u7b49\u4fe1\u606f\u7684\u5217\u8868","title":"\u6570\u636e\u7c7b\u578b"},{"location":"sql/sql/#_3","text":"","title":"\u6269\u5c55\u8bed\u6cd5"},{"location":"sql/sql/#sql_1","text":"SeaTable \u4e2d\u7684\u4e00\u4e9b\u516c\u5f0f\u4e5f\u53ef\u4ee5\u7528\u4e8e SQL \u67e5\u8be2\u5f53\u4e2d\uff0c \u4ee5\u4e0b\u6709\u51e0\u70b9\u8bf4\u660e\uff1a \u94fe\u63a5\u516c\u5f0f\u6682\u4e0d\u652f\u6301\uff0c \u5982 {link.age}, \u8fd9\u79cd\u67e5\u8be2\u65e0\u6548; \u67e5\u8be2\u7684\u5217\u540d\u4e0d\u652f\u6301\u4f7f\u7528\u5927\u62ec\u53f7(\u201c{}\u201d)\u6765\u4fee\u9970\uff0c \u5982\uff1a select abs({column}) from talbe; \u5c5e\u4e8e\u65e0\u6548\u67e5\u8be2\uff0c \u5e94\u8be5\u5199\u6210\uff1a select abs(column) from table; \uff0c\u6b64\u89c4\u5219\u540c SQL \u8bed\u6cd5\u4e00\u81f4; \u5982\u679c\u5b57\u6bb5\u540d\u79f0\u4e2d\u5305\u542b\u7a7a\u683c\u6216\u8fde\u63a5\u7b26\u201c-\u201d\uff0c \u53ef\u662f\u4f7f\u7528\u5de6\u5f15\u53f7(\"``\")\u6765\u8fdb\u884c\u4fee\u9970\uff0c \u5982: select abs `column-a` from table; \u4e0d\u652f\u6301\u7ed9\u5b50\u6bb5\u8d77\u522b\u540d\uff0c \u5982\uff1a select abs(t.column) from table as t; \u4e3a\u65e0\u6548\u67e5\u8be2\uff1b \u516c\u5f0f\u53ef\u4ee5\u7528\u5728 group by \u4ee5\u53ca order by \u8868\u8fbe\u8bed\u53e5\u5f53\u4e2d; \u989d\u5916\u652f\u6301\u7684\u516c\u5f0f\u51fd\u6570: STARTOFWEEK(date, weekStart) : \u8fd4\u56de\u5305\u542b \u201cdate\u201d \u7684\u661f\u671f\u7684\u7b2c\u4e00\u5929\u7684\u65e5\u671f\uff0c \u201cweekstart\u201d \u53ef\u9009 \u201csunday\u201d \u6216\u8005 \u201cmonday\u201d \u6765\u4f5c\u4e3a\u4e00\u5468\u7684\u7b2c\u4e00\u5929 Quarter(date) : \u8fd4\u56de\u7b2c\u51e0\u4e2a\u5b63\u5ea6\uff0c\u5305\u62ec1\uff0c2\uff0c3\uff0c4. ISODate(date) : \u8fd4\u56de ISO \u683c\u5f0f\u7684\u65e5\u671f\uff0c \u5982: \"2020-09-08\" ISOMonth(date) : \u8fd4\u56de ISO \u683c\u5f0f\u7684\u6708\u4efd\uff0c \u5982: \"2020-07\" \u4ee5\u4e0a\u7684\u516c\u5f0f\u53ef\u4ee5\u7528\u4e8e group by \u5206\u7ec4\uff0c \u6309\u661f\u671f\uff0c \u6708\uff0c\u5b63\u5ea6\uff0c \u65e5\u671f\u7b49\uff0c \u5982\uff1a select sum(sale) from SalesRecord group by ISODate(SalesTime) , \u8fd4\u56de\u6bcf\u5929\u7684\u603b\u9500\u91cf\u3002 \u66f4\u591a\u652f\u6301\u7684\u516c\u5f0f\u51fd\u6570\u8bf7\u53c2\u8003 SQL\u51fd\u6570\u53c2\u8003","title":"SQL \u67e5\u8be2\u4e2d\u4f7f\u7528\u516c\u5f0f"},{"location":"sql/sql/#_4","text":"\u534f\u4f5c\u4eba\u4ee5\u53ca\u591a\u9009\u7c7b\u578b\u4ee5\u5b57\u7b26\u4e32\u5217\u8868\u7684\u65b9\u5f0f\u8fdb\u884c\u5448\u73b0\uff0c SeaTable \u4ece UI \u5c42\u9762\u4e0a\u5bf9\u8fd9\u8fc7\u6ee4\u4e24\u79cd\u7c7b\u578b\u7684\u6570\u636e\u4f7f\u7528\u7279\u522b\u7684\u51fd\u6570\u5448\u73b0\uff0c \u5305\u62ec HAS ANY OF , HAS ALL OF , HAS NONE OF , IS EXACTLY . \u8fd9\u4e9b\u5173\u952e\u5b57\u540c\u6837\u4e5f\u9002\u7528\u4e8e SQL \u67e5\u8be2\u8bed\u6cd5\u4e2d\u3002\u6bd4\u5982\uff1a\u540d\u4e3a \u201ccity\u201d \u7684\u5217\u5c5e\u4e8e\u591a\u9009\u7c7b\u578b\uff0c \u6211\u4eec\u60f3\u67e5\u8be2\u51fa\u6240\u6709\u5305\u542b \u201cNew York\u201d \u548c \u201cParis\u201d \u7684\u884c\uff0c \u53ef\u4ee5\u505a\u5982\u4e0b\u67e5\u8be2\uff1a select * from table where city has any of (\"New York\", \"Paris\"); , \u5176\u4e2d\uff0c\u7528\u62ec\u53f7\u4fee\u9970\u7684\u57ce\u5e02\u5217\u8868\uff0c\u76f8\u5f53\u4e8e\u8bed\u6cd5\u4e2d\u7684 IN .","title":"\u67e5\u8be2\u5b57\u7b26\u4e32\u5217\u8868"}]}